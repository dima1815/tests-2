Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/Admin.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/Admin.js	(revision 0a8d07d9d7927f7cfb428c006749c440aaa49b6b)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/Admin.js	(revision )
@@ -3,6 +3,7 @@
     console.log("loading Admin.js script");
 
     // form the URL
+    var contextPath = AJS.contextPath();
     var baseURL = contextPath + "/rest/jbehave-for-jira/1.0/settings";
 
     AJS.$("#settingSelector").first().change(
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/VcsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/VcsService.java	(revision 0a8d07d9d7927f7cfb428c006749c440aaa49b6b)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/VcsService.java	(revision )
@@ -10,5 +10,5 @@
 
     RevisionInfo getLatestRevisionInfo(String projectKey, String issueKey);
 
-    boolean delete(JiraStory story);
+    Boolean delete(JiraStory story);
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/git/GitService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/git/GitService.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/git/GitService.java	(revision )
@@ -0,0 +1,139 @@
+package com.jbehaveforjira.plugin.integration.git;
+
+import com.jbehaveforjira.plugin.config.Setting;
+import com.jbehaveforjira.plugin.config.SettingsManager;
+import com.jbehaveforjira.plugin.dto.story.JiraStory;
+import com.jbehaveforjira.plugin.integration.RevisionInfo;
+import com.jbehaveforjira.plugin.integration.VcsService;
+import org.eclipse.jgit.api.CloneCommand;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.transport.RefSpec;
+import org.eclipse.jgit.transport.RemoteConfig;
+
+import java.io.File;
+import java.util.Collection;
+import java.util.Map;
+
+/**
+ *
+ */
+public class GitService implements VcsService {
+
+    private final Setting<GitConfig> config;
+
+    private final SettingsManager settingsManager;
+
+    public GitService(SettingsManager settingsManager) {
+
+        this.settingsManager = settingsManager;
+
+        GitConfig defaultValue = new GitConfig();
+
+        // construct example
+        GitConfig exampleValue = new GitConfig();
+        exampleValue.setEnabled(true);
+        Map<String, GitMapping> mappings = exampleValue.getMappings();
+        GitMapping demoMapping = new GitMapping(
+                "http://myperforce-server.com", "perforce_username", "perforce_password",
+                "//depo/projects/DEMO/...", "JBehaveStories/...", "C:\temp", "committed via JBehaveForJira plugin");
+        mappings.put("DEMO", demoMapping);
+        GitMapping testProjectMapping = new GitMapping(
+                "http://myperforce-server.com", "perforce_username", "perforce_password",
+                "//depo/projects/TEST_PROJECT/...", "JBehaveStories/...", "C:\temp", "committed via JBehaveForJira plugin");
+        mappings.put("TEST_PROJECT", testProjectMapping);
+
+        this.config = new Setting<GitConfig>("INTEGRATION_GIT", defaultValue, exampleValue);
+
+        this.settingsManager.loadSetting(config);
+    }
+
+
+    @Override
+    public Long commit(JiraStory story) {
+        return null;
+    }
+
+    @Override
+    public JiraStory findByProjectAndIssueKey(String projectKey, String issueKey) {
+        throw new UnsupportedOperationException("Not yet implemented");
+    }
+
+    @Override
+    public RevisionInfo getLatestRevisionInfo(String projectKey, String issueKey) {
+
+        Git result = null;
+//        String remoteUrl = "http://stasyukd@git:7990/scm/ccl/swan.git";
+//        String remoteUrl = "https://pristrom@bitbucket.org/pristrom/jbehave-for-jira-java-client.git";
+        String remoteUrl = "https://github.com/dima1815/tests-2.git";
+
+        try {
+            File localPath = File.createTempFile("TestGitRepository", "");
+            localPath.delete();
+
+            // then clone
+            System.out.println("Cloning from " + remoteUrl + " to " + localPath);
+
+            char[] password = "test".toCharArray();
+//            CredentialsProvider credentialsProvider = new UsernamePasswordCredentialsProvider("stasyukd", password);
+
+            Collection<Ref> call = Git.lsRemoteRepository().setRemote(remoteUrl)
+//                    .setCredentialsProvider(credentialsProvider)
+                    .setTimeout(30)
+                    .call();
+
+//            System.out.println("Listing local branches:");
+//            List<Ref> call = new Git(repository).branchList().call();
+//            for (Ref ref : call) {
+//                System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+//            }
+//            System.out.println("Now including remote branches:");
+//            call = new Git(repository).branchList().setListMode(ListMode.ALL).call();
+//            for (Ref ref : call) {
+//                System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+//            }
+
+            Config config = new Config();
+
+            config.setString("remote", "origin", "pushurl", remoteUrl);
+            config.setString("url", remoteUrl, "name", "short:");
+//            config.setString();
+            RemoteConfig rc = new RemoteConfig(config, "master");
+            rc.addFetchRefSpec(new RefSpec("+:LatitudeAcceptanceTests/java-apps => ."));
+            rc.update(config);
+
+//            config.save();
+
+//            .checkout().addPath("file1.txt").addPath("file2.txt").call();
+
+            // cloning repository
+            CloneCommand cloneCommand = Git.cloneRepository();
+//            cloneCommand.setRemote(rc.getName());
+            cloneCommand.setURI(remoteUrl);
+//            cloneCommand.setBranch("refs/heads/feature/coherence-cache");
+//            cloneCommand.setCredentialsProvider(credentialsProvider);
+            cloneCommand.setDirectory(localPath);
+            cloneCommand.setTimeout(30);
+            cloneCommand.setNoCheckout(true);
+            result = cloneCommand.call();
+
+            // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+            System.out.println("Having repository: " + result.getRepository().getDirectory());
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            if (result != null) {
+                result.close();
+            }
+        }
+
+        return null;
+    }
+
+    @Override
+    public Boolean delete(JiraStory story) {
+        throw new UnsupportedOperationException("Not yet implemented");
+    }
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/git/GitMapping.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/git/GitMapping.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/git/GitMapping.java	(revision )
@@ -0,0 +1,69 @@
+package com.jbehaveforjira.plugin.integration.git;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement
+@XmlAccessorType(XmlAccessType.FIELD)
+public class GitMapping {
+
+    @XmlAttribute(name="my_test_attribute", required = true)
+    private String serverUri;
+
+    private String username;
+
+    private String password;
+
+    private String remoteDirPath;
+
+    private String subDirExpression;
+
+    private String tempCheckOutDir;
+
+    private String commitMessage;
+
+    protected GitMapping() {
+
+    }
+
+    public GitMapping(String serverUri, String username, String password,
+                      String remoteDirPath, String subDirExpression, String tempCheckOutDir, String commitMessage) {
+        this.serverUri = serverUri;
+        this.username = username;
+        this.password = password;
+        this.remoteDirPath = remoteDirPath;
+        this.subDirExpression = subDirExpression;
+        this.tempCheckOutDir = tempCheckOutDir;
+        this.commitMessage = commitMessage;
+    }
+
+    public String getServerUri() {
+        return serverUri;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public String getRemoteDirPath() {
+        return remoteDirPath;
+    }
+
+    public String getTempCheckOutDir() {
+        return tempCheckOutDir;
+    }
+
+    public String getCommitMessage() {
+        return commitMessage;
+    }
+
+    public String getSubDirExpression() {
+        return subDirExpression;
+    }
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/pom.xml	(revision 0a8d07d9d7927f7cfb428c006749c440aaa49b6b)
+++ jbehave-for-jira/jbehave-for-jira-plugin/pom.xml	(revision )
@@ -6,7 +6,7 @@
     <artifactId>jira-plugin</artifactId>
     <packaging>atlassian-plugin</packaging>
     <name>JBehave For Jira - Jira Plugin</name>
-    <version>1.0.6</version>
+    <version>1.1.0</version>
     <description>Provides integration with JBehave BDD framework</description>
     <url>http://www.jbehaveforjira.com</url>
     <properties>
@@ -94,6 +94,11 @@
             <groupId>com.perforce</groupId>
             <artifactId>p4java</artifactId>
             <version>2013.2.788582</version>
+        </dependency>
+        <dependency>
+            <groupId>org.eclipse.jgit</groupId>
+            <artifactId>org.eclipse.jgit</artifactId>
+            <version>3.7.0.201502260915-r</version>
         </dependency>
         <!-- ================================================================================= -->
         <!--Jira provided dependencies-->
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/service/JiraStoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/service/JiraStoryService.java	(revision 0a8d07d9d7927f7cfb428c006749c440aaa49b6b)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/service/JiraStoryService.java	(revision )
@@ -7,6 +7,7 @@
 import com.jbehaveforjira.plugin.dto.story.JiraStory;
 import com.jbehaveforjira.plugin.integration.RevisionInfo;
 import com.jbehaveforjira.plugin.integration.VcsService;
+import com.jbehaveforjira.plugin.integration.git.GitService;
 import com.jbehaveforjira.plugin.integration.perforce.PerforceService;
 
 import java.util.List;
@@ -24,12 +25,15 @@
     private SettingsManager settingsManager;
 
     private final JiraAuthenticationContext authenticationContext;
+    private GitService gitService;
 
-    public JiraStoryService(PerforceService perforceService, JBehaveStoryDao jiraStoryService, SettingsManager settingsManager, JiraAuthenticationContext authenticationContext) {
+    public JiraStoryService(JBehaveStoryDao jiraStoryService, SettingsManager settingsManager, JiraAuthenticationContext authenticationContext,
+                            PerforceService perforceService, GitService gitService) {
         this.perforceService = perforceService;
         this.jiraRepo = jiraStoryService;
         this.settingsManager = settingsManager;
         this.authenticationContext = authenticationContext;
+        this.gitService = gitService;
     }
 
     public JiraStory findByProjectAndIssueKey(String projectKey, String issueKey, boolean updateFromVCS) {
@@ -171,11 +175,17 @@
 
     private RevisionInfo checkLatestVersionInVCS(String projectKey, String issueKey) {
 
-        RevisionInfo revisionInfo = perforceService.getLatestRevisionInfo(projectKey, issueKey);
+        RevisionInfo revisionInfo;
+
+        revisionInfo = perforceService.getLatestRevisionInfo(projectKey, issueKey);
         if (revisionInfo != null) {
             return revisionInfo;
         }
 
+        revisionInfo = gitService.getLatestRevisionInfo(projectKey, issueKey);
+        if (revisionInfo != null) {
+            return revisionInfo;
+        }
         // GIT and any other
         return null;
     }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceService.java	(revision 0a8d07d9d7927f7cfb428c006749c440aaa49b6b)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceService.java	(revision )
@@ -235,7 +235,7 @@
     }
 
     @Override
-    public boolean delete(JiraStory story) {
+    public Boolean delete(JiraStory story) {
 
         if (perforceConfig.value().isEnabled()) {
             PerforceConfig mappings = perforceConfig.value();
@@ -397,7 +397,7 @@
             }
         }
 
-        static IClientViewMapping setupClientView(IClient client, PerforceMapping perforceMapping) {
+        private static IClientViewMapping setupClientView(IClient client, PerforceMapping perforceMapping) {
 
             // create client mapping
             ClientView mapping = new ClientView();
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml	(revision 0a8d07d9d7927f7cfb428c006749c440aaa49b6b)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml	(revision )
@@ -294,6 +294,8 @@
                class="com.jbehaveforjira.plugin.service.JiraStepDocsService"/>
     <component key="perforce-service" name="Perforce Service"
                class="com.jbehaveforjira.plugin.integration.perforce.PerforceService"/>
+    <component key="git-service" name="Git Service"
+               class="com.jbehaveforjira.plugin.integration.git.GitService"/>
     <component key="settings-manager" name="Settings Manager" class="com.jbehaveforjira.plugin.config.SettingsManager"/>
     <!-- ==================================================================================================== -->
     <!--Active Objects-->
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/git/GitConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/git/GitConfig.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/git/GitConfig.java	(revision )
@@ -0,0 +1,36 @@
+package com.jbehaveforjira.plugin.integration.git;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlRootElement;
+import java.util.HashMap;
+import java.util.Map;
+
+@XmlRootElement
+@XmlAccessorType(XmlAccessType.FIELD)
+public class GitConfig {
+
+    private boolean enabled = false;
+
+    private Map<String, GitMapping> mappings = new HashMap<String, GitMapping>();
+
+    public GitMapping forProjectKey(String projectKey) {
+        return mappings.get(projectKey);
+    }
+
+    public Map<String, GitMapping> getMappings() {
+        return mappings;
+    }
+
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    public void setEnabled(boolean enabled) {
+        this.enabled = enabled;
+    }
+
+    public void setMappings(Map<String, GitMapping> mappings) {
+        this.mappings = mappings;
+    }
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/conditions/EnabledForProjectCondition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/conditions/EnabledForProjectCondition.java	(revision 0a8d07d9d7927f7cfb428c006749c440aaa49b6b)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/conditions/EnabledForProjectCondition.java	(revision )
@@ -12,18 +12,20 @@
 
 public class EnabledForProjectCondition implements Condition {
 
-    public final Setting<List<String>> enabledProjectsConfig;
+    public final Setting<List<String>> enabledPojectsConfig;
 
     private SettingsManager settingsManager;
 
     public EnabledForProjectCondition(SettingsManager settingsManager) {
 
         this.settingsManager = settingsManager;
+
         List<String> exampleSetting = new ArrayList<String>();
         exampleSetting.add("DEMO");
         exampleSetting.add("TEST_PROJECT");
-        this.enabledProjectsConfig  = new Setting<List<String>>("ENABLED_PROJECTS", new ArrayList<String>(), exampleSetting);
-        this.settingsManager.loadSetting(this.enabledProjectsConfig);
+        enabledPojectsConfig = new Setting<List<String>>("ENABLED_PROJECTS", new ArrayList<String>(), exampleSetting);
+
+        this.settingsManager.loadSetting(enabledPojectsConfig);
     }
 
     @Override
@@ -44,6 +46,6 @@
 
     public boolean enabledForProject(String projectKey) {
 
-        return this.enabledProjectsConfig.value().contains(projectKey);
+        return this.enabledPojectsConfig.value().contains(projectKey);
     }
 }
