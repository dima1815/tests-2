Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceConfig.java	(date 1426881923000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceConfig.java	(revision )
@@ -25,4 +25,12 @@
     public boolean isEnabled() {
         return enabled;
     }
+
+    public void setEnabled(boolean enabled) {
+        this.enabled = enabled;
+    }
+
+    public void setMappings(Map<String, PerforceMapping> mappings) {
+        this.mappings = mappings;
+    }
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/Setting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/Setting.java	(date 1426881923000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/Setting.java	(revision )
@@ -15,19 +15,23 @@
 
     protected T value;
 
+    protected final T exampleValue;
+
     protected final String key;
 
     /**
-     * Constructor here only for marshalling purposes that are done via reflection.
+     * Intended for use via Reflection API only.
      */
     protected Setting() {
-        key = null;
+        this.exampleValue = null;
+        this.key = null;
     }
 
-    public Setting(String key, T defaultValue) {
+    public Setting(String key, T defaultValue, T exampleValue) {
         Validate.notNull(key);
         this.key = key;
         this.value = defaultValue;
+        this.exampleValue = exampleValue;
     }
 
     public String key() {
@@ -42,7 +46,7 @@
         return value;
     }
 
-    public void fromString(String valueAsString) throws SettingParseException{
+    public void fromString(String valueAsString) throws SettingParseException {
         ObjectMapper objectMapper = new ObjectMapper();
         objectMapper.setVisibilityChecker(objectMapper.getVisibilityChecker().withFieldVisibility(JsonAutoDetect.Visibility.ANY));
 //        objectMapper.configure(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
@@ -65,18 +69,30 @@
     //    @Override
     public String asString() {
 
-        if (this.value != null) {
+        return asJSonString(this.value);
+    }
+
+    public String exampleAsString() {
+
+        return asJSonString(this.exampleValue);
+    }
+
+    private String asJSonString(T currentValue) {
+
+        if (currentValue != null) {
             ObjectMapper objectMapper = new ObjectMapper();
             objectMapper.configure(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS, false);
             try {
-                String asString = objectMapper.writeValueAsString(this.value);
+                String asString = objectMapper.writeValueAsString(currentValue);
                 return asString;
             } catch (IOException e) {
-                throw new RuntimeException("Exception occurred while attempting to marshall plugin setting for key - " + this.key, e);
+                throw new RuntimeException("Exception occurred while attempting to marshall plugin setting for key - " + this.key
+                        + ". Object value was: " + currentValue, e);
             }
         } else {
             return null;
         }
     }
+
 
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/utils/Tuple.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/utils/Tuple.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/utils/Tuple.java	(revision )
@@ -0,0 +1,21 @@
+package com.jbehaveforjira.plugin.utils;
+
+public class Tuple<A, B> {
+
+    private final A a;
+
+    private final B b;
+
+    public Tuple(A a, B b) {
+        this.a = a;
+        this.b = b;
+    }
+
+    public A getA() {
+        return a;
+    }
+
+    public B getB() {
+        return b;
+    }
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceMapping.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceMapping.java	(date 1426881923000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceMapping.java	(revision )
@@ -28,7 +28,7 @@
 
     }
 
-    public PerforceMapping(String projectKey, String serverUri, String username, String password,
+    public PerforceMapping(String serverUri, String username, String password,
                            String remoteDirPath, String subDirExpression, String tempCheckOutDir, String commitMessage) {
         this.serverUri = serverUri;
         this.username = username;
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceService.java	(date 1426881923000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceService.java	(revision )
@@ -36,14 +36,28 @@
  */
 public class PerforceService implements VcsService {
 
-    public static final Setting<PerforceConfig> INTEGRATION_PERFORCE = new Setting<PerforceConfig>("INTEGRATION_PERFORCE", new PerforceConfig());
+    private final Setting<PerforceConfig> perforceConfig;
 
     private final SettingsManager settingsManager;
 
     public PerforceService(SettingsManager settingsManager) {
 
         this.settingsManager = settingsManager;
-        this.settingsManager.loadSetting(INTEGRATION_PERFORCE);
+
+        PerforceConfig defaultValue = new PerforceConfig();
+
+        // construct example
+        PerforceConfig exampleValue = new PerforceConfig();
+        exampleValue.setEnabled(true);
+        Map<String, PerforceMapping> mappings = exampleValue.getMappings();
+        PerforceMapping demoMapping = new PerforceMapping(
+                "http://myperforce-server.com", "perforce_username", "perforce_password",
+                "//depo/projects/DEMO/...", "JBehaveStories/...", "C:\temp", "committed via JBehaveForJira plugin");
+        mappings.put("DEMO", demoMapping);
+
+        this.perforceConfig = new Setting<PerforceConfig>("INTEGRATION_PERFORCE", defaultValue, exampleValue);
+
+        this.settingsManager.loadSetting(perforceConfig);
     }
 
     private JiraStory findByProjectAndIssueKey(PerforceMapping perforceMapping, String projectKey, String issueKey)
@@ -177,8 +191,8 @@
     @Override
     public Long commit(JiraStory story) {
 
-        if (INTEGRATION_PERFORCE.value().isEnabled()) {
-            PerforceConfig mappings = INTEGRATION_PERFORCE.value();
+        if (perforceConfig.value().isEnabled()) {
+            PerforceConfig mappings = perforceConfig.value();
             PerforceMapping perforceMapping = mappings.forProjectKey(story.getProjectKey());
             if (perforceMapping != null) {
                 Long revisionNumber = this.commit(perforceMapping, story);
@@ -191,8 +205,8 @@
     @Override
     public JiraStory findByProjectAndIssueKey(String projectKey, String issueKey) {
 
-        if (INTEGRATION_PERFORCE.value().isEnabled()) {
-            PerforceConfig mappings = INTEGRATION_PERFORCE.value();
+        if (perforceConfig.value().isEnabled()) {
+            PerforceConfig mappings = perforceConfig.value();
             PerforceMapping perforceMapping = mappings.forProjectKey(projectKey);
             if (perforceMapping != null) {
                 JiraStory jiraStory = findByProjectAndIssueKey(perforceMapping, projectKey, issueKey);
@@ -205,8 +219,8 @@
     @Override
     public RevisionInfo getLatestRevisionInfo(String projectKey, String issueKey) {
 
-        if (INTEGRATION_PERFORCE.value().isEnabled()) {
-            PerforceConfig mappings = INTEGRATION_PERFORCE.value();
+        if (perforceConfig.value().isEnabled()) {
+            PerforceConfig mappings = perforceConfig.value();
             PerforceMapping perforceMapping = mappings.forProjectKey(projectKey);
             if (perforceMapping != null) {
                 return getLatestRevisionInfo(perforceMapping, projectKey, issueKey);
@@ -219,8 +233,8 @@
     @Override
     public boolean delete(JiraStory story) {
 
-        if (INTEGRATION_PERFORCE.value().isEnabled()) {
-            PerforceConfig mappings = INTEGRATION_PERFORCE.value();
+        if (perforceConfig.value().isEnabled()) {
+            PerforceConfig mappings = perforceConfig.value();
             PerforceMapping perforceMapping = mappings.forProjectKey(story.getProjectKey());
             if (perforceMapping != null) {
                 delete(perforceMapping, story);
