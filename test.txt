Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/temp.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/temp.html	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/temp.html	(revision )
@@ -1,7 +1,120 @@
-<div id="storyMsgBar">
-    <div class="aui-message warning  shadowed " id="storyWarningMsg"><p class="title"><span
-            class="aui-icon icon-warning"></span><strong></strong></p><span>Story has been modified! <span class="edit-operation-link"><a
-            href="#" onclick="storyController.saveStory(event)">Save</a></span> or <span class="edit-operation-link"><a href="#"
-                                                                                                                        onclick="storyController.cancelEdit(event)">Cancel</a></span></span><!-- .aui-message -->
+<div id="storyReportsPanel">
+    <div class="aui-tabs horizontal-tabs">
+        <ul class="tabs-menu">
+            <li class="menu-item active-tab"><a href="#storyReportTab0"><strong>DEV</strong><span class="aui-badge passed">1</span><span
+                    class="aui-badge pending">1</span></a></li>
+            <li class="menu-item"><a href="#storyReportTab1"><strong>TEST</strong><span class="aui-badge pending">2</span></a></li>
+        </ul>
+        <div id="#storyReportTab0" class="tabs-pane story-report-tab active-pane">
+            <div id="storyReportMsgContainer0">
+                <div id="reportMsg0" class="aui-message hint"><p>Story has been modified since the last story run on this environment.</p>
+                    <span class="aui-icon icon-hint"></span></div>
+            </div>
+            <div class="story">
+                <div class="meta">
+                    <div class="keyword">Meta:</div>
+                    <div class="property">@testMetaValue somsdf asfd asdf asdeValue2323</div>
+                </div>
+                <div class="beforeNarrative"><span>&nbsp;</span><span style="display: none;"
+                                                                      class="beforeNarrativeHint">+<span></span></span></div>
+                <div class="narrative">
+                    <div class="label">Narrative:</div>
+                    <div contenteditable="false" class="element inOrderTo">
+                        <div style="display: none;" class="add-icon">+</div>
+                        <span contenteditable="false" class="keyword inOrderTo inOrderToSpan">In order to</span> <span></span></div>
+                    <div class="element asA"><span class="keyword asA">As a</span> development team</div>
+                    <div class="element iWantTo"><span class="keyword iWantTo">I want to</span> use Behaviour-Driven Development</div>
+                </div>
+                <div class="scenario">
+                    <div class="scenario-title"><span class="label">Scenario:</span> <span class="title">my test scenario 1</span></div>
+                    <div class="step successful">Given something</div>
+                    <div class="step successful">When I send the following request:<span class="step parameter"><table>
+                        <thead>
+                        <tr>
+                            <th>action</th>
+                            <th>value</th>
+                            <th>currency</th>
+                        </tr>
+                        </thead>
+                        <tbody>
+                        <tr>
+                            <td>Buy</td>
+                            <td>100</td>
+                            <td>USD</td>
+                        </tr>
+                        <tr>
+                            <td>Sell</td>
+                            <td>20</td>
+                            <td>GBP</td>
+                        </tr>
+                        </tbody>
+                    </table>
+</span></div>
+                    <div class="step successful">Then something should happen</div>
+                </div>
+                <div class="scenario">
+                    <div class="scenario-title"><span class="label">Scenario:</span> <span class="title">sad path</span></div>
+                    <div class="step successful">Given something</div>
+                    <div class="step pending">When I try a step that has not yet been implemented <span
+                            class="keyword pending">(PENDING)</span></div>
+                    <div class="step pending">Then an error should be reported in the test report asadf <span class="keyword pending">(PENDING)</span>
+                    </div>
+                </div>
+            </div>
+        </div>
+        <div id="#storyReportTab1" class="tabs-pane story-report-tab">
+            <div id="storyReportMsgContainer1"></div>
+            <div class="story">
+                <div class="meta">
+                    <div class="keyword">Meta:</div>
+                    <div class="property">@testMetaValue</div>
+                </div>
+                <div class="beforeNarrative"><span>&nbsp;</span><span style="display: none;"
+                                                                      class="beforeNarrativeHint">+<span></span></span></div>
+                <div class="narrative">
+                    <div class="label">Narrative:</div>
+                    <div contenteditable="false" class="element inOrderTo">
+                        <div style="display: none;" class="add-icon">+</div>
+                        <span contenteditable="false" class="keyword inOrderTo inOrderToSpan">In order to</span> <span></span></div>
+                    <div class="element asA"><span class="keyword asA">As a</span> development team</div>
+                    <div class="element iWantTo"><span class="keyword iWantTo">I want to</span> use Behaviour-Driven Development</div>
+                </div>
+                <div class="scenario">
+                    <div class="scenario-title"><span class="label">Scenario:</span> <span class="title">my test scenario 1</span></div>
+                    <div class="step successful">Given something</div>
+                    <div class="step successful">When I send the following request:<span class="step parameter"><table>
+                        <thead>
+                        <tr>
+                            <th>action</th>
+                            <th>value</th>
+                            <th>currency</th>
+                        </tr>
+                        </thead>
+                        <tbody>
+                        <tr>
+                            <td>Buy</td>
+                            <td>100</td>
+                            <td>USD</td>
+                        </tr>
+                        <tr>
+                            <td>Sell</td>
+                            <td>20</td>
+                            <td>GBP</td>
+                        </tr>
+                        </tbody>
+                    </table>
+</span></div>
+                    <div class="step pending">Then something should happen asdf <span class="keyword pending">(PENDING)</span></div>
+                </div>
+                <div class="scenario">
+                    <div class="scenario-title"><span class="label">Scenario:</span> <span class="title">sad path</span></div>
+                    <div class="step successful">Given something</div>
+                    <div class="step pending">When I try a step that has not yet been implemented <span
+                            class="keyword pending">(PENDING)</span></div>
+                    <div class="step pending">Then an error should be reported in the test report asadfa <span class="keyword pending">(PENDING)</span>
+                    </div>
+                </div>
+            </div>
+        </div>
     </div>
 </div>
\ No newline at end of file
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/templates/viewissuepage/story_reports_panel.vm
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/templates/viewissuepage/story_reports_panel.vm	(revision )
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/templates/viewissuepage/story_reports_panel.vm	(revision )
@@ -0,0 +1,4 @@
+$webResourceManager.requireResourcesForContext("com.atlassian.auiplugin:aui-experimental-iconfont")
+$webResourceManager.requireResourcesForContext("execspec-view-issue-page-resources")
+<div id="storyReportsPanel"><!--DEFAULT content--></div>
+
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/3rdparty/codemirror-4.3/addon/hint/show-hint-ORIG.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/3rdparty/codemirror-4.3/addon/hint/show-hint-ORIG.js	(revision )
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/3rdparty/codemirror-4.3/addon/hint/show-hint-ORIG.js	(revision )
@@ -0,0 +1,434 @@
+// CodeMirror, copyright (c) by Marijn Haverbeke and others
+// Distributed under an MIT license: http://codemirror.net/LICENSE
+
+(function (mod) {
+    if (typeof exports == "object" && typeof module == "object") // CommonJS
+        mod(require("../../lib/codemirror"));
+    else if (typeof define == "function" && define.amd) // AMD
+        define(["../../lib/codemirror"], mod);
+    else // Plain browser env
+        mod(CodeMirror);
+})(function (CodeMirror) {
+    "use strict";
+
+    var HINT_ELEMENT_CLASS = "CodeMirror-hint";
+    var ACTIVE_HINT_ELEMENT_CLASS = "CodeMirror-hint-active";
+
+    // This is the old interface, kept around for now to stay
+    // backwards-compatible.
+    CodeMirror.showHint = function (cm, getHints, options) {
+        if (!getHints) return cm.showHint(options);
+        if (options && options.async) getHints.async = true;
+        var newOpts = {hint: getHints};
+        if (options) for (var prop in options) newOpts[prop] = options[prop];
+        return cm.showHint(newOpts);
+    };
+
+    CodeMirror.defineExtension("showHint", function (options) {
+        // We want a single cursor position.
+        if (this.listSelections().length > 1 || this.somethingSelected()) return;
+
+        if (this.state.completionActive) this.state.completionActive.close();
+        var completion = this.state.completionActive = new Completion(this, options);
+        var getHints = completion.options.hint;
+        if (!getHints) return;
+
+        CodeMirror.signal(this, "startCompletion", this);
+        if (getHints.async)
+            getHints(this, function (hints) {
+                completion.showHints(hints);
+            }, completion.options);
+        else
+            return completion.showHints(getHints(this, completion.options));
+    });
+
+    function Completion(cm, options) {
+        this.cm = cm;
+        this.options = this.buildOptions(options);
+        this.widget = this.onClose = null;
+    }
+
+    Completion.prototype = {
+        close: function () {
+            if (!this.active()) return;
+            this.cm.state.completionActive = null;
+
+            if (this.widget) this.widget.close();
+            if (this.onClose) this.onClose();
+            CodeMirror.signal(this.cm, "endCompletion", this.cm);
+        },
+
+        active: function () {
+            return this.cm.state.completionActive == this;
+        },
+
+        pick: function (data, i) {
+            var completion = data.list[i];
+            if (completion.hint) completion.hint(this.cm, data, completion);
+            else this.cm.replaceRange(getText(completion), completion.from || data.from,
+                completion.to || data.to, "complete");
+            CodeMirror.signal(data, "pick", completion);
+            this.close();
+        },
+
+        showHints: function (data) {
+            if (!data || !data.list.length || !this.active()) return this.close();
+
+            if (this.options.completeSingle && data.list.length == 1)
+                this.pick(data, 0);
+            else
+                this.showWidget(data);
+        },
+
+        showWidget: function (data) {
+            this.widget = new Widget(this, data);
+            CodeMirror.signal(data, "shown");
+
+            var debounce = 0, completion = this, finished;
+            var closeOn = this.options.closeCharacters;
+            var startPos = this.cm.getCursor(), startLen = this.cm.getLine(startPos.line).length;
+
+            var requestAnimationFrame = window.requestAnimationFrame || function (fn) {
+                return setTimeout(fn, 1000 / 60);
+            };
+            var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;
+
+            function done() {
+                if (finished) return;
+                finished = true;
+                completion.close();
+                completion.cm.off("cursorActivity", activity);
+                if (data) CodeMirror.signal(data, "close");
+            }
+
+            function update() {
+                if (finished) return;
+                CodeMirror.signal(data, "update");
+                var getHints = completion.options.hint;
+                if (getHints.async)
+                    getHints(completion.cm, finishUpdate, completion.options);
+                else
+                    finishUpdate(getHints(completion.cm, completion.options));
+            }
+
+            function finishUpdate(data_) {
+                data = data_;
+                if (finished) return;
+                if (!data || !data.list.length) return done();
+                if (completion.widget) completion.widget.close();
+                completion.widget = new Widget(completion, data);
+            }
+
+            function clearDebounce() {
+                if (debounce) {
+                    cancelAnimationFrame(debounce);
+                    debounce = 0;
+                }
+            }
+
+            function activity() {
+                clearDebounce();
+                var pos = completion.cm.getCursor(), line = completion.cm.getLine(pos.line);
+                if (pos.line != startPos.line || line.length - pos.ch != startLen - startPos.ch ||
+                    pos.ch < startPos.ch || completion.cm.somethingSelected() ||
+                    (pos.ch && closeOn.test(line.charAt(pos.ch - 1)))) {
+                    completion.close();
+                } else {
+                    debounce = requestAnimationFrame(update);
+                    if (completion.widget) completion.widget.close();
+                }
+            }
+
+            this.cm.on("cursorActivity", activity);
+            this.onClose = done;
+        },
+
+        buildOptions: function (options) {
+            var editor = this.cm.options.hintOptions;
+            var out = {};
+            for (var prop in defaultOptions) out[prop] = defaultOptions[prop];
+            if (editor) for (var prop in editor)
+                if (editor[prop] !== undefined) out[prop] = editor[prop];
+            if (options) for (var prop in options)
+                if (options[prop] !== undefined) out[prop] = options[prop];
+            return out;
+        }
+    };
+
+    function getText(completion) {
+        if (typeof completion == "string") return completion;
+        else return completion.text;
+    }
+
+    function buildKeyMap(completion, handle) {
+        var baseMap = {
+            Up: function () {
+                handle.moveFocus(-1);
+            },
+            Down: function () {
+                handle.moveFocus(1);
+            },
+            PageUp: function () {
+                handle.moveFocus(-handle.menuSize() + 1, true);
+            },
+            PageDown: function () {
+                handle.moveFocus(handle.menuSize() - 1, true);
+            },
+            Home: function () {
+                handle.setFocus(0);
+            },
+            End: function () {
+                handle.setFocus(handle.length - 1);
+            },
+            Enter: handle.pick,
+            Tab: handle.pick,
+            Esc: handle.close
+        };
+        var custom = completion.options.customKeys;
+        var ourMap = custom ? {} : baseMap;
+
+        function addBinding(key, val) {
+            var bound;
+            if (typeof val != "string")
+                bound = function (cm) {
+                    return val(cm, handle);
+                };
+            // This mechanism is deprecated
+            else if (baseMap.hasOwnProperty(val))
+                bound = baseMap[val];
+            else
+                bound = val;
+            ourMap[key] = bound;
+        }
+
+        if (custom)
+            for (var key in custom) if (custom.hasOwnProperty(key))
+                addBinding(key, custom[key]);
+        var extra = completion.options.extraKeys;
+        if (extra)
+            for (var key in extra) if (extra.hasOwnProperty(key))
+                addBinding(key, extra[key]);
+        return ourMap;
+    }
+
+    function getHintElement(hintsElement, el) {
+        while (el && el != hintsElement) {
+            if (el.nodeName.toUpperCase() === "LI" && el.parentNode == hintsElement) return el;
+            el = el.parentNode;
+        }
+    }
+
+    function Widget(completion, data) {
+
+        console.log("### in Widget");
+
+        this.completion = completion;
+        this.data = data;
+        var widget = this, cm = completion.cm;
+
+        var hints = this.hints = document.createElement("ul");
+        hints.className = "CodeMirror-hints";
+        this.selectedHint = data.selectedHint || 0;
+
+        var completions = data.list;
+        for (var i = 0; i < completions.length; ++i) {
+            var elt = hints.appendChild(document.createElement("li")), cur = completions[i];
+            var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? "" : " " + ACTIVE_HINT_ELEMENT_CLASS);
+            if (cur.className != null) className = cur.className + " " + className;
+            elt.className = className;
+            if (cur.render) cur.render(elt, data, cur);
+            else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));
+            elt.hintId = i;
+        }
+
+        var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);
+        var left = pos.left, top = pos.bottom, below = true;
+        hints.style.left = left + "px";
+        hints.style.top = top + "px";
+        // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.
+        var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);
+        var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);
+        (completion.options.container || document.body).appendChild(hints);
+        var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;
+        if (overlapY > 0) {
+            var height = box.bottom - box.top, curTop = box.top - (pos.bottom - pos.top);
+            if (curTop - height > 0) { // Fits above cursor
+                hints.style.top = (top = curTop - height) + "px";
+                below = false;
+            } else if (height > winH) {
+                hints.style.height = (winH - 5) + "px";
+                hints.style.top = (top = pos.bottom - box.top) + "px";
+                var cursor = cm.getCursor();
+                if (data.from.ch != cursor.ch) {
+                    pos = cm.cursorCoords(cursor);
+                    hints.style.left = (left = pos.left) + "px";
+                    box = hints.getBoundingClientRect();
+                }
+            }
+        }
+        var overlapX = box.left - winW;
+        if (overlapX > 0) {
+            if (box.right - box.left > winW) {
+                hints.style.width = (winW - 5) + "px";
+                overlapX -= (box.right - box.left) - winW;
+            }
+            hints.style.left = (left = pos.left - overlapX) + "px";
+        }
+
+        cm.addKeyMap(this.keyMap = buildKeyMap(completion, {
+            moveFocus: function (n, avoidWrap) {
+                widget.changeActive(widget.selectedHint + n, avoidWrap);
+            },
+            setFocus: function (n) {
+                widget.changeActive(n);
+            },
+            menuSize: function () {
+                return widget.screenAmount();
+            },
+            length: completions.length,
+            close: function () {
+                completion.close();
+            },
+            pick: function () {
+                widget.pick();
+            },
+            data: data
+        }));
+
+        if (completion.options.closeOnUnfocus) {
+            var closingOnBlur;
+            cm.on("blur", this.onBlur = function () {
+                closingOnBlur = setTimeout(function () {
+                    completion.close();
+                }, 100);
+            });
+            cm.on("focus", this.onFocus = function () {
+                clearTimeout(closingOnBlur);
+            });
+        }
+
+        var startScroll = cm.getScrollInfo();
+        cm.on("scroll", this.onScroll = function () {
+            var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();
+            var newTop = top + startScroll.top - curScroll.top;
+            var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);
+            if (!below) point += hints.offsetHeight;
+            if (point <= editor.top || point >= editor.bottom) return completion.close();
+            hints.style.top = newTop + "px";
+            hints.style.left = (left + startScroll.left - curScroll.left) + "px";
+        });
+
+        CodeMirror.on(hints, "dblclick", function (e) {
+            var t = getHintElement(hints, e.target || e.srcElement);
+            if (t && t.hintId != null) {
+                widget.changeActive(t.hintId);
+                widget.pick();
+            }
+        });
+
+        CodeMirror.on(hints, "click", function (e) {
+            var t = getHintElement(hints, e.target || e.srcElement);
+            if (t && t.hintId != null) {
+                widget.changeActive(t.hintId);
+                if (completion.options.completeOnSingleClick) widget.pick();
+            }
+        });
+
+        CodeMirror.on(hints, "mousedown", function () {
+            setTimeout(function () {
+                cm.focus();
+            }, 20);
+        });
+
+        CodeMirror.signal(data, "select", completions[0], hints.firstChild);
+        return true;
+    }
+
+    Widget.prototype = {
+        close: function () {
+            if (this.completion.widget != this) return;
+            this.completion.widget = null;
+            this.hints.parentNode.removeChild(this.hints);
+            this.completion.cm.removeKeyMap(this.keyMap);
+
+            var cm = this.completion.cm;
+            if (this.completion.options.closeOnUnfocus) {
+                cm.off("blur", this.onBlur);
+                cm.off("focus", this.onFocus);
+            }
+            cm.off("scroll", this.onScroll);
+        },
+
+        pick: function () {
+            this.completion.pick(this.data, this.selectedHint);
+        },
+
+        changeActive: function (i, avoidWrap) {
+            console.log("### avoidWrap - " + avoidWrap);
+            if (i >= this.data.list.length)
+                i = avoidWrap ? this.data.list.length - 1 : 0;
+            else if (i < 0)
+                i = avoidWrap ? 0 : this.data.list.length - 1;
+            if (this.selectedHint == i) return;
+            var node = this.hints.childNodes[this.selectedHint];
+            node.className = node.className.replace(" " + ACTIVE_HINT_ELEMENT_CLASS, "");
+            node = this.hints.childNodes[this.selectedHint = i];
+            node.className += " " + ACTIVE_HINT_ELEMENT_CLASS;
+            if (node.offsetTop < this.hints.scrollTop)
+                this.hints.scrollTop = node.offsetTop - 3;
+            else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)
+                this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;
+            CodeMirror.signal(this.data, "select", this.data.list[this.selectedHint], node);
+        },
+
+        screenAmount: function () {
+            return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;
+        }
+    };
+
+    CodeMirror.registerHelper("hint", "auto", function (cm, options) {
+        var helpers = cm.getHelpers(cm.getCursor(), "hint"), words;
+        if (helpers.length) {
+            for (var i = 0; i < helpers.length; i++) {
+                var cur = helpers[i](cm, options);
+                if (cur && cur.list.length) return cur;
+            }
+        } else if (words = cm.getHelper(cm.getCursor(), "hintWords")) {
+            if (words) return CodeMirror.hint.fromList(cm, {words: words});
+        } else if (CodeMirror.hint.anyword) {
+            return CodeMirror.hint.anyword(cm, options);
+        }
+    });
+
+    CodeMirror.registerHelper("hint", "fromList", function (cm, options) {
+        var cur = cm.getCursor(), token = cm.getTokenAt(cur);
+        var found = [];
+        for (var i = 0; i < options.words.length; i++) {
+            var word = options.words[i];
+            if (word.slice(0, token.string.length) == token.string)
+                found.push(word);
+        }
+
+        if (found.length) return {
+            list: found,
+            from: CodeMirror.Pos(cur.line, token.start),
+            to: CodeMirror.Pos(cur.line, token.end)
+        };
+    });
+
+    CodeMirror.commands.autocomplete = CodeMirror.showHint;
+
+    var defaultOptions = {
+        hint: CodeMirror.hint.auto,
+        completeSingle: true,
+        alignWithWord: true,
+        closeCharacters: /[\s()\[\]{};:>,]/,
+        closeOnUnfocus: true,
+        completeOnSingleClick: false,
+        container: null,
+        customKeys: null,
+        extraKeys: null
+    };
+
+    CodeMirror.defineOption("hintOptions", null);
+});
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/TemplatesEditStoryRich.soy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/TemplatesEditStoryRich.soy	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/TemplatesEditStoryRich.soy	(revision )
@@ -1,85 +1,6 @@
 {namespace execspec.viewissuepage.editstory.rich}
 
 /**
- * Renders story edit buttons.
- */
-{template .renderRichEditorOperationButtons}
-//    <div class="aui-toolbar2-inner">
-//        <div class="aui-toolbar2-primary">
-//            <div id="editorTypeButtons" class="aui-buttons">
-//                <button id="richTextEditorButton" class="aui-button"
-//                    onclick="editButtonHandler.richTextEditorClicked(event)">
-//                    <b>Rich</b>
-//                </button>
-//                <button id="rawTextEditorButton" class="aui-button"
-//                    onclick="editButtonHandler.rawTextEditorClicked(event)">
-//                    <b>Text</b>
-//                </button>
-//            </div>
-//            <div id="editOperationsButtons" class="aui-buttons">
-//                <button id="insertTableButton" class="aui-button">
-//                    <span class="aui-icon aui-icon-small aui-iconfont-appswitcher">Table Parameter</span>
-//                </button>
-//                <button id="insertTableButton" class="aui-button">
-//                    <span class="aui-icon aui-icon-small aui-iconfont-arrows-left">Table Parameter</span>
-//                </button>
-
-//            </div>
-//        </div>
-//    </div>
-{/template}
-
-/**
- * Renders the '+' insert icon link to add story elements.
- * @param triggerDivId
- * @param dropdownDivId
- * @param dropdownItems
- * @param additionalParams
- */
-{template .renderInsertLinkDiv}
-    {let $addIconClass: 'aui-icon aui-icon-small aui-iconfont-add' /}
-    <div class="insert-element-link-div">
-        &nbsp;
-        <a aria-controls="dropdown2-more" href="#{$dropdownDivId}" aria-owns="{$dropdownDivId}"
-            aria-haspopup="true"
-            class="aui-dropdown2-trigger aui-style-default aui-dropdown2-trigger-arrowless insert-element-link"
-            style="display: none"
-            pressed="false">
-            <span class="{$addIconClass} insert-element-icon"></span>
-        </a>
-        <div id="{$dropdownDivId}" trigger-div-id="{$triggerDivId}"
-            class="aui-dropdown2 aui-style-default insert-dropdown-content"
-            aria-hidden="true" data-dropdown2-alignment="left"
-            style="left: 280.6px; top: 801.3px; display: none;">
-            <ul class="aui-list-truncate">
-                {foreach $item in $dropdownItems}
-                    <li><a href="#"
-                        onclick="editButtonHandler.{$item.onClickFunction}(event, '{$item.elementName}'
-                        {if $additionalParams != null}
-                            {foreach $param in $additionalParams}
-                                , '{$param}'
-                            {/foreach}
-                        {/if}
-                        )">{$item.text}</a></li>
-                {/foreach}
-//                <li class="concrete-given-step hidden">
-//                    <a href="http://example.com/">
-//                        Long Comment, asfasfasdfasfa fas fas fasdfa sfa sfd asdf as fdasfasdfasdfas fdasdfasdf
-//                    </a>
-//                </li>
-//                <li class="concrete-given-step hidden">
-//                    <a href="http://example.com/">Concrete step</a>
-//                </li>
-            </ul>
-        </div>
-        <div class="step-auto-complete-container"
-//            style="left: 280.6px; top: 801.3px; display: none;"
-        >
-        </div>
-    </div>
-{/template}
-
-/**
  * Render the step filter
  */
 {template .renderStepFilterElement}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/ao/story/Story.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/ao/story/Story.java	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/ao/story/Story.java	(revision )
@@ -5,6 +5,9 @@
 import net.java.ao.OneToMany;
 import net.java.ao.Preload;
 
+/**
+ * TODO - renae this class to be different to JBehave's Story class, e.g. JiraStory
+ */
 @Preload
 public interface Story extends Entity {
 
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/Temp.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/Temp.java	(date 1405964957000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/Temp.java	(date 1405964957000)
@@ -1,464 +0,0 @@
-package com.mycomp.execspec;
-
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.Transformer;
-import org.apache.commons.lang.ArrayUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.builder.ToStringBuilder;
-import org.apache.commons.lang.builder.ToStringStyle;
-import org.jbehave.core.configuration.Keywords;
-import org.jbehave.core.failures.KnownFailure;
-import org.jbehave.core.failures.UUIDExceptionWrapper;
-import org.jbehave.core.model.*;
-import org.jbehave.core.reporters.StackTraceFormatter;
-import org.jbehave.core.reporters.StoryReporter;
-
-import java.io.ByteArrayOutputStream;
-import java.io.OutputStream;
-import java.io.PrintStream;
-import java.text.MessageFormat;
-import java.text.SimpleDateFormat;
-import java.util.*;
-
-import static org.apache.commons.lang.StringEscapeUtils.escapeHtml;
-import static org.apache.commons.lang.StringEscapeUtils.escapeXml;
-import static org.apache.commons.lang.StringUtils.substringBetween;
-import static org.jbehave.core.steps.StepCreator.*;
-
-/**
- * Created by Dmytro on 4/16/2014.
- */
-
-/**
- * <p>
- * Abstract story reporter that outputs to a PrintStream.
- * </p>
- * <p>
- * The output of the reported event is configurable via:
- * <ul>
- * <li>custom output patterns, providing only the patterns that differ from
- * default</li>
- * <li>keywords localised for different languages, providing the i18n Locale</li>
- * <li>flag to report failure trace</li>
- * </ul>
- * </p>
- * <p>
- * Let's look at example of providing custom output patterns, e.g. for the
- * failed event. <br/>
- * we'd need to provide the custom pattern, say we want to have something like
- * "(step being executed) <<< FAILED", keyed on the method name:
- * <p/>
- * <pre>
- * Properties patterns = new Properties();
- * patterns.setProperty(&quot;failed&quot;, &quot;{0} &lt;&lt;&lt; {1}&quot;);
- * </pre>
- * <p/>
- * The pattern is by default processed and formatted by the
- * {@link java.text.MessageFormat}. Both the
- * {@link #format(String key, String defaultPattern, Object... args)} and
- * {@link #lookupPattern(String key, String defaultPattern)} methods are
- * override-able and a different formatter or pattern lookup can be used by
- * subclasses.
- * </p>
- * <p>
- * If the keyword "FAILED" (or any other keyword used by the reporter) needs to
- * be expressed in a different language, all we need to do is to provide an
- * instance of {@link org.jbehave.core.i18n.LocalizedKeywords} using the
- * appropriate {@link java.util.Locale}, e.g.
- * <p/>
- * <pre>
- * Keywords keywords = new LocalizedKeywords(new Locale(&quot;it&quot;));
- * </pre>
- * <p/>
- * </p>
- */
-
-public abstract class Temp implements StoryReporter {
-
-    private static final String EMPTY = "";
-
-    public enum Format {
-        TXT, HTML, XML
-    }
-
-    private final Format format;
-    private final PrintStream output;
-    private final Properties outputPatterns;
-    private final Keywords keywords;
-    private ThreadLocal<Boolean> reportFailureTrace = new ThreadLocal<Boolean>();
-    private ThreadLocal<Boolean> compressFailureTrace = new ThreadLocal<Boolean>();
-    private ThreadLocal<Throwable> cause = new ThreadLocal<Throwable>();
-
-    protected Temp(Format format, PrintStream output, Properties outputPatterns, Keywords keywords,
-                   boolean reportFailureTrace, boolean compressFailureTrace) {
-        this.format = format;
-        this.output = output;
-        this.outputPatterns = outputPatterns;
-        this.keywords = keywords;
-        doReportFailureTrace(reportFailureTrace);
-        doCompressFailureTrace(compressFailureTrace);
-    }
-
-    public void beforeStep(String step) {
-    }
-
-    public void successful(String step) {
-        print(format("successful", "{0}\n", step));
-    }
-
-    public void ignorable(String step) {
-        print(format("ignorable", "{0}\n", step));
-    }
-
-    public void pending(String step) {
-        print(format("pending", "{0} ({1})\n", step, keywords.pending()));
-    }
-
-    public void notPerformed(String step) {
-        print(format("notPerformed", "{0} ({1})\n", step, keywords.notPerformed()));
-    }
-
-    public void failed(String step, Throwable storyFailure) {
-        // storyFailure be used if a subclass has rewritten the "failed" pattern
-        // to have a {3} as WebDriverHtmlOutput (jbehave-web) does.
-        if (storyFailure instanceof UUIDExceptionWrapper) {
-            this.cause.set(storyFailure.getCause());
-            print(format("failed", "{0} ({1})\n({2})\n", step, keywords.failed(), storyFailure.getCause(),
-                    ((UUIDExceptionWrapper) storyFailure).getUUID()));
-        } else {
-            throw new ClassCastException(storyFailure + " should be an instance of UUIDExceptionWrapper");
-        }
-    }
-
-    public void failedOutcomes(String step, OutcomesTable table) {
-        failed(step, table.failureCause());
-        print(table);
-    }
-
-    private void print(OutcomesTable table) {
-        print(format("outcomesTableStart", "\n"));
-        List<OutcomesTable.Outcome<?>> rows = table.getOutcomes();
-        print(format("outcomesTableHeadStart", "|"));
-        for (String field : table.getOutcomeFields()) {
-            print(format("outcomesTableHeadCell", "{0}|", field));
-        }
-        print(format("outcomesTableHeadEnd", "\n"));
-        print(format("outcomesTableBodyStart", EMPTY));
-        for (OutcomesTable.Outcome<?> outcome : rows) {
-            print(format("outcomesTableRowStart", "|", outcome.isVerified() ? "verified" : "notVerified"));
-            print(format("outcomesTableCell", "{0}|", outcome.getDescription()));
-            print(format("outcomesTableCell", "{0}|", renderOutcomeValue(outcome.getValue(), table.getDateFormat())));
-            print(format("outcomesTableCell", "{0}|", outcome.getMatcher()));
-            print(format("outcomesTableCell", "{0}|", (outcome.isVerified() ? keywords.yes() : keywords.no())));
-            print(format("outcomesTableRowEnd", "\n"));
-        }
-        print(format("outcomesTableBodyEnd", "\n"));
-        print(format("outcomesTableEnd", "\n"));
-    }
-
-    private Object renderOutcomeValue(Object value, String dateFormat) {
-        if (value instanceof Date) {
-            return new SimpleDateFormat(dateFormat).format(value);
-        } else {
-            return value;
-        }
-    }
-
-    public void storyNotAllowed(Story story, String filter) {
-        print(format("filter", "{0}\n", filter));
-    }
-
-    public void storyCancelled(Story story, StoryDuration storyDuration) {
-        print(format("storyCancelled", "{0}: {1} ({2} s)\n", keywords.storyCancelled(), keywords.duration(),
-                storyDuration.getDurationInSecs()));
-    }
-
-    public void beforeStory(Story story, boolean givenStory) {
-        print(format("beforeStory", "{0}\n({1})\n", story.getDescription().asString(), story.getPath()));
-        if (!story.getMeta().isEmpty()) {
-            Meta meta = story.getMeta();
-            print(meta);
-        }
-    }
-
-    public void narrative(Narrative narrative) {
-        if (!narrative.isEmpty()) {
-            if (!narrative.isAlternative()) {
-                print(format("narrative", "{0}\n{1} {2}\n{3} {4}\n{5} {6}\n", keywords.narrative(),
-                        keywords.inOrderTo(), narrative.inOrderTo(), keywords.asA(), narrative.asA(),
-                        keywords.iWantTo(), narrative.iWantTo()));
-            } else {
-                print(format("narrative", "{0}\n{1} {2}\n{3} {4}\n{5} {6}\n", keywords.narrative(), keywords.asA(),
-                        narrative.asA(), keywords.iWantTo(), narrative.iWantTo(), keywords.soThat(), narrative.soThat()));
-            }
-        }
-    }
-
-    public void lifecyle(Lifecycle lifecycle) {
-        if (!lifecycle.isEmpty()) {
-            print(format("lifecycleStart", "{0}\n", keywords.lifecycle()));
-            if (!lifecycle.getBeforeSteps().isEmpty()) {
-                print(format("lifecycleBeforeStart", "{0}\n", keywords.before()));
-                print(lifecycle.getBeforeSteps());
-                print(format("lifecycleBeforeEnd", ""));
-            }
-            if (!lifecycle.getAfterSteps().isEmpty()) {
-                print(format("lifecycleAfterStart", "{0}\n", keywords.after()));
-                print(lifecycle.getAfterSteps());
-                print(format("lifecycleAfterEnd", ""));
-            }
-            print(format("lifecycleEnd", "\n"));
-        }
-    }
-
-    private void print(List<String> steps) {
-        for (String step : steps) {
-            print(format("lifecycleStep", "{0}\n", step));
-        }
-    }
-
-    private void print(Meta meta) {
-        print(format("metaStart", "{0}\n", keywords.meta()));
-        for (String name : meta.getPropertyNames()) {
-            print(format("metaProperty", "{0}{1} {2}", keywords.metaProperty(), name, meta.getProperty(name)));
-        }
-        print(format("metaEnd", "\n"));
-    }
-
-    public void afterStory(boolean givenStory) {
-        print(format("afterStory", "\n"));
-        // take care not to close System.out
-        // which is used for ConsoleOutput
-        if (!givenStory && output != System.out) {
-            output.close();
-        }
-    }
-
-    public void givenStories(GivenStories givenStories) {
-        print(format("givenStoriesStart", "{0}\n", keywords.givenStories()));
-        for (GivenStory givenStory : givenStories.getStories()) {
-            print(format("givenStory", "{0} {1}\n", givenStory.asString(),
-                    (givenStory.hasAnchor() ? givenStory.getParameters() : "")));
-        }
-        print(format("givenStoriesEnd", "\n"));
-    }
-
-    public void givenStories(List<String> storyPaths) {
-        givenStories(new GivenStories(StringUtils.join(storyPaths, ",")));
-    }
-
-    public void scenarioNotAllowed(Scenario scenario, String filter) {
-        print(format("filter", "{0}\n", filter));
-    }
-
-    public void beforeScenario(String title) {
-        cause.set(null);
-        print(format("beforeScenario", "{0} {1}\n", keywords.scenario(), title));
-    }
-
-    public void scenarioMeta(Meta meta) {
-        if (!meta.isEmpty()) {
-            print(meta);
-        }
-    }
-
-    public void afterScenario() {
-        if (cause.get() != null && !(cause.get() instanceof KnownFailure) && reportFailureTrace()) {
-            print(format("afterScenarioWithFailure", "\n{0}\n",
-                    new StackTraceFormatter(compressFailureTrace()).stackTrace(cause.get())));
-        } else {
-            print(format("afterScenario", "\n"));
-        }
-    }
-
-    public void beforeExamples(List<String> steps, ExamplesTable table) {
-        print(format("beforeExamples", "{0}\n", keywords.examplesTable()));
-        for (String step : steps) {
-            print(format("examplesStep", "{0}\n", step));
-        }
-        print(formatTable(table));
-    }
-
-    public void example(Map<String, String> tableRow) {
-        print(format("example", "\n{0} {1}\n", keywords.examplesTableRow(), tableRow));
-    }
-
-    public void afterExamples() {
-        print(format("afterExamples", "\n"));
-    }
-
-    public void dryRun() {
-        print(format("dryRun", "{0}\n", keywords.dryRun()));
-    }
-
-    public void pendingMethods(List<String> methods) {
-        for (String method : methods) {
-            print(format("pendingMethod", "{0}\n", method));
-        }
-    }
-
-    public void restarted(String step, Throwable cause) {
-        print(format("restarted", "{0} {1}\n", step, cause.getMessage()));
-    }
-
-    /**
-     * Formats event output by key, usually equal to the method name.
-     *
-     * @param key            the event key
-     * @param defaultPattern the default pattern to return if a custom pattern
-     *                       is not found
-     * @param args           the args used to format output
-     * @return A formatted event output
-     */
-    protected String format(String key, String defaultPattern, Object... args) {
-        String escape = escape(defaultPattern);
-        String s = lookupPattern(key, escape);
-        Object[] objects = escapeAll(args);
-        return MessageFormat.format(s, objects);
-    }
-
-    protected String formatTable(ExamplesTable table) {
-        OutputStream formatted = new ByteArrayOutputStream();
-        PrintStream out = new PrintStream(formatted);
-        out.print(format("examplesTableStart", "\n"));
-        List<Map<String, String>> rows = table.getRows();
-        List<String> headers = table.getHeaders();
-        out.print(format("examplesTableHeadStart", "|"));
-        for (String header : headers) {
-            out.print(format("examplesTableHeadCell", "{0}|", header));
-        }
-        out.print(format("examplesTableHeadEnd", "\n"));
-        out.print(format("examplesTableBodyStart", EMPTY));
-        for (Map<String, String> row : rows) {
-            out.print(format("examplesTableRowStart", "|"));
-            for (String header : headers) {
-                out.print(format("examplesTableCell", "{0}|", row.get(header)));
-            }
-            out.print(format("examplesTableRowEnd", "\n"));
-        }
-        out.print(format("examplesTableBodyEnd", ""));
-        out.print(format("examplesTableEnd", ""));
-        return formatted.toString();
-    }
-
-    private String escape(String defaultPattern) {
-        return (String) escapeAll(defaultPattern)[0];
-    }
-
-    private Object[] escapeAll(Object... args) {
-        return escape(format, args);
-    }
-
-    /**
-     * Escapes args' string values according to format
-     *
-     * @param format the Format used by the PrintStream
-     * @param args   the array of args to escape
-     * @return The cloned and escaped array of args
-     */
-    protected Object[] escape(final Format format, Object... args) {
-        // Transformer that escapes HTML and XML strings
-        Transformer escapingTransformer = new Transformer() {
-            public Object transform(Object object) {
-                switch (format) {
-                    case HTML:
-                        return escapeHtml(asString(object));
-                    case XML:
-                        return escapeXml(asString(object));
-                    default:
-                        return object;
-                }
-            }
-
-            private String asString(Object object) {
-                return (object != null ? object.toString() : EMPTY);
-            }
-        };
-        List<?> list = Arrays.asList(ArrayUtils.clone(args));
-        CollectionUtils.transform(list, escapingTransformer);
-        return list.toArray();
-    }
-
-    /**
-     * Looks up the format pattern for the event output by key, conventionally
-     * equal to the method name. The pattern is used by the
-     * {#format(String,String,Object...)} method and by default is formatted
-     * using the {@link MessageFormat#format(String, Object...)} method. If no
-     * pattern is found for key or needs to be overridden, the default pattern
-     * should be returned.
-     *
-     * @param key            the format pattern key
-     * @param defaultPattern the default pattern if no pattern is
-     * @return The format patter for the given key
-     */
-    protected String lookupPattern(String key, String defaultPattern) {
-        if (outputPatterns.containsKey(key)) {
-            return outputPatterns.getProperty(key);
-        }
-        return defaultPattern;
-    }
-
-    public boolean reportFailureTrace() {
-        Boolean reportFailure = reportFailureTrace.get();
-        if (reportFailure != null) {
-            return reportFailure;
-        }
-        return false;
-    }
-
-    public Temp doReportFailureTrace(boolean reportFailureTrace) {
-        this.reportFailureTrace.set(reportFailureTrace);
-        return this;
-    }
-
-    public boolean compressFailureTrace() {
-        return compressFailureTrace.get();
-    }
-
-    public Temp doCompressFailureTrace(boolean compressFailureTrace) {
-        this.compressFailureTrace.set(compressFailureTrace);
-        return this;
-    }
-
-    protected void overwritePattern(String key, String pattern) {
-        outputPatterns.put(key, pattern);
-    }
-
-    /**
-     * Prints text to output stream, replacing parameter start and end
-     * placeholders
-     *
-     * @param text the String to print
-     */
-    protected void print(String text) {
-        if (containsTable(text)) {
-            String tableStart = format(PARAMETER_TABLE_START, PARAMETER_TABLE_START);
-            String tableEnd = format(PARAMETER_TABLE_END, PARAMETER_TABLE_END);
-            String tableAsString = substringBetween(text, tableStart, tableEnd);
-            output.print(text
-                    .replace(tableAsString, formatTable(new ExamplesTable(tableAsString)))
-                    .replace(tableStart, format("parameterValueStart", EMPTY))
-                    .replace(tableEnd, format("parameterValueEnd", EMPTY))
-                    .replace(format(PARAMETER_VALUE_NEWLINE, PARAMETER_VALUE_NEWLINE),
-                            format("parameterValueNewline", "\n")));
-        } else {
-            output.print(text
-                    .replace(format(PARAMETER_VALUE_START, PARAMETER_VALUE_START), format("parameterValueStart", EMPTY))
-                    .replace(format(PARAMETER_VALUE_END, PARAMETER_VALUE_END), format("parameterValueEnd", EMPTY))
-                    .replace(format(PARAMETER_VALUE_NEWLINE, PARAMETER_VALUE_NEWLINE),
-                            format("parameterValueNewline", "\n")));
-        }
-    }
-
-    private boolean containsTable(String text) {
-        String tableStart = format(PARAMETER_TABLE_START, PARAMETER_TABLE_START);
-        String tableEnd = format(PARAMETER_TABLE_END, PARAMETER_TABLE_END);
-        return text.contains(tableStart) && text.contains(tableEnd);
-    }
-
-    @Override
-    public String toString() {
-        return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE).append(format).append(output).toString();
-    }
-
-}
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraHtmlOutput.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraHtmlOutput.java	(date 1405964957000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraHtmlOutput.java	(revision )
@@ -10,7 +10,6 @@
 import org.apache.commons.lang.Validate;
 import org.jbehave.core.configuration.Keywords;
 import org.jbehave.core.i18n.LocalizedKeywords;
-import org.jbehave.core.model.Meta;
 import org.jbehave.core.model.Narrative;
 import org.jbehave.core.model.Scenario;
 import org.jbehave.core.model.Story;
@@ -19,6 +18,8 @@
 
 import javax.ws.rs.core.MediaType;
 import java.util.Properties;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 /**
  * Created by Dmytro on 4/15/2014.
@@ -28,20 +29,29 @@
     private final BytesListPrintStream printStream;
 
     private String environment;
+
     private String jiraBaseUrl;
+
     private String jiraProject;
+
     private String addTestReportPath = "rest/story-res/1.0/story-test/add-for-path";
 
     private String storyPath;
+
     private Long jiraVersion;
 
     private TestStatus status;
 
     private int totalScenarios;
+
     private int totalScenariosPassed;
+
     private int totalScenariosFailed;
+
     private int totalScenariosPending;
+
     private int totalScenariosIgnored;
+
     private int totalScenariosNotPerformed;
 
     private TestStatus currentScenarioStatus;
@@ -156,27 +166,23 @@
         this.status = TestStatus.PASSED; // assume passed at start, and then change to other if failed/pending, etc.
 
         storyPath = story.getPath();
+
         if (!givenStory && !storyPath.equals("BeforeStories") && !storyPath.equals("AfterStories")) {
-            String versionProperty = story.getMeta().getProperty("jira-version");
-            if (versionProperty.isEmpty()) {
-                String msg = "!!! meta property 'jira-version' was not set on the story - " + storyPath;
-                System.out.println(msg + storyPath);
-                throw new IllegalArgumentException(msg);
+            // extract version
+            String regexPattern = "(.*)\\.([0-9]*)(\\.story)";
+            Pattern p = Pattern.compile(regexPattern);
+            Matcher matcher = p.matcher(storyPath);
+            if (matcher.matches()) {
+                String versionStr = matcher.group(2);
+                jiraVersion = Long.parseLong(versionStr);
+            } else {
+                throw new IllegalArgumentException("Story path must match pattern - " + regexPattern);
             }
-            jiraVersion = Long.parseLong(versionProperty);
         }
 
-        // instead of calling the superclass's method we put the lines from it here
-        // so that we can remove our "technical" jira-version meta field which we used above
-        Meta meta = story.getMeta();
-        if (!meta.isEmpty() && !(meta.getPropertyNames().size() == 1 && meta.hasProperty("jira-version"))) {
-            super.beforeStory(story, givenStory);
+        super.beforeStory(story, givenStory);
-        } else {
-            print(format("beforeStory", "{0}\n({1})\n", story.getDescription().asString(), story.getPath()));
-        }
+    }
 
-    }
-
     @Override
     public void afterStory(boolean givenStory) {
 
@@ -215,10 +221,21 @@
         storyHtmlReportDTO.setTotalScenariosSkipped(totalScenariosIgnored);
         storyHtmlReportDTO.setTotalScenariosNotPerformed(totalScenariosNotPerformed);
 
+        // remove the version part from story path
+        // extract version
+        String regexPattern = "(.*)\\.([0-9]*)(\\.story)";
+        Pattern p = Pattern.compile(regexPattern);
+        Matcher matcher = p.matcher(storyPath);
+        if (matcher.matches()) {
+            storyPath = matcher.group(1) + matcher.group(3);;
+        } else {
+            throw new IllegalArgumentException("Story path must match pattern - " + regexPattern);
+        }
+
         String loginParams = "?os_username=admin&os_password=admin";
         String postUrl = jiraBaseUrl
                 + "/" + addTestReportPath + "/"
-                + jiraProject + "/"
+//                + jiraProject + "/"
                 + storyPath
                 + loginParams;
 
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/atlassian-plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/atlassian-plugin.xml	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/atlassian-plugin.xml	(revision )
@@ -149,14 +149,23 @@
         <styleClass>clear-story-test-button</styleClass>
     </web-item>
     <!-- ==================================================================================================== -->
-    <!--Issue page - Stories panel-->
-    <web-panel name="Executable Stories" i18n-name-key="viewIssuePage.storyPanel.name"
+    <!--Issue page - Story panel-->
+    <web-panel name="Story Panel" i18n-name-key="viewIssuePage.storyPanel.name"
                key="viewIssuePage.storyPanel.key"
-               location="atl.jira.view.issue.left.context" weight="211">
+               location="atl.jira.view.issue.left.context" weight="220">
         <description key="viewIssuePage.storyPanel.description">JBehave Story Panel</description>
         <context-provider class="com.mycomp.execspec.jiraplugin.contextproviders.StoryPanelContextProvider"/>
-        <resource name="view" type="velocity" location="templates/storypanel/stories_panel.vm"/>
+        <resource name="view" type="velocity" location="templates/viewissuepage/story_panel.vm"/>
         <label key="viewIssuePage.storyPanel.label"/>
+    </web-panel>
+    <!--Issue page - Story reports panel-->
+    <web-panel name="Story Reports Panel" i18n-name-key="viewIssuePage.storyReportsPanel.name"
+               key="viewIssuePage.storyReportsPanel.key"
+               location="atl.jira.view.issue.left.context" weight="230">
+        <description key="viewIssuePage.storyReportsPanel.description">JBehave Story Reports Panel</description>
+        <context-provider class="com.mycomp.execspec.jiraplugin.contextproviders.StoryReportsPanelContextProvider"/>
+        <resource name="view" type="velocity" location="templates/viewissuepage/story_reports_panel.vm"/>
+        <label key="viewIssuePage.storyReportsPanel.label"/>
     </web-panel>
     <!-- ==================================================================================================== -->
     <!--Custom customfields-->
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/contextproviders/StoryReportsPanelContextProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/contextproviders/StoryReportsPanelContextProvider.java	(revision )
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/contextproviders/StoryReportsPanelContextProvider.java	(revision )
@@ -0,0 +1,20 @@
+package com.mycomp.execspec.jiraplugin.contextproviders;
+
+import com.atlassian.crowd.embedded.api.User;
+import com.atlassian.jira.plugin.webfragment.contextproviders.AbstractJiraContextProvider;
+import com.atlassian.jira.plugin.webfragment.model.JiraHelper;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by Dmytro on 5/5/2014.
+ */
+public class StoryReportsPanelContextProvider extends AbstractJiraContextProvider {
+
+    @Override
+    public Map getContextMap(User user, JiraHelper jiraHelper) {
+        Map contextMap = new HashMap();
+        return contextMap;
+    }
+}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/3rdparty/codemirror-4.3/lib/show-hint.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/3rdparty/codemirror-4.3/lib/show-hint.css	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/3rdparty/codemirror-4.3/lib/show-hint.css	(revision )
@@ -1,38 +1,40 @@
 .CodeMirror-hints {
-  position: absolute;
-  z-index: 10;
+    position: absolute;
+    z-index: 10;
-  overflow: hidden;
+    /*overflow: hidden;*/
+    /*overflow: auto;*/
-  list-style: none;
+    list-style: none;
 
-  margin: 0;
-  padding: 2px;
+    margin: 0;
+    padding: 2px;
 
-  -webkit-box-shadow: 2px 3px 5px rgba(0,0,0,.2);
+    -webkit-box-shadow: 2px 3px 5px rgba(0, 0, 0, .2);
-  -moz-box-shadow: 2px 3px 5px rgba(0,0,0,.2);
+    -moz-box-shadow: 2px 3px 5px rgba(0, 0, 0, .2);
-  box-shadow: 2px 3px 5px rgba(0,0,0,.2);
+    box-shadow: 2px 3px 5px rgba(0, 0, 0, .2);
-  border-radius: 3px;
-  border: 1px solid silver;
+    border-radius: 3px;
+    border: 1px solid silver;
 
-  background: white;
-  font-size: 90%;
-  font-family: monospace;
+    background: white;
+    font-size: 90%;
+    font-family: monospace;
 
-  max-height: 20em;
-  overflow-y: auto;
+    max-height: 20em;
+    overflow-y: auto;
 }
 
 .CodeMirror-hint {
-  margin: 0;
-  padding: 0 4px;
-  border-radius: 2px;
+    margin: 0;
+    padding: 0 4px;
+    border-radius: 2px;
-  max-width: 19em;
-  overflow: hidden;
+    /*max-width: 19em;*/
+    /*max-width: 30em;*/
+    /*overflow: hidden;*/
-  white-space: pre;
-  color: black;
-  cursor: pointer;
+    white-space: pre;
+    color: black;
+    cursor: pointer;
 }
 
 .CodeMirror-hint-active {
-  background: #08f;
-  color: white;
+    background: #08f;
+    color: white;
 }
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/Other.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/Other.java	(date 1405964957000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/Other.java	(date 1405964957000)
@@ -1,7 +0,0 @@
-package com.mycomp.execspec;
-
-/**
- * Created by Dmytro on 2/26/14.
- */
-public class Other {
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/3rdparty/codemirror-4.3/addon/hint/show-hint.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/3rdparty/codemirror-4.3/addon/hint/show-hint.js	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/3rdparty/codemirror-4.3/addon/hint/show-hint.js	(revision )
@@ -1,389 +1,450 @@
 // CodeMirror, copyright (c) by Marijn Haverbeke and others
 // Distributed under an MIT license: http://codemirror.net/LICENSE
 
-(function(mod) {
+(function (mod) {
-  if (typeof exports == "object" && typeof module == "object") // CommonJS
-    mod(require("../../lib/codemirror"));
-  else if (typeof define == "function" && define.amd) // AMD
-    define(["../../lib/codemirror"], mod);
-  else // Plain browser env
-    mod(CodeMirror);
+    if (typeof exports == "object" && typeof module == "object") // CommonJS
+        mod(require("../../lib/codemirror"));
+    else if (typeof define == "function" && define.amd) // AMD
+        define(["../../lib/codemirror"], mod);
+    else // Plain browser env
+        mod(CodeMirror);
-})(function(CodeMirror) {
+})(function (CodeMirror) {
-  "use strict";
+    "use strict";
 
-  var HINT_ELEMENT_CLASS        = "CodeMirror-hint";
+    var HINT_ELEMENT_CLASS = "CodeMirror-hint";
-  var ACTIVE_HINT_ELEMENT_CLASS = "CodeMirror-hint-active";
+    var ACTIVE_HINT_ELEMENT_CLASS = "CodeMirror-hint-active";
 
-  // This is the old interface, kept around for now to stay
-  // backwards-compatible.
+    // This is the old interface, kept around for now to stay
+    // backwards-compatible.
-  CodeMirror.showHint = function(cm, getHints, options) {
+    CodeMirror.showHint = function (cm, getHints, options) {
-    if (!getHints) return cm.showHint(options);
-    if (options && options.async) getHints.async = true;
-    var newOpts = {hint: getHints};
-    if (options) for (var prop in options) newOpts[prop] = options[prop];
-    return cm.showHint(newOpts);
-  };
+        if (!getHints) return cm.showHint(options);
+        if (options && options.async) getHints.async = true;
+        var newOpts = {hint: getHints};
+        if (options) for (var prop in options) newOpts[prop] = options[prop];
+        return cm.showHint(newOpts);
+    };
 
-  CodeMirror.defineExtension("showHint", function(options) {
+    CodeMirror.defineExtension("showHint", function (options) {
-    // We want a single cursor position.
-    if (this.listSelections().length > 1 || this.somethingSelected()) return;
+        // We want a single cursor position.
+        if (this.listSelections().length > 1 || this.somethingSelected()) return;
 
-    if (this.state.completionActive) this.state.completionActive.close();
-    var completion = this.state.completionActive = new Completion(this, options);
-    var getHints = completion.options.hint;
-    if (!getHints) return;
+        if (this.state.completionActive) this.state.completionActive.close();
+        var completion = this.state.completionActive = new Completion(this, options);
+        var getHints = completion.options.hint;
+        if (!getHints) return;
 
-    CodeMirror.signal(this, "startCompletion", this);
-    if (getHints.async)
+        CodeMirror.signal(this, "startCompletion", this);
+        if (getHints.async)
-      getHints(this, function(hints) { completion.showHints(hints); }, completion.options);
+            getHints(this, function (hints) {
+                completion.showHints(hints);
+            }, completion.options);
-    else
-      return completion.showHints(getHints(this, completion.options));
-  });
+        else
+            return completion.showHints(getHints(this, completion.options));
+    });
 
-  function Completion(cm, options) {
-    this.cm = cm;
-    this.options = this.buildOptions(options);
-    this.widget = this.onClose = null;
-  }
+    function Completion(cm, options) {
+        this.cm = cm;
+        this.options = this.buildOptions(options);
+        this.widget = this.onClose = null;
+    }
 
-  Completion.prototype = {
+    Completion.prototype = {
-    close: function() {
+        close: function () {
-      if (!this.active()) return;
-      this.cm.state.completionActive = null;
+            if (!this.active()) return;
+            this.cm.state.completionActive = null;
 
-      if (this.widget) this.widget.close();
-      if (this.onClose) this.onClose();
-      CodeMirror.signal(this.cm, "endCompletion", this.cm);
-    },
+            if (this.widget) this.widget.close();
+            if (this.onClose) this.onClose();
+            CodeMirror.signal(this.cm, "endCompletion", this.cm);
+        },
 
-    active: function() {
+        active: function () {
-      return this.cm.state.completionActive == this;
-    },
+            return this.cm.state.completionActive == this;
+        },
 
-    pick: function(data, i) {
+        pick: function (data, i) {
-      var completion = data.list[i];
-      if (completion.hint) completion.hint(this.cm, data, completion);
-      else this.cm.replaceRange(getText(completion), completion.from || data.from,
-                                completion.to || data.to, "complete");
-      CodeMirror.signal(data, "pick", completion);
-      this.close();
-    },
+            var completion = data.list[i];
+            if (completion.hint) completion.hint(this.cm, data, completion);
+            else this.cm.replaceRange(getText(completion), completion.from || data.from,
+                completion.to || data.to, "complete");
+            CodeMirror.signal(data, "pick", completion);
+            this.close();
+        },
 
-    showHints: function(data) {
+        showHints: function (data) {
-      if (!data || !data.list.length || !this.active()) return this.close();
+            if (!data || !data.list.length || !this.active()) return this.close();
 
-      if (this.options.completeSingle && data.list.length == 1)
-        this.pick(data, 0);
-      else
-        this.showWidget(data);
-    },
+            if (this.options.completeSingle && data.list.length == 1)
+                this.pick(data, 0);
+            else
+                this.showWidget(data);
+        },
 
-    showWidget: function(data) {
+        showWidget: function (data) {
-      this.widget = new Widget(this, data);
-      CodeMirror.signal(data, "shown");
+            this.widget = new Widget(this, data);
+            CodeMirror.signal(data, "shown");
 
-      var debounce = 0, completion = this, finished;
-      var closeOn = this.options.closeCharacters;
-      var startPos = this.cm.getCursor(), startLen = this.cm.getLine(startPos.line).length;
+            var debounce = 0, completion = this, finished;
+            var closeOn = this.options.closeCharacters;
+            var startPos = this.cm.getCursor(), startLen = this.cm.getLine(startPos.line).length;
 
-      var requestAnimationFrame = window.requestAnimationFrame || function(fn) {
+            var requestAnimationFrame = window.requestAnimationFrame || function (fn) {
-        return setTimeout(fn, 1000/60);
+                return setTimeout(fn, 1000 / 60);
-      };
-      var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;
+            };
+            var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;
 
-      function done() {
-        if (finished) return;
-        finished = true;
-        completion.close();
-        completion.cm.off("cursorActivity", activity);
-        if (data) CodeMirror.signal(data, "close");
-      }
+            function done() {
+                if (finished) return;
+                finished = true;
+                completion.close();
+                completion.cm.off("cursorActivity", activity);
+                if (data) CodeMirror.signal(data, "close");
+            }
 
-      function update() {
-        if (finished) return;
-        CodeMirror.signal(data, "update");
-        var getHints = completion.options.hint;
-        if (getHints.async)
-          getHints(completion.cm, finishUpdate, completion.options);
-        else
-          finishUpdate(getHints(completion.cm, completion.options));
-      }
+            function update() {
+                if (finished) return;
+                CodeMirror.signal(data, "update");
+                var getHints = completion.options.hint;
+                if (getHints.async)
+                    getHints(completion.cm, finishUpdate, completion.options);
+                else
+                    finishUpdate(getHints(completion.cm, completion.options));
+            }
+
-      function finishUpdate(data_) {
-        data = data_;
-        if (finished) return;
-        if (!data || !data.list.length) return done();
-        if (completion.widget) completion.widget.close();
-        completion.widget = new Widget(completion, data);
-      }
+            function finishUpdate(data_) {
+                data = data_;
+                if (finished) return;
+                if (!data || !data.list.length) return done();
+                if (completion.widget) completion.widget.close();
+                completion.widget = new Widget(completion, data);
+            }
 
-      function clearDebounce() {
-        if (debounce) {
-          cancelAnimationFrame(debounce);
-          debounce = 0;
-        }
-      }
+            function clearDebounce() {
+                if (debounce) {
+                    cancelAnimationFrame(debounce);
+                    debounce = 0;
+                }
+            }
 
-      function activity() {
-        clearDebounce();
-        var pos = completion.cm.getCursor(), line = completion.cm.getLine(pos.line);
-        if (pos.line != startPos.line || line.length - pos.ch != startLen - startPos.ch ||
-            pos.ch < startPos.ch || completion.cm.somethingSelected() ||
-            (pos.ch && closeOn.test(line.charAt(pos.ch - 1)))) {
-          completion.close();
-        } else {
-          debounce = requestAnimationFrame(update);
-          if (completion.widget) completion.widget.close();
-        }
-      }
+            function activity() {
+                clearDebounce();
+                var pos = completion.cm.getCursor(), line = completion.cm.getLine(pos.line);
+                if (pos.line != startPos.line || line.length - pos.ch != startLen - startPos.ch ||
+                    pos.ch < startPos.ch || completion.cm.somethingSelected() ||
+                    (pos.ch && closeOn.test(line.charAt(pos.ch - 1)))) {
+                    completion.close();
+                } else {
+                    debounce = requestAnimationFrame(update);
+                    if (completion.widget) completion.widget.close();
+                }
+            }
+
-      this.cm.on("cursorActivity", activity);
-      this.onClose = done;
-    },
+            this.cm.on("cursorActivity", activity);
+            this.onClose = done;
+        },
 
-    buildOptions: function(options) {
+        buildOptions: function (options) {
-      var editor = this.cm.options.hintOptions;
-      var out = {};
-      for (var prop in defaultOptions) out[prop] = defaultOptions[prop];
-      if (editor) for (var prop in editor)
-        if (editor[prop] !== undefined) out[prop] = editor[prop];
-      if (options) for (var prop in options)
-        if (options[prop] !== undefined) out[prop] = options[prop];
-      return out;
-    }
-  };
+            var editor = this.cm.options.hintOptions;
+            var out = {};
+            for (var prop in defaultOptions) out[prop] = defaultOptions[prop];
+            if (editor) for (var prop in editor)
+                if (editor[prop] !== undefined) out[prop] = editor[prop];
+            if (options) for (var prop in options)
+                if (options[prop] !== undefined) out[prop] = options[prop];
+            return out;
+        }
+    };
 
-  function getText(completion) {
-    if (typeof completion == "string") return completion;
-    else return completion.text;
-  }
+    function getText(completion) {
+        if (typeof completion == "string") return completion;
+        else return completion.text;
+    }
 
-  function buildKeyMap(completion, handle) {
-    var baseMap = {
+    function buildKeyMap(completion, handle) {
+        var baseMap = {
-      Up: function() {handle.moveFocus(-1);},
-      Down: function() {handle.moveFocus(1);},
-      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},
-      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},
-      Home: function() {handle.setFocus(0);},
-      End: function() {handle.setFocus(handle.length - 1);},
+            Up: function () {
+                handle.moveFocus(-1);
+            },
+            Down: function () {
+                handle.moveFocus(1);
+            },
+            PageUp: function () {
+                handle.moveFocus(-handle.menuSize() + 1, true);
+            },
+            PageDown: function () {
+                handle.moveFocus(handle.menuSize() - 1, true);
+            },
+            Home: function () {
+                handle.setFocus(0);
+            },
+            End: function () {
+                handle.setFocus(handle.length - 1);
+            },
-      Enter: handle.pick,
-      Tab: handle.pick,
-      Esc: handle.close
-    };
-    var custom = completion.options.customKeys;
-    var ourMap = custom ? {} : baseMap;
+            Enter: handle.pick,
+            Tab: handle.pick,
+            Esc: handle.close
+        };
+        var custom = completion.options.customKeys;
+        var ourMap = custom ? {} : baseMap;
+
-    function addBinding(key, val) {
-      var bound;
-      if (typeof val != "string")
+        function addBinding(key, val) {
+            var bound;
+            if (typeof val != "string")
-        bound = function(cm) { return val(cm, handle); };
+                bound = function (cm) {
+                    return val(cm, handle);
+                };
-      // This mechanism is deprecated
-      else if (baseMap.hasOwnProperty(val))
-        bound = baseMap[val];
-      else
-        bound = val;
-      ourMap[key] = bound;
-    }
+            // This mechanism is deprecated
+            else if (baseMap.hasOwnProperty(val))
+                bound = baseMap[val];
+            else
+                bound = val;
+            ourMap[key] = bound;
+        }
+
-    if (custom)
-      for (var key in custom) if (custom.hasOwnProperty(key))
-        addBinding(key, custom[key]);
-    var extra = completion.options.extraKeys;
-    if (extra)
-      for (var key in extra) if (extra.hasOwnProperty(key))
-        addBinding(key, extra[key]);
-    return ourMap;
-  }
+        if (custom)
+            for (var key in custom) if (custom.hasOwnProperty(key))
+                addBinding(key, custom[key]);
+        var extra = completion.options.extraKeys;
+        if (extra)
+            for (var key in extra) if (extra.hasOwnProperty(key))
+                addBinding(key, extra[key]);
+        return ourMap;
+    }
 
-  function getHintElement(hintsElement, el) {
-    while (el && el != hintsElement) {
-      if (el.nodeName.toUpperCase() === "LI" && el.parentNode == hintsElement) return el;
-      el = el.parentNode;
-    }
-  }
+    function getHintElement(hintsElement, el) {
+        while (el && el != hintsElement) {
+            if (el.nodeName.toUpperCase() === "LI" && el.parentNode == hintsElement) return el;
+            el = el.parentNode;
+        }
+    }
 
-  function Widget(completion, data) {
+    function Widget(completion, data) {
+
+        console.log("### in Widget");
+
-    this.completion = completion;
-    this.data = data;
-    var widget = this, cm = completion.cm;
+        this.completion = completion;
+        this.data = data;
+        var widget = this, cm = completion.cm;
 
-    var hints = this.hints = document.createElement("ul");
-    hints.className = "CodeMirror-hints";
-    this.selectedHint = data.selectedHint || 0;
+        var hints = this.hints = document.createElement("ul");
+        hints.className = "CodeMirror-hints";
+        this.selectedHint = data.selectedHint || 0;
 
-    var completions = data.list;
-    for (var i = 0; i < completions.length; ++i) {
-      var elt = hints.appendChild(document.createElement("li")), cur = completions[i];
-      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? "" : " " + ACTIVE_HINT_ELEMENT_CLASS);
-      if (cur.className != null) className = cur.className + " " + className;
-      elt.className = className;
-      if (cur.render) cur.render(elt, data, cur);
-      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));
-      elt.hintId = i;
-    }
+        var completions = data.list;
+        for (var i = 0; i < completions.length; ++i) {
+            var elt = hints.appendChild(document.createElement("li")), cur = completions[i];
+            var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? "" : " " + ACTIVE_HINT_ELEMENT_CLASS);
+            if (cur.className != null) className = cur.className + " " + className;
+            elt.className = className;
+            if (cur.render) cur.render(elt, data, cur);
+            else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));
+            elt.hintId = i;
+        }
 
-    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);
-    var left = pos.left, top = pos.bottom, below = true;
-    hints.style.left = left + "px";
-    hints.style.top = top + "px";
-    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.
-    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);
-    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);
+        var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);
+        var left = pos.left, top = pos.bottom, below = true;
+        hints.style.left = left + "px";
+        hints.style.top = top + "px";
+        // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.
+        var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);
+        var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);
+
+        console.log("### winH - " + winW);
+        console.log("### winH - " + winH);
+
+
-    (completion.options.container || document.body).appendChild(hints);
+        (completion.options.container || document.body).appendChild(hints);
-    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;
+        var box = hints.getBoundingClientRect();
+
+        console.log("### box.bottom - " + box.bottom);
+        console.log("### box.top - " + box.top);
+        console.log("### box.width - " + box.width);
+        console.log("### box.height - " + box.height);
+
+        console.log("### widget.screenAmount() - " + widget.screenAmount());
+
+
+        var overlapY = box.bottom - winH;
+
-    if (overlapY > 0) {
-      var height = box.bottom - box.top, curTop = box.top - (pos.bottom - pos.top);
-      if (curTop - height > 0) { // Fits above cursor
-        hints.style.top = (top = curTop - height) + "px";
-        below = false;
-      } else if (height > winH) {
-        hints.style.height = (winH - 5) + "px";
-        hints.style.top = (top = pos.bottom - box.top) + "px";
-        var cursor = cm.getCursor();
-        if (data.from.ch != cursor.ch) {
-          pos = cm.cursorCoords(cursor);
-          hints.style.left = (left = pos.left) + "px";
-          box = hints.getBoundingClientRect();
-        }
-      }
-    }
-    var overlapX = box.left - winW;
-    if (overlapX > 0) {
-      if (box.right - box.left > winW) {
-        hints.style.width = (winW - 5) + "px";
-        overlapX -= (box.right - box.left) - winW;
-      }
-      hints.style.left = (left = pos.left - overlapX) + "px";
-    }
+        if (overlapY > 0) {
+            var height = box.bottom - box.top, curTop = box.top - (pos.bottom - pos.top);
+            if (curTop - height > 0) { // Fits above cursor
+                hints.style.top = (top = curTop - height) + "px";
+                below = false;
+            } else if (height > winH) {
+                hints.style.height = (winH - 5) + "px";
+                hints.style.top = (top = pos.bottom - box.top) + "px";
+                var cursor = cm.getCursor();
+                if (data.from.ch != cursor.ch) {
+                    pos = cm.cursorCoords(cursor);
+                    hints.style.left = (left = pos.left) + "px";
+                    box = hints.getBoundingClientRect();
+                }
+            }
+        }
+        var overlapX = box.left - winW;
+        if (overlapX > 0) {
+            if (box.right - box.left > winW) {
+                hints.style.width = (winW - 5) + "px";
+                overlapX -= (box.right - box.left) - winW;
+            }
+            hints.style.left = (left = pos.left - overlapX) + "px";
+        }
 
-    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {
+        cm.addKeyMap(this.keyMap = buildKeyMap(completion, {
-      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },
-      setFocus: function(n) { widget.changeActive(n); },
-      menuSize: function() { return widget.screenAmount(); },
+            moveFocus: function (n, avoidWrap) {
+                widget.changeActive(widget.selectedHint + n, avoidWrap);
+            },
+            setFocus: function (n) {
+                widget.changeActive(n);
+            },
+            menuSize: function () {
+                return widget.screenAmount();
+            },
-      length: completions.length,
+            length: completions.length,
-      close: function() { completion.close(); },
-      pick: function() { widget.pick(); },
+            close: function () {
+                completion.close();
+            },
+            pick: function () {
+                widget.pick();
+            },
-      data: data
-    }));
+            data: data
+        }));
 
-    if (completion.options.closeOnUnfocus) {
-      var closingOnBlur;
+        if (completion.options.closeOnUnfocus) {
+            var closingOnBlur;
-      cm.on("blur", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });
-      cm.on("focus", this.onFocus = function() { clearTimeout(closingOnBlur); });
+            cm.on("blur", this.onBlur = function () {
+                closingOnBlur = setTimeout(function () {
+                    completion.close();
+                }, 100);
+            });
+            cm.on("focus", this.onFocus = function () {
+                clearTimeout(closingOnBlur);
+            });
-    }
+        }
 
-    var startScroll = cm.getScrollInfo();
+        var startScroll = cm.getScrollInfo();
-    cm.on("scroll", this.onScroll = function() {
+        cm.on("scroll", this.onScroll = function () {
-      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();
-      var newTop = top + startScroll.top - curScroll.top;
-      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);
-      if (!below) point += hints.offsetHeight;
-      if (point <= editor.top || point >= editor.bottom) return completion.close();
-      hints.style.top = newTop + "px";
-      hints.style.left = (left + startScroll.left - curScroll.left) + "px";
-    });
+            var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();
+            var newTop = top + startScroll.top - curScroll.top;
+            var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);
+            if (!below) point += hints.offsetHeight;
+            if (point <= editor.top || point >= editor.bottom) return completion.close();
+            hints.style.top = newTop + "px";
+            hints.style.left = (left + startScroll.left - curScroll.left) + "px";
+        });
 
-    CodeMirror.on(hints, "dblclick", function(e) {
+        CodeMirror.on(hints, "dblclick", function (e) {
-      var t = getHintElement(hints, e.target || e.srcElement);
+            var t = getHintElement(hints, e.target || e.srcElement);
-      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}
+            if (t && t.hintId != null) {
+                widget.changeActive(t.hintId);
+                widget.pick();
+            }
-    });
+        });
 
-    CodeMirror.on(hints, "click", function(e) {
+        CodeMirror.on(hints, "click", function (e) {
-      var t = getHintElement(hints, e.target || e.srcElement);
-      if (t && t.hintId != null) {
-        widget.changeActive(t.hintId);
-        if (completion.options.completeOnSingleClick) widget.pick();
-      }
-    });
+            var t = getHintElement(hints, e.target || e.srcElement);
+            if (t && t.hintId != null) {
+                widget.changeActive(t.hintId);
+                if (completion.options.completeOnSingleClick) widget.pick();
+            }
+        });
 
-    CodeMirror.on(hints, "mousedown", function() {
+        CodeMirror.on(hints, "mousedown", function () {
-      setTimeout(function(){cm.focus();}, 20);
+            setTimeout(function () {
+                cm.focus();
+            }, 20);
-    });
+        });
 
-    CodeMirror.signal(data, "select", completions[0], hints.firstChild);
-    return true;
-  }
+        CodeMirror.signal(data, "select", completions[0], hints.firstChild);
+        return true;
+    }
 
-  Widget.prototype = {
+    Widget.prototype = {
-    close: function() {
+        close: function () {
-      if (this.completion.widget != this) return;
-      this.completion.widget = null;
-      this.hints.parentNode.removeChild(this.hints);
-      this.completion.cm.removeKeyMap(this.keyMap);
+            if (this.completion.widget != this) return;
+            this.completion.widget = null;
+            this.hints.parentNode.removeChild(this.hints);
+            this.completion.cm.removeKeyMap(this.keyMap);
 
-      var cm = this.completion.cm;
-      if (this.completion.options.closeOnUnfocus) {
-        cm.off("blur", this.onBlur);
-        cm.off("focus", this.onFocus);
-      }
-      cm.off("scroll", this.onScroll);
-    },
+            var cm = this.completion.cm;
+            if (this.completion.options.closeOnUnfocus) {
+                cm.off("blur", this.onBlur);
+                cm.off("focus", this.onFocus);
+            }
+            cm.off("scroll", this.onScroll);
+        },
 
-    pick: function() {
+        pick: function () {
-      this.completion.pick(this.data, this.selectedHint);
-    },
+            this.completion.pick(this.data, this.selectedHint);
+        },
 
-    changeActive: function(i, avoidWrap) {
+        changeActive: function (i, avoidWrap) {
+            console.log("### avoidWrap - " + avoidWrap);
-      if (i >= this.data.list.length)
-        i = avoidWrap ? this.data.list.length - 1 : 0;
-      else if (i < 0)
+            if (i >= this.data.list.length)
+                i = avoidWrap ? this.data.list.length - 1 : 0;
+            else if (i < 0)
-        i = avoidWrap ? 0  : this.data.list.length - 1;
+                i = avoidWrap ? 0 : this.data.list.length - 1;
-      if (this.selectedHint == i) return;
-      var node = this.hints.childNodes[this.selectedHint];
-      node.className = node.className.replace(" " + ACTIVE_HINT_ELEMENT_CLASS, "");
-      node = this.hints.childNodes[this.selectedHint = i];
-      node.className += " " + ACTIVE_HINT_ELEMENT_CLASS;
-      if (node.offsetTop < this.hints.scrollTop)
-        this.hints.scrollTop = node.offsetTop - 3;
-      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)
-        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;
-      CodeMirror.signal(this.data, "select", this.data.list[this.selectedHint], node);
-    },
+            if (this.selectedHint == i) return;
+            var node = this.hints.childNodes[this.selectedHint];
+            node.className = node.className.replace(" " + ACTIVE_HINT_ELEMENT_CLASS, "");
+            node = this.hints.childNodes[this.selectedHint = i];
+            node.className += " " + ACTIVE_HINT_ELEMENT_CLASS;
+            if (node.offsetTop < this.hints.scrollTop)
+                this.hints.scrollTop = node.offsetTop - 3;
+            else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)
+                this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;
+            CodeMirror.signal(this.data, "select", this.data.list[this.selectedHint], node);
+        },
 
-    screenAmount: function() {
+        screenAmount: function () {
-      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;
-    }
-  };
+            return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;
+        }
+    };
 
-  CodeMirror.registerHelper("hint", "auto", function(cm, options) {
+    CodeMirror.registerHelper("hint", "auto", function (cm, options) {
-    var helpers = cm.getHelpers(cm.getCursor(), "hint"), words;
-    if (helpers.length) {
-      for (var i = 0; i < helpers.length; i++) {
-        var cur = helpers[i](cm, options);
-        if (cur && cur.list.length) return cur;
-      }
-    } else if (words = cm.getHelper(cm.getCursor(), "hintWords")) {
-      if (words) return CodeMirror.hint.fromList(cm, {words: words});
-    } else if (CodeMirror.hint.anyword) {
-      return CodeMirror.hint.anyword(cm, options);
-    }
-  });
+        var helpers = cm.getHelpers(cm.getCursor(), "hint"), words;
+        if (helpers.length) {
+            for (var i = 0; i < helpers.length; i++) {
+                var cur = helpers[i](cm, options);
+                if (cur && cur.list.length) return cur;
+            }
+        } else if (words = cm.getHelper(cm.getCursor(), "hintWords")) {
+            if (words) return CodeMirror.hint.fromList(cm, {words: words});
+        } else if (CodeMirror.hint.anyword) {
+            return CodeMirror.hint.anyword(cm, options);
+        }
+    });
 
-  CodeMirror.registerHelper("hint", "fromList", function(cm, options) {
+    CodeMirror.registerHelper("hint", "fromList", function (cm, options) {
-    var cur = cm.getCursor(), token = cm.getTokenAt(cur);
-    var found = [];
-    for (var i = 0; i < options.words.length; i++) {
-      var word = options.words[i];
-      if (word.slice(0, token.string.length) == token.string)
-        found.push(word);
-    }
+        var cur = cm.getCursor(), token = cm.getTokenAt(cur);
+        var found = [];
+        for (var i = 0; i < options.words.length; i++) {
+            var word = options.words[i];
+            if (word.slice(0, token.string.length) == token.string)
+                found.push(word);
+        }
 
-    if (found.length) return {
-      list: found,
-      from: CodeMirror.Pos(cur.line, token.start),
+        if (found.length) return {
+            list: found,
+            from: CodeMirror.Pos(cur.line, token.start),
             to: CodeMirror.Pos(cur.line, token.end)
-    };
-  });
+        };
+    });
 
-  CodeMirror.commands.autocomplete = CodeMirror.showHint;
+    CodeMirror.commands.autocomplete = CodeMirror.showHint;
 
-  var defaultOptions = {
-    hint: CodeMirror.hint.auto,
-    completeSingle: true,
-    alignWithWord: true,
-    closeCharacters: /[\s()\[\]{};:>,]/,
-    closeOnUnfocus: true,
-    completeOnSingleClick: false,
-    container: null,
-    customKeys: null,
-    extraKeys: null
-  };
+    var defaultOptions = {
+        hint: CodeMirror.hint.auto,
+        completeSingle: true,
+        alignWithWord: true,
+        closeCharacters: /[\s()\[\]{};:>,]/,
+        closeOnUnfocus: true,
+        completeOnSingleClick: false,
+        container: null,
+        customKeys: null,
+        extraKeys: null
+    };
 
-  CodeMirror.defineOption("hintOptions", null);
+    CodeMirror.defineOption("hintOptions", null);
 });
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraReporterHTMLOutput.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraReporterHTMLOutput.java	(date 1405964957000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraReporterHTMLOutput.java	(date 1405964957000)
@@ -1,97 +0,0 @@
-package com.mycomp.execspec;
-
-import org.jbehave.core.configuration.Keywords;
-import org.jbehave.core.model.Story;
-import org.jbehave.core.reporters.HtmlOutput;
-
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.PrintStream;
-import java.util.LinkedList;
-import java.util.List;
-
-/**
- * Created by Dmytro on 4/15/2014.
- */
-public class JiraReporterHTMLOutput extends HtmlOutput {
-
-    private String storyPath;
-    private String jiraVersion;
-
-    private final JiraUploadPrintStream printStream;
-
-    public JiraReporterHTMLOutput(Keywords keywords) {
-        this(new JiraUploadPrintStream(), keywords);
-    }
-
-    public JiraReporterHTMLOutput(JiraUploadPrintStream printStream, Keywords keywords) {
-        super(printStream, keywords);
-        this.printStream = printStream;
-    }
-
-    @Override
-    public void beforeStory(Story story, boolean givenStory) {
-
-        storyPath = story.getPath();
-        String version = story.getMeta().getProperty("jira-version");
-//        Validate.notNull(version);
-        jiraVersion = version;
-
-        super.beforeStory(story, givenStory);
-    }
-
-    @Override
-    public void afterStory(boolean givenStory) {
-
-        if (!givenStory) {
-            // send the report to JIRA
-            List<Byte> writtenBytes = printStream.getWrittenBytes();
-            Byte[] bytes = writtenBytes.toArray(new Byte[writtenBytes.size()]);
-            byte[] bytesArray = new byte[bytes.length];
-            for (int i = 0; i < bytes.length; i++) {
-                Byte aByte = bytes[i];
-                bytesArray[i] = aByte;
-            }
-            String out = new String(bytesArray);
-            System.out.println("out:\n" + out);
-        }
-
-        super.afterStory(givenStory);
-    }
-
-    private static class JiraUploadPrintStream extends PrintStream {
-
-        private final List<Byte> writtenBytes;
-
-        private JiraUploadPrintStream(){
-            this(new LinkedList<Byte>());
-        }
-
-        private JiraUploadPrintStream(final List<Byte> bytesList) {
-
-            super(new OutputStream() {
-
-                @Override
-                public void write(int b) throws IOException {
-                    byte[] bytes = {(byte) b};
-                    System.out.println("byte - " + new String(bytes));
-                    bytesList.add((byte) b);
-                }
-
-                @Override
-                public void close() throws IOException {
-                    // upload to jira
-                    bytesList.clear();
-                    super.close();
-                }
-            });
-
-            writtenBytes = bytesList;
-        }
-
-        List<Byte> getWrittenBytes() {
-            return writtenBytes;
-        }
-    }
-
-}
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/Other2.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/Other2.java	(date 1405964957000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/Other2.java	(date 1405964957000)
@@ -1,7 +0,0 @@
-package com.mycomp.execspec;
-
-/**
- * Created by Dmytro on 2/26/14.
- */
-public class Other2 {
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryService.js	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryService.js	(revision )
@@ -3,11 +3,17 @@
     this.debugOn = false;
 
     var pathBase = "/jira/rest/story-res/1.0/";
-    var pathNewStoryTemplate = pathBase + "crud/newstorytemplate/";
+
+    // story paths
     var pathSave = pathBase + "crud/save/";
     var pathFind = pathBase + "find/for-issue/";
     var pathDelete = pathBase + "crud/delete/";
+
+    // story reports paths
+    var pathFindReports = pathBase + "story-test/find/";
     var pathDeleteReports = pathBase + "story-test/delete/";
+
+    // other paths
     var pathAutoComplete = pathBase + "autocomplete/";
 
     this.debug = function (msg) {
@@ -30,35 +36,6 @@
         console.log("test function called in storyService");
     }
 
-    this.fetchNewStoryTemplate = function (projectKey, callBack) {
-
-        storyService.debug("> fetchNewStoryTemplate");
-
-        var successCallback = function (data, status, xhr) {
-            storyService.debug("> fetchNewStoryTemplate.successCallback");
-            storyService.debug("status - " + status);
-            storyService.debug("xhr.status - " + xhr.status);
-            storyService.debug("data - " + data);
-            var jsonData = JSON.stringify(data);
-            storyService.debug("jsonData - " + jsonData);
-            callBack(data);
-            storyService.debug("# fetchNewStoryTemplate.successCallback");
-        }
-
-        var fetchTemplateUrl = pathNewStoryTemplate + projectKey;
-        storyService.debug("fetchTemplateUrl - " + fetchTemplateUrl);
-
-        AJS.$.ajax({
-            type: "GET",
-            url: fetchTemplateUrl,
-            contentType: "text/plain; charset=utf-8",
-            success: successCallback,
-            dataType: "json"
-        });
-
-        storyService.debug("# fetchNewStoryTemplate");
-    }
-
     this.saveOrUpdateStory = function (storyPayload, callBack) {
 
         storyService.debug("> saveOrUpdateStory");
@@ -128,6 +105,32 @@
             console.error("xhr.status - " + xhr.status);
         });
         storyService.debug("# StoryService.find");
+    }
+
+    this.findStoryReports = function (projectKey, issueKey, callBack) {
+
+        storyService.debug("> StoryService.findStoryReports");
+        storyService.debug("project key " + projectKey + ", issue key = " + issueKey);
+
+        var urlString = pathFindReports + projectKey + "/" + issueKey;
+
+        var jqxhr = AJS.$.getJSON(urlString);
+
+        var successCallback = function (data, status, xhr) {
+            storyService.debug("> StoryService.findStoryReports.successCallback");
+            storyService.debug("status - " + status);
+            storyService.debug("xhr.status - " + xhr.status);
+            storyService.debug("data - " + data);
+            callBack(data);
+            storyService.debug("# StoryService.findStoryReports.successCallback");
+        }
+        jqxhr.done(successCallback);
+
+        jqxhr.fail(function (data, status, xhr) {
+            console.error("fail, received data - " + data);
+            console.error("xhr.status - " + xhr.status);
+        });
+        storyService.debug("# StoryService.findStoryReports");
     }
 
     this.deleteStory = function (projectKey, issueKey, callBack) {
\ No newline at end of file
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryFinder.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryFinder.java	(date 1405964957000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryPathFinder.java	(revision )
@@ -18,7 +18,7 @@
 /**
  * Created by Dmytro on 2/17/14.
  */
-public class JiraStoryFinder {
+public class JiraStoryPathFinder {
 
     private final Logger log = LoggerFactory.getLogger(getClass());
 
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryLoader.java	(date 1405964957000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryLoader.java	(revision )
@@ -4,10 +4,8 @@
 import com.sun.jersey.api.client.Client;
 import com.sun.jersey.api.client.ClientResponse;
 import com.sun.jersey.api.client.WebResource;
-import org.apache.commons.lang.Validate;
 import org.jbehave.core.io.StoryLoader;
-import org.jbehave.core.model.Meta;
-import org.jbehave.core.parsers.RegexStoryParser;
+import org.jbehave.core.parsers.StoryParser;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -19,7 +17,6 @@
 import java.io.PrintWriter;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.Properties;
 
 /**
  * Created by Dmytro on 2/25/14.
@@ -30,20 +27,24 @@
 
     private String jiraBaseUrl;
 
-    private String jiraProject;
-
     private String downloadedStoriesDir = "src/test/resources/jira_stories";
 
     //    private String loadStoryPath = "rest/story-res/1.0/find/as-string";
     private String loadStoryPath = "rest/story-res/1.0/find/for-path";
 
+    private final StoryParser parser;
+
+    public JiraStoryLoader(StoryParser parser) {
+        this.parser = parser;
+    }
+
     @Override
     public String loadStoryAsText(String storyPath) {
 
         URI jiraSearchUrl = null;
         try {
-            String fullPath = jiraBaseUrl + "/" + loadStoryPath + "/" + jiraProject + "/" + storyPath;
-            fullPath += "?os_username=admin&os_password=admin";
+            String fullPath = jiraBaseUrl + "/" + loadStoryPath + "/" + storyPath;
+            fullPath += "?os_username=admin&os_password=admin&versionInPath=true";
             log.debug("full story path is - " + fullPath);
             jiraSearchUrl = new URI(fullPath);
         } catch (URISyntaxException e) {
@@ -58,42 +59,6 @@
 
         if (response.getStatus() == 200) {
             StoryDTO storyDTO = response.getEntity(StoryDTO.class);
-            Long version = storyDTO.getVersion();
-            Validate.notNull(version);
-            String receivedAsString = storyDTO.getAsString();
-
-            RegexStoryParser parser = new RegexStoryParser();
-            org.jbehave.core.model.Story jBehaveStory = parser.parseStory(receivedAsString, storyPath);
-
-            // set jira-version property
-            Meta originalMeta = jBehaveStory.getMeta();
-            Properties properties = new Properties();
-            properties.put("jira-version", version.toString());
-            Meta overridenMeta = new Meta(properties);
-            overridenMeta.inheritFrom(originalMeta);
-
-//            org.jbehave.core.model.Story overridenJBehaveStory = new Story(
-//                    jBehaveStory.getPath(), jBehaveStory.getDescription(), overridenMeta,
-//                    jBehaveStory.getNarrative(), jBehaveStory.getGivenStories(),
-//                    jBehaveStory.getLifecycle(), jBehaveStory.getScenarios());
-//
-//            String jiraVersion = overridenJBehaveStory.getMeta().getProperty("jira-version");
-//            Validate.notEmpty(jiraVersion);
-//
-//            BytesListPrintStream printStream = new BytesListPrintStream();
-//            Properties customPatterns = new Properties();
-//            customPatterns.setProperty("beforeStory", "");
-//            customPatterns.setProperty("pending", "{0}\n");
-////            customPatterns.setProperty("examplesTableStart", "");
-////            customPatterns.setProperty("examplesTableRowEnd", "");
-//
-//            TxtOutput txtOutput = new TxtOutput(printStream, customPatterns);
-//            ReportingStoryWalker walker = new ReportingStoryWalker();
-//            walker.walkStory(overridenJBehaveStory, txtOutput);
-//            List<Byte> writtenBytes = printStream.getWrittenBytes();
-//            String asString = StoryDTOUtils.bytesListToString(writtenBytes);
-//
-//            this.writeModelToFile(storyPath, asString);
             return storyDTO.getAsString();
         } else {
             int status = response.getStatus();
@@ -139,11 +104,4 @@
         this.jiraBaseUrl = jiraBaseUrl;
     }
 
-    public void setJiraProject(String jiraProject) {
-        this.jiraProject = jiraProject;
-    }
-
-    public String getJiraProject() {
-        return jiraProject;
-    }
 }
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(revision )
@@ -21,10 +21,48 @@
         {text: "And ", stateField: "allowAndStep", stateTokenType: "step-keyword-and"},
     ];
 
+    // fetch step hints
+    var stepDocs = undefined;
+    var fetchStepHints = function (projectKey) {
+
+        console.log("> jbehave-hint.fetchStepHints");
+        console.log("projectKey - " + projectKey);
+
+        var pathBase = "/jira/rest/story-res/1.0/";
+        var pathStepDocs = pathBase + "step-doc/for-project/" + projectKey;
+        console.log("pathStepDocs - " + pathStepDocs);
+
+        var successCallback = function (data, status, xhr) {
+            console.log("> jbehave-hint.fetchStepHints.successCallback");
+            console.log("status - " + status);
+            console.log("xhr.status - " + xhr.status);
+            console.log("data - " + data);
+
+            console.log("found step docs - " + JSON.stringify(data, null, "\t"));
+            stepDocs = data.stepDocs;
+
+            console.log("# jbehave-hint.fetchStepHints.successCallback");
+        };
+
+        AJS.$.ajax({
+            type: "GET",
+            url: pathStepDocs,
+            contentType: "text/plain; charset=utf-8",
+            success: successCallback,
+            dataType: "json"
+        });
+
+        console.log("# jbehave-hint.fetchStepHints");
+    }
+    fetchStepHints("TESTING");
+
     CodeMirror.registerHelper("hint", "jbehave", function (editor, options) {
 
         console.log("########################## in autocomplete");
 
+        options.completeSingle = false;
+        options.closeOnUnfocus = false;
+
         var wordPattern = /[\w$]+/;
         var cur = editor.getCursor();
 
@@ -51,16 +89,38 @@
         }
 
         // hint on steps
-        var stepHints = ["Given something", "Given something else"];
+//        var stepHints = ["Given something", "Given something else"];
+        var stepHints = [];
+        for (var k = 0; k < stepDocs.length; k++) {
+            var stepHint = new Object();
+            stepHint.text = stepDocs[k].startingWord + " " + stepDocs[k].pattern;
 
+            stepHint.displayText = "<span>Display:</span> " + stepHint.text;
+
+            stepHint.render = function (element, data, self) {
+
+                console.log("### Rendering hint");
+//                var hintDiv = document.createElement("div");
+                element.innerHTML = "<span style='font-weight: bold;'>span</span>: " + self.text;
+//                element.appendChild(hintDiv);
+
+            };
+
+            stepHints.push(stepHint);
+        }
+
+
         if (state.lastStepType == "Given") {
             for (var i = 0; i < stepHints.length; i++) {
                 var stepHint = stepHints[i];
                 list.push(stepHint);
             }
         }
-//        storyService.test();
 
-        return {list: list, from: CodeMirror.Pos(cur.line, 0), to: CodeMirror.Pos(cur.line, cur.ch)};
+        return {
+            list: list,
+            from: CodeMirror.Pos(cur.line, 0),
+            to: CodeMirror.Pos(cur.line, cur.ch)
+        };
     });
 });
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/TemplatesShowStoryReports.soy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/TemplatesShowStoryReports.soy	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/TemplatesShowStoryReports.soy	(revision )
@@ -2,6 +2,48 @@
 
 
 /**
+ * Renders story test reports
+ * @param currentStoryVersion
+ * @param storyTestReports
+ */
+{template .renderStoryReports autoescape="false"}
+<div class="aui-tabs horizontal-tabs">
+    <ul class="tabs-menu">
+        {foreach $storyReport in $storyTestReports}
+            <li class="menu-item {if isFirst($storyReport)}active-tab{/if}">
+                <a href="#storyReportTab{index($storyReport)}"><strong>{$storyReport.environment}</strong>
+                    {if $storyReport.totalScenariosPassed > 0}<span
+                    class="aui-badge passed">{$storyReport.totalScenariosPassed}</span>{/if}{if $storyReport.totalScenariosFailed > 0}<span
+                    class="aui-badge failed">{$storyReport.totalScenariosFailed}</span>{/if}{if $storyReport.totalScenariosPending > 0}<span
+                    class="aui-badge pending">{$storyReport.totalScenariosPending}{/if}{if $storyReport.totalScenariosSkipped > 0}<span
+                    class="aui-badge skipped">{$storyReport.totalScenariosSkipped }{/if}{if $storyReport.totalScenariosNotPerformed > 0}<span
+                    class="aui-badge not-performed">{$storyReport.totalScenariosNotPerformed}{/if}
+                </a>
+            </li>
+        {/foreach}
+    </ul>
+    {foreach $storyReport in $storyTestReports}
+        <div id="storyReportTab{index($storyReport)}" class="tabs-pane story-report-tab{if isFirst($storyReport)} active-pane{/if}">
+            <div id="storyReportMsgContainer{index($storyReport)}">
+                {if $storyReport.storyVersion != $currentStoryVersion}
+                    {call aui.message.hint}
+//                        {param title: 'Story has been modified since the last story run on this environment' /}
+                        {param closeable: 'true' /}
+                        {param id: 'reportMsg' + index($storyReport) /}
+                        {param content}
+                            <p>Story has been modified since the last run on this environment.</p>
+                        {/param}
+                    {/call}
+                {/if}
+            </div>
+            {$storyReport.htmlReport}
+        </div>
+    {/foreach}
+</div>
+{/template}
+
+
+/**
  * Render story report buttons
  * @param storyReports
  */
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/3rdparty/codemirror-4.3/lib/show-hint.ORIG.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/3rdparty/codemirror-4.3/lib/show-hint.ORIG.css	(revision )
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/3rdparty/codemirror-4.3/lib/show-hint.ORIG.css	(revision )
@@ -0,0 +1,38 @@
+.CodeMirror-hints {
+    position: absolute;
+    z-index: 10;
+    overflow: hidden;
+    list-style: none;
+
+    margin: 0;
+    padding: 2px;
+
+    -webkit-box-shadow: 2px 3px 5px rgba(0, 0, 0, .2);
+    -moz-box-shadow: 2px 3px 5px rgba(0, 0, 0, .2);
+    box-shadow: 2px 3px 5px rgba(0, 0, 0, .2);
+    border-radius: 3px;
+    border: 1px solid silver;
+
+    background: white;
+    font-size: 90%;
+    font-family: monospace;
+
+    max-height: 20em;
+    overflow-y: auto;
+}
+
+.CodeMirror-hint {
+    margin: 0;
+    padding: 0 4px;
+    border-radius: 2px;
+    max-width: 19em;
+    overflow: hidden;
+    white-space: pre;
+    color: black;
+    cursor: pointer;
+}
+
+.CodeMirror-hint-active {
+    background: #08f;
+    color: white;
+}
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/MyEmbedderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/MyEmbedderTest.java	(date 1405964957000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/MyEmbedderTest.java	(revision )
@@ -33,7 +33,7 @@
                 new StoryReporterBuilder() {
                     public StoryReporter reporterFor(String storyPath, org.jbehave.core.reporters.Format format) {
                         if (format.equals(org.jbehave.core.reporters.Format.HTML)) {
-                            return new JiraHtmlOutput(jiraBaseUrl, jiraProject, "DEV");
+                            return new JiraHtmlOutput(jiraBaseUrl, jiraProject, "TEST");
                         } else {
                             return super.reporterFor(storyPath, format);
                         }
@@ -62,9 +62,9 @@
 //        CrossReference crossReference = new CrossReference();
 //        configuration().storyReporterBuilder().withCrossReference(crossReference);
 
-        JiraStoryLoader jiraLoader = new JiraStoryLoader();
+        JiraStoryLoader jiraLoader = new JiraStoryLoader(configuration().storyParser());
         jiraLoader.setJiraBaseUrl(jiraBaseUrl);
-        jiraLoader.setJiraProject(jiraProject);
+//        jiraLoader.setJiraProject(jiraProject);
         configuration().useStoryLoader(jiraLoader);
 
 
@@ -90,6 +90,8 @@
         JiraStepDocReporter stepDocReporter = new JiraStepDocReporter(jiraBaseUrl, jiraProject);
         configuration().useStepdocReporter(stepDocReporter);
 
+//        configuration().useStoryParser(new JiraStoryParser());
+
     }
 
     @Test
@@ -116,7 +118,7 @@
     @Override
     protected List<String> storyPaths() {
 
-        JiraStoryFinder storyFinder = new JiraStoryFinder();
+        JiraStoryPathFinder storyFinder = new JiraStoryPathFinder();
 
         List<String> includes = null;
         List<String> excludes = null;
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/rest/StoryResourceFind.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/rest/StoryResourceFind.java	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/rest/StoryResourceFind.java	(revision )
@@ -12,14 +12,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.ws.rs.GET;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.Produces;
+import javax.ws.rs.*;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 /**
  * Contains rest api methods related to processing of Story objects.
@@ -33,10 +32,13 @@
     private Logger log = LoggerFactory.getLogger(this.getClass());
 
     private final StoryService storyService;
+
     private final StoryReportService storyReportService;
+
     private final StepDocsSerivce stepDocsSerivce;
 
     private SearchService searchService;
+
     private JiraAuthenticationContext authenticationContext;
 
     public StoryResourceFind(StoryService storyService,
@@ -53,15 +55,25 @@
     @GET
     @Path("/story-paths/{projectKey}")
     @Produces({MediaType.APPLICATION_JSON})
-    public StoryPathsDTO listStoryPaths(@PathParam("projectKey") String projectKey) {
+    public StoryPathsDTO listStoryPaths(@PathParam("projectKey") String projectKey,
+                                        @QueryParam("appendVersionToPath")
+                                        @DefaultValue("true") boolean includeVersionInPath) {
 
         Validate.notEmpty(projectKey);
 
         List<StoryDTO> stories = storyService.findByProjectKey(projectKey);
         List<String> paths = new ArrayList<String>(stories.size());
         for (StoryDTO story : stories) {
-            paths.add(story.getProjectKey() + "/" + story.getIssueKey() + ".story");
+            StringBuilder storyPathSb = new StringBuilder(story.getProjectKey() + "/" + story.getIssueKey());
+            if (includeVersionInPath) {
+                Long version = story.getVersion();
+                Validate.notNull(version);
+                storyPathSb.append("." + version);
-        }
+            }
+            storyPathSb.append(".story");
+            String storyPath = storyPathSb.toString();
+            paths.add(storyPath);
+        }
         StoryPathsDTO pathsModel = new StoryPathsDTO();
         pathsModel.setPaths(paths);
 
@@ -100,11 +112,28 @@
     @Produces(MediaType.APPLICATION_JSON)
     public Response findForPath(
             @PathParam("projectKey") String projectKey,
-            @PathParam("storyPath") String storyPath) {
+            @PathParam("storyPath") String storyPath,
+            @QueryParam("versionInPath")
+            @DefaultValue("false") boolean versionInPath) {
 
+        String issueKey;
+        if (versionInPath) {
+            String regexPattern = "(.*)\\.([0-9]*)(\\.story)";
+            Pattern p = Pattern.compile(regexPattern);
+            Matcher matcher = p.matcher(storyPath);
+            if (matcher.matches()) {
+                String version = matcher.group(2);
+                log.debug("version in issue key is - " + version);
+                issueKey = matcher.group(1);
+            } else {
+                throw new IllegalArgumentException("If story version is part of story path then the path must match pattern - " + regexPattern);
+            }
+        } else {
+            issueKey = storyPath.substring(0, storyPath.lastIndexOf(".story"));
+        }
+
         Validate.notNull(storyPath);
         Validate.isTrue(storyPath.endsWith(".story"));
-        String issueKey = storyPath.substring(0, storyPath.lastIndexOf(".story"));
 
         StoryDTO storyDTO = storyService.findByProjectAndIssueKey(projectKey, issueKey);
 
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/templates/storypanel/stories_panel.vm
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/templates/storypanel/stories_panel.vm	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/templates/viewissuepage/story_panel.vm	(revision )
@@ -2,5 +2,5 @@
 ##<br><br><br>
 $webResourceManager.requireResourcesForContext("com.atlassian.auiplugin:aui-experimental-iconfont")
 $webResourceManager.requireResourcesForContext("execspec-view-issue-page-resources")
-<div id="story-panel">DEFAULT content!</div>
+<div id="story-panel"><!--DEFAULT content!--></div>
 
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js	(revision )
@@ -37,6 +37,8 @@
         editor.on("change", this.onEditorChangeHandler);
 
         this.loadStory();
+
+
     }
 
     this.onEditorChangeHandler = function () {
@@ -119,8 +121,48 @@
         this.editor.setOption("readOnly", false);
 
         this.debug("# showStory");
+
+        if (storyModel.version != null) {
+            // this is NOT a new story, so check and show any story reports
+            var projectKey = storyModel.projectKey;
+            var issueKey = storyModel.issueKey;
+            storyService.findStoryReports(projectKey, issueKey,
+                function (storyReportsPayload) {
+
+                    storyController.debug("> findStoryReports.callback");
+
+                    if (storyReportsPayload != undefined && storyReportsPayload.storyTestReports.length != 0) {
+                        storyController.debug("found storyReportsPayload - " + JSON.stringify(storyReportsPayload, null, "\t"));
+                        storyController.showStoryReports(storyReportsPayload.storyTestReports);
+                    } else {
+                        storyController.debug("no story reports were found for project - " + projectKey + ", issue - " + issueKey);
-    }
+                    }
 
+                    storyController.debug("# findStoryReports.callback");
+                }
+
+            );
+
+        }
+    }
+
+    this.showStoryReports = function (storyTestReports) {
+
+        this.debug("> showStoryReports");
+
+        var templateParam = new Object();
+        templateParam.storyTestReports = storyTestReports;
+        templateParam.currentStoryVersion = this.currentStory.version;
+
+        var storyReportsContent = execspec.viewissuepage.showstoryreports.renderStoryReports(templateParam);
+
+        AJS.$('#storyReportsPanel').html(storyReportsContent);
+        AJS.tabs.setup();
+
+        this.debug("# showStoryReports");
+    }
+
+
     this.saveStory = function (event) {
 
         this.debug("> saveStory");
@@ -165,7 +207,8 @@
 
         this.showStory(this.currentStory);
 
-
+        // hide story edited message
+        AJS.$("#storyMsgBar").empty();
 
         this.debug("# cancelEditingStory");
     }
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/i18n/plugin.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/i18n/plugin.properties	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/i18n/plugin.properties	(revision )
@@ -1,8 +1,14 @@
 ###################################################################################################
-# View issue page - story panels
+# View issue page - story panel
 viewIssuePage.storyPanel.name=JBehave Story Panel
 viewIssuePage.storyPanel.description=JBehave Story Panel
 viewIssuePage.storyPanel.label=JBehave Story
+
+###################################################################################################
+# View issue page - story reports panel
+viewIssuePage.storyReportsPanel.name=JBehave Story Reports Panel
+viewIssuePage.storyReportsPanel.description=JBehave Story Reports Panel
+viewIssuePage.storyReportsPanel.label=JBehave Story Reports
 
 ###################################################################################################
 # View issue page - web items and sections:
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/templates/storypanel/stories_panel.html
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/templates/storypanel/stories_panel.html	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/templates/viewissuepage/stories_panel.html	(revision )
@@ -1,0 +1,0 @@
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/story-report.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/story-report.css	(date 1405964957000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/story-report.css	(revision )
@@ -26,9 +26,9 @@
     /*apply default jira color scheme*/
 }
 
-pre.pending {
-    padding-left: 20px;
-}
+/*pre.pending {*/
+    /*padding-left: 20px;*/
+/*}*/
 
 /*.story-report-tab {*/
 /*color: #555;*/
\ No newline at end of file
