Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/temp.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/temp.html	(date 1406793811000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/temp.html	(revision )
@@ -1,120 +1,188 @@
-<div id="storyReportsPanel">
-    <div class="aui-tabs horizontal-tabs">
-        <ul class="tabs-menu">
-            <li class="menu-item active-tab"><a href="#storyReportTab0"><strong>DEV</strong><span class="aui-badge passed">1</span><span
-                    class="aui-badge pending">1</span></a></li>
-            <li class="menu-item"><a href="#storyReportTab1"><strong>TEST</strong><span class="aui-badge pending">2</span></a></li>
-        </ul>
-        <div id="#storyReportTab0" class="tabs-pane story-report-tab active-pane">
-            <div id="storyReportMsgContainer0">
-                <div id="reportMsg0" class="aui-message hint"><p>Story has been modified since the last story run on this environment.</p>
-                    <span class="aui-icon icon-hint"></span></div>
+<div class="CodeMirror-code">
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">1</div>
-            </div>
+        </div>
-            <div class="story">
-                <div class="meta">
-                    <div class="keyword">Meta:</div>
-                    <div class="property">@testMetaValue somsdf asfd asdf asdeValue2323</div>
+        <pre class=" number-line-0 "><span style="padding-right: 0.1px;"><span class="cm-meta-title">Meta:</span></span></pre>
-                </div>
+    </div>
-                <div class="beforeNarrative"><span>&nbsp;</span><span style="display: none;"
-                                                                      class="beforeNarrativeHint">+<span></span></span></div>
-                <div class="narrative">
-                    <div class="label">Narrative:</div>
-                    <div contenteditable="false" class="element inOrderTo">
-                        <div style="display: none;" class="add-icon">+</div>
-                        <span contenteditable="false" class="keyword inOrderTo inOrderToSpan">In order to</span> <span></span></div>
-                    <div class="element asA"><span class="keyword asA">As a</span> development team</div>
-                    <div class="element iWantTo"><span class="keyword iWantTo">I want to</span> use Behaviour-Driven Development</div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">2</div>
-                </div>
+        </div>
-                <div class="scenario">
-                    <div class="scenario-title"><span class="label">Scenario:</span> <span class="title">my test scenario 1</span></div>
-                    <div class="step successful">Given something</div>
-                    <div class="step successful">When I send the following request:<span class="step parameter"><table>
-                        <thead>
-                        <tr>
-                            <th>action</th>
-                            <th>value</th>
-                            <th>currency</th>
-                        </tr>
-                        </thead>
-                        <tbody>
-                        <tr>
-                            <td>Buy</td>
-                            <td>100</td>
-                            <td>USD</td>
-                        </tr>
-                        <tr>
-                            <td>Sell</td>
-                            <td>20</td>
-                            <td>GBP</td>
-                        </tr>
-                        </tbody>
-                    </table>
-</span></div>
-                    <div class="step successful">Then something should happen</div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-meta-field">@testMetaValues</span></span></pre>
-                </div>
+    </div>
-                <div class="scenario">
-                    <div class="scenario-title"><span class="label">Scenario:</span> <span class="title">sad path</span></div>
-                    <div class="step successful">Given something</div>
-                    <div class="step pending">When I try a step that has not yet been implemented <span
-                            class="keyword pending">(PENDING)</span></div>
-                    <div class="step pending">Then an error should be reported in the test report asadf <span class="keyword pending">(PENDING)</span>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">3</div>
-                    </div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span>â€‹</span></span></pre>
-                </div>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">4</div>
-            </div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-narrative-title">Narrative:</span>  </span></pre>
-        </div>
+    </div>
-        <div id="#storyReportTab1" class="tabs-pane story-report-tab">
-            <div id="storyReportMsgContainer1"></div>
-            <div class="story">
-                <div class="meta">
-                    <div class="keyword">Meta:</div>
-                    <div class="property">@testMetaValue</div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">5</div>
-                </div>
+        </div>
-                <div class="beforeNarrative"><span>&nbsp;</span><span style="display: none;"
-                                                                      class="beforeNarrativeHint">+<span></span></span></div>
-                <div class="narrative">
-                    <div class="label">Narrative:</div>
-                    <div contenteditable="false" class="element inOrderTo">
-                        <div style="display: none;" class="add-icon">+</div>
-                        <span contenteditable="false" class="keyword inOrderTo inOrderToSpan">In order to</span> <span></span></div>
-                    <div class="element asA"><span class="keyword asA">As a</span> development team</div>
-                    <div class="element iWantTo"><span class="keyword iWantTo">I want to</span> use Behaviour-Driven Development</div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-narrative-field-keyword">In order to </span><span
+                class="cm-narrative-field-value">communicate effectively to the business some functionality</span></span></pre>
-                </div>
+    </div>
-                <div class="scenario">
-                    <div class="scenario-title"><span class="label">Scenario:</span> <span class="title">my test scenario 1</span></div>
-                    <div class="step successful">Given something</div>
-                    <div class="step successful">When I send the following request:<span class="step parameter"><table>
-                        <thead>
-                        <tr>
-                            <th>action</th>
-                            <th>value</th>
-                            <th>currency</th>
-                        </tr>
-                        </thead>
-                        <tbody>
-                        <tr>
-                            <td>Buy</td>
-                            <td>100</td>
-                            <td>USD</td>
-                        </tr>
-                        <tr>
-                            <td>Sell</td>
-                            <td>20</td>
-                            <td>GBP</td>
-                        </tr>
-                        </tbody>
-                    </table>
-</span></div>
-                    <div class="step pending">Then something should happen asdf <span class="keyword pending">(PENDING)</span></div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">6</div>
-                </div>
+        </div>
-                <div class="scenario">
-                    <div class="scenario-title"><span class="label">Scenario:</span> <span class="title">sad path</span></div>
-                    <div class="step successful">Given something</div>
-                    <div class="step pending">When I try a step that has not yet been implemented <span
-                            class="keyword pending">(PENDING)</span></div>
-                    <div class="step pending">Then an error should be reported in the test report asadfa <span class="keyword pending">(PENDING)</span>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-narrative-field-keyword">As a </span><span
+                class="cm-narrative-field-value">development team</span></span></pre>
-                    </div>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">7</div>
-                </div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-narrative-field-keyword">I want to </span><span
+                class="cm-narrative-field-value">use Behaviour-Driven Development</span></span></pre>
-            </div>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">8</div>
         </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span>â€‹</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">9</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-scenario-keyword">Scenario:</span><span class="cm-scenario-title"> my test scenario 1 add</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">10</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span class="cm-step-keyword cm-given-step cm-matched-step">Given </span><span
+                class="cm-step-body cm-matched-step">test parameter value - </span><span
+                class="cm-step-body cm-matched-step cm-step-parameter">$paramValue</span><span
+                class="cm-step-body cm-matched-step"> units</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">11</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span class="cm-step-keyword cm-given-step cm-matched-step">Given </span><span
+                class="cm-step-body cm-matched-step">something else:</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">12</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span
+                class="cm-step-body cm-matched-step cm-step-parameter">|transactionId  |amosdfs unt |</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">13</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span class="cm-step-body cm-matched-step cm-step-parameter">|1<span
+                class="cm-tab">  </span>a<span class="cm-tab">   </span><span class="cm-tab">    </span><span class="cm-tab">    </span>|100 fgdfg<span
+                class="cm-tab">  </span>|</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">14</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span
+                class="cm-step-body cm-matched-step cm-step-parameter">asdfa sfa fad</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">15</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span>â€‹</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">16</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span class="cm-step-keyword cm-then-step">Then </span><span class="cm-step-body">the scenario should fail</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">17</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span class="cm-step-body">sWhen I send the following request:</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">18</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span class="cm-step-body">|action |value |currency |</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">19</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span class="cm-step-body">|Buy    |100   |USD      |</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">20</div>
+        </div>
+        <pre><span style="padding-right: 0.1px;"><span class="cm-step-body">|Sell   |20    |GBP      |</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">21</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-step-keyword cm-then-step">Then </span><span class="cm-step-body">something should happen asdf</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">22</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-step-keyword cm-Then-step">And </span><span class="cm-step-body">asfasfasfasf</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">23</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span>â€‹</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">24</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-scenario-keyword">Scenario:</span><span class="cm-scenario-title"> sad path asdfsfasdf</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">25</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-step-keyword cm-given-step">Given </span><span
+                class="cm-step-body">something</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">26</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-step-keyword cm-when-step">When </span><span class="cm-step-body">I try a step that has not yet been implemented</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">27</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-step-keyword cm-then-step">Then </span><span class="cm-step-body">an error should be reported in the test  report asadfa</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">28</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-step-body">sdfasfasf</span></span></pre>
+    </div>
+    <div style="position: relative;">
+        <div class="CodeMirror-gutter-wrapper" style="position: absolute; left: -29px;">
+            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;">29</div>
+        </div>
+        <pre class=""><span style="padding-right: 0.1px;"><span class="cm-step-body">asfasfasdfasdfadsf</span></span></pre>
     </div>
 </div>
\ No newline at end of file
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/jbehave-edit.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/jbehave-edit.css	(date 1406793811000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/jbehave-edit.css	(revision )
@@ -39,31 +39,40 @@
 }
 
 .cm-step-keyword {
-    color: #aa5500;
+    font-style: italic;
+    color: #ca7841;
     font-weight: bold;
 }
 
-.cm-step-keyword.cm-unmatched-step {
+.cm-step-body {
+    font-style: italic;
+    /*color: slategrey;*/
+    color: dimgrey;
+}
+
+/*.cm-step-keyword.cm-unmatched-step {*/
     /*font-weight: normal;*/
     /*font-style: italic;*/
-    background-color: lightgoldenrodyellow;
+    /*background-color: lightgoldenrodyellow;*/
     /*background-color: yellow;*/
+/*}*/
+
+.cm-step-keyword.matched-step {
+    color: #aa5500;
+    font-style: normal;
 }
 
-.cm-step-body.cm-unmatched-step {
-    /*font-style: italic;*/
-    background-color: lightgoldenrodyellow;
-    /*background-color: yellow;*/
-    /*font-weight: bold;*/
-    /*font-weight: bold;*/
-    /*color: lightslategrey;*/
+.cm-step-body.matched-step {
+    font-style: normal;
+    color: #000000;
 }
 
-.cm-step-body.cm-step-parameter {
+.cm-step-body.matched-step.step-parameter{
     font-weight: bold;
     color: purple;
     /*color: chocolate;*/
 }
+
 
 /*.cm-unmatched-step {*/
     /*font-style: italic;*/
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(date 1406793811000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(revision )
@@ -23,7 +23,7 @@
 
     // fetch step hints
     var stepDocs = null;
-    AJS.$(function() {
+    AJS.$(function () {
         var storyService = new StoryService();
         var projectKey = new PageUtils().getProjectKey();
 //        console.log("projectKey - " + projectKey);
@@ -59,28 +59,42 @@
         // hint on keywords that must be at start of line
         for (var i = 0; i < keywords.length; i++) {
             var keyword = keywords[i]
-            if ((state[keyword.stateField] || token.type == keyword.stateTokenType) && (cursorPos == 0 || keyword.text.indexOf(currentText) == 0)) {
+            if ((state[keyword.stateField]
+                || token.type == keyword.stateTokenType)
+                && (cursorPos == 0 || keyword.text.indexOf(currentText) == 0)) {
                 list.push(keyword.text);
             }
         }
 
+        var doc = editor.getDoc();
+        var cursor = editor.getCursor();
+        var doc = editor.getDoc();
+        var lineHandle = doc.getLineHandle(cursor.line);
+
+        var lineTextSoFar = lineHandle.text.substring(0, cursor.ch);
+
+        var lineTextTrimmed = lineTextSoFar.replace(/\s+$/g, '');
+
+        if (lineTextTrimmed.length > 0) {
-        // hint on steps
-        for (var k = 0; k < stepDocs.length; k++) {
+            // hint on steps
+            for (var k = 0; k < stepDocs.length; k++) {
+                var stepDoc = stepDocs[k];
+                var stepPatternWithKeyword = stepDoc.startingWord + " " + stepDoc.pattern;
+                if (stepPatternWithKeyword.substr(0, lineTextSoFar.length) == lineTextSoFar) {
-            var stepHint = new Object();
+                    var stepHint = new Object();
-            stepHint.text = stepDocs[k].startingWord + " " + stepDocs[k].pattern;
-
-            stepHint.displayText = "<span>Display:</span> " + stepHint.text;
-
+                    stepHint.text = stepPatternWithKeyword;
+                    var pattern = stepDoc.pattern;
+                    var regExpPattern = new RegExp("\\$");
+                    pattern = pattern.replace(regExpPattern, "<span class='cm-step-parameter'>@</span>");
+                    stepHint.stepDoc = stepDoc;
-            stepHint.render = function (element, data, self) {
+                    stepHint.render = function (element, data, self) {
-
-                console.log("### Rendering hint");
-//                var hintDiv = document.createElement("div");
-                element.innerHTML = "<span style='font-weight: bold;'>span</span>: " + self.text;
-//                element.appendChild(hintDiv);
-
+                        element.innerHTML =
+                            "<span class='cm-step-keyword'>" + self.stepDoc.startingWord + "</span> "
+                                + pattern;
-            };
+                    };
-
-            list.push(stepHint);
+                    list.push(stepHint);
+                }
+            }
         }
 
         return {
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js	(date 1406793811000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js	(revision )
@@ -26,13 +26,11 @@
 
         storyController.debug("> init");
 
-        AJS.$(function () {
-            var storyService = new StoryService();
-            var projectKey = new PageUtils().getProjectKey();
-            storyService.fetchStepDocs(projectKey, function (foundStepDocs) {
-                storyController.stepDocs = foundStepDocs;
-            });
+        var storyService = new StoryService();
+        var projectKey = new PageUtils().getProjectKey();
+        storyService.fetchStepDocs(projectKey, function (foundStepDocs) {
+            storyController.stepDocs = foundStepDocs;
+        });
-        });
 
         var storyPanelContent = execspec.viewissuepage.showstory.renderStoryPanel();
         AJS.$("#story-panel").html(storyPanelContent);
@@ -93,22 +91,351 @@
         });
         this.editor = editor;
         editor.on("change", this.onEditorChangeHandler);
+//
+//        editor.on("beforeChange", function() {
+//           storyController.debug("##### on beforeChange");
+//        });
 
+        editor.on("update", function (editor, param) {
+            storyController.debug("##### on editor UPDATE");
+//            storyController.onEditorUpdateHandler(editor);
+        });
+
+//        editor.on("keypress", function () {
+//            storyController.debug("##### on editor 'keypress'");
+////            this.onEditorChangeHandler
+//        });
+//
+//        editor.on("change", function (editor, changeObj) {
+//            storyController.debug("##### on editor CHANGE");
+//            storyController.onEditorChangeHandler(editor, changeObj);
+//            var paramStart = {line: 0, ch: 0};
+//            var paramEnd = {line: 1, ch: 10};
+//            var options = new Object();
+//            options.className = "test-marker";
+//            editor.getDoc().markText(paramStart, paramEnd, options);
+//        });
+
         this.loadStory();
 
         storyController.debug("# init");
     }
 
-    this.onEditorChangeHandler = function () {
+    this.lineStartsWithStepKeyword = function (lineNumber) {
+
+        var lineHandle = this.editor.getLineHandle(lineNumber);
+        var lineText = lineHandle.text;
+
+        var regExpPattern = new RegExp("^(Given|When|Then|And)\\s+");
+        var matchedResult = regExpPattern.exec(lineText);
+        if (matchedResult != null) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    this.findStepStartingLineBefore = function (lineNumber) {
+        var previousLine = lineNumber - 1;
+        while (previousLine != -1) {
+            if (this.lineStartsWithStepKeyword(previousLine)) {
+                return previousLine;
+            }
+            previousLine--;
+        }
+        return -1;
+    }
+
+    this.findStepStartingLineAfter = function (lineNumber) {
+        var nextLine = lineNumber + 1;
+        var totalLines = this.editor.lineCount();
+        while (nextLine < totalLines) {
+            if (this.lineStartsWithStepKeyword(nextLine)) {
+                return nextLine;
+            }
+            nextLine++;
+        }
+        return -1;
+    }
+
+    this.lineStartsWithScenarioOrExamles = function (lineNumber) {
+
+        var lineHandle = this.editor.getLineHandle(lineNumber);
+        var lineText = lineHandle.text;
+
+        if (lineText.match(/^Examples: /)) {
+
+        }
+
+        if (lineText.substring(0, "Examples: ".length) == "Examples: "
+            || lineText.substring(0, "Scenario ".length) == "Scenario ") {
+            return true;
+        } else {
+            return false;
+        }
+
+    }
+
+    this.findLastStepLineFrom = function (lineNumber) {
+
+        var nextLineNumber = lineNumber + 1;
+        var lineCount = this.editor.getDoc().lineCount();
+        var lastStepLine = lineNumber;
+        while (nextLineNumber < lineCount) {
+            if (this.lineStartsWithStepKeyword(nextLineNumber)) {
+                break;
+            } else {
+                lastStepLine = nextLineNumber;
+                nextLineNumber++;
+            }
+        }
+
+        return lastStepLine;
+    }
+
+    this.findMatchingStepdoc = function (step, stepType) {
+
+        storyController.debug("> findMatchingStepdoc");
+
+        // check if step matches
+        var matchedResult = null;
+        var matchingStepDoc = null;
+        {
+            step = step.replace(/\s+$/g, ''); // trim trailing whitespace;
+
+            for (var i = 0; i < storyController.stepDocs.length; i++) {
+                var stepDoc = storyController.stepDocs[i];
+                if (stepDoc.startingWord == stepType) {
+                    // try to see if the step docs pattern matches step body
+                    var regExpStr = stepDoc.groupedRegExpPattern;
+                    // replace the (.*) with ([\s\S]*) for javascript version of dotall option
+                    regExpStr = regExpStr.replace("(.*)", "([\\s\\S]*)");
+                    // add start and end chars to match the string exactly
+                    regExpStr = "^" + regExpStr + "$";
+                    storyController.debug("Trying to match the step body against pattern - " + regExpStr);
+                    var regExpPattern = new RegExp(regExpStr);
+                    var matchedResult = regExpPattern.exec(step);
+                    if (matchedResult != null) {
+                        storyController.debug("Step pattern - " + regExpStr + " matches current step body");
+                        matchingStepDoc = stepDoc;
+                        return new Object({result: matchedResult, stepDoc: matchingStepDoc});
+                        break;
+                    }
+                }
+            }
+        }
+
+        storyController.debug("# findMatchingStepdoc");
+
+        return null;
+    }
+
+    this.remarkStep = function (stepStartLine, stepEndLine, step) {
+
+        storyController.debug("> remarkStep");
+        storyController.debug("stepStartLine - " + stepStartLine + ", stepEndLine - " + stepEndLine);
+        storyController.debug("step:\n" + step);
+
+
+        // extract step body i.e. without the starting keyword
+        var regExpPattern = new RegExp("(^(Given|When|Then|And)\\s+)([\\s\\S]*)");
+        var matchedResult = regExpPattern.exec(step);
+        var keyword;
+        var stepBody;
+        var keywordPart;
+        if (matchedResult != null) {
+            keywordPart = matchedResult[1];
+            keyword = matchedResult[2];
+            stepBody = matchedResult[3];
+        } else {
+            console.error("Failed to match step against expected pattern, step - " + step + ", pattern - " + regExpPattern);
+            return;
+        }
+
+        var findResult = this.findMatchingStepdoc(stepBody, keyword);
+
+        var markerStart = {line: stepStartLine, ch: 0};
+        var lastStepLineHandle = this.editor.getLineHandle(stepEndLine);
+        var markerEnd = {line: stepEndLine, ch: lastStepLineHandle.text.length};
+        var className = "matched-step";
+
+        // remove any matched-step markers
+        var markersBefore = this.editor.getDoc().findMarks(markerStart, markerEnd);
+        if (markersBefore.length > 0) {
+            // always remove any existing marks, so that we include newly edited text in the marked range
+            for (var m = 0; m < markersBefore.length; m++) {
+                var marker = markersBefore[m];
+                if (marker.className == className
+                    || marker.className == "step-parameter") {
+                    marker.clear();
+                }
+            }
+        }
+
+        if (findResult != null) {
+
+            // set matched-step markers
+            var options = new Object();
+            options.className = className;
+            this.editor.getDoc().markText(markerStart, markerEnd, options);
+
+            // match any parameters
+            // obtain boundaries of any parameters
+            var parameterGroupsInfos = [];
+            var parameterGroups = findResult.stepDoc.parameterGroups;
+            if (parameterGroups.length > 0) {
+                var pos = 0;
+                var lineOffset = keywordPart.split("\n").length - 1;
+                for (var j = 1; j < findResult.result.length; j++) {
+                    var matchedGroup = findResult.result[j];
+                    if (parameterGroups.indexOf(j) > -1) {
+                        var pgi = new Object();
+                        pgi.number = j;
+                        pgi.text = matchedGroup;
+                        pgi.startIndex = pos;
+                        pgi.startLineOffset = lineOffset;
+                        pgi.endIndex = pos + matchedGroup.length;
+                        pgi.endLineOffset = lineOffset + (matchedGroup.split("\n").length - 1);
+
+                        // obtain line number and ch position
+                        // start
+                        pgi.startLine = stepStartLine + pgi.startLineOffset;
+                        var beforeParam = stepBody.substring(0, pgi.startIndex);
+                        var lastLineBreakInBefore = beforeParam.lastIndexOf("\n");
+                        var parameterStartLineCh;
+                        if (lastLineBreakInBefore > -1) {
+                            parameterStartLineCh = pgi.startIndex - lastLineBreakInBefore;
+                        } else {
+                            parameterStartLineCh = pgi.startIndex;
+                        }
+                        if (pgi.startLineOffset == 0) {
+                            // need to add the length of starting word also if on line 1
+                            parameterStartLineCh += keywordPart.length;
+                        }
+                        pgi.startLineCh = parameterStartLineCh;
+                        // end
+                        pgi.endLine = stepStartLine + pgi.endLineOffset;
+                        var includingParam = stepBody.substring(0, pgi.startIndex + pgi.text.length);
+                        var lastLineBreakInIncludingParam = includingParam.lastIndexOf("\n");
+                        var parameterEndLineCh;
+                        if (lastLineBreakInIncludingParam > -1) {
+                            parameterEndLineCh = pgi.startIndex + pgi.text.length - lastLineBreakInIncludingParam;
+                        } else {
+                            parameterEndLineCh = pgi.startIndex + pgi.text.length;
+                        }
+                        if (pgi.endLineOffset == 0) {
+                            // need to add the length of starting word also
+                            parameterEndLineCh += keywordPart.length;
+                        }
+                        pgi.endLineCh = parameterEndLineCh;
+
+                        parameterGroupsInfos.push(pgi);
+                    }
+                    pos += matchedGroup.length;
+                    var linesInGroup = matchedGroup.split(/\n/).length;
+                    if (linesInGroup > 1) {
+                        lineOffset += linesInGroup;
+                    }
+                }
+
+                // mark any step parameters
+                for (var k = 0; k < parameterGroupsInfos.length; k++) {
+                    var pgi = parameterGroupsInfos[k];
+                    var paramStart = {line: pgi.startLine, ch: pgi.startLineCh};
+                    var paramEnd = {line: pgi.endLine, ch: pgi.endLineCh};
+                    var paramMarkerOptions = new Object();
+                    paramMarkerOptions.className = "step-parameter";
+                    this.editor.getDoc().markText(paramStart, paramEnd, paramMarkerOptions);
+                }
+
+            }
+
+        }
+
+        storyController.debug("# remarkStep");
+    }
+
+
+    this.remarkStepBetween = function (stepStartLine, stepEndLine) {
+
+        storyController.debug("> remarkStepBetween");
+        storyController.debug("stepStartLine - " + stepStartLine + ", stepEndLine - " + stepEndLine);
+
+        var step = "";
+        this.editor.getDoc().eachLine(stepStartLine, stepEndLine + 1, function (lineHandle) {
+            step += lineHandle.text + "\n";
+        });
+
+        this.remarkStep(stepStartLine, stepEndLine, step);
+
+        storyController.debug("# remarkStepBetween");
+    }
+
+    this.remarkStepsBetween = function (scanStartLine, scanEndLine) {
+
+        storyController.debug("> remarkStepsBetween");
+        storyController.debug("scanStartLine - " + scanStartLine + ", scanEndLine - " + scanEndLine);
+
+        var stepStartLine = scanStartLine;
+        var stepEndLine = this.findLastStepLineFrom(scanStartLine);
+
+        this.remarkStepBetween(stepStartLine, stepEndLine);
+
+        while (stepEndLine < scanEndLine) {
+            stepStartLine = stepEndLine + 1;
+            stepEndLine = this.findLastStepLineFrom(stepStartLine);
+            this.remarkStepBetween(stepStartLine, stepEndLine);
+        }
+
+        storyController.debug("# remarkStepsBetween");
+    }
+
+    this.remarkStepsOnChange = function (editor, changeObj) {
+
         storyController.debug("> onEditorChangeHandler");
 
+        var fromLine = changeObj.from.line;
+        var toLine = changeObj.to.line;
+
+        // update toLine if the edited text contains more than one line and the result is greater than current toLine
+        var linesInChangedText = changeObj.text.length;
+        var toLineAfterChange = fromLine + (linesInChangedText - 1);
+        if (toLineAfterChange > toLine) {
+            toLine = toLineAfterChange;
+        }
+
+        var scanStartLine;
+
+        // find a step which starts before or at fromLine
+        var previousStepStartingLine = this.findStepStartingLineBefore(fromLine);
+        if (previousStepStartingLine > -1) {
+            scanStartLine = previousStepStartingLine;
+        } else if (this.lineStartsWithStepKeyword(fromLine)) {
+            scanStartLine = fromLine;
+        } else {
+            // we are not inside the step, so ignore event
+            scanStartLine = null;
+        }
+
+        if (scanStartLine != null) {
+            // find scanEndLine
+            var scanEndLine = this.findLastStepLineFrom(toLine);
+            this.remarkStepsBetween(scanStartLine, scanEndLine);
+        }
+
+        storyController.debug("# onEditorChangeHandler");
+    }
+
+    this.onEditorChangeHandler = function (editor, changeObj) {
+        storyController.debug("> onEditorChangeHandler");
+
         if (storyController.storyChanged == false) {
             var saveCancelMsg = execspec.viewissuepage.showstory.renderSaveCancelMsg();
             storyController.showWarningMessage(saveCancelMsg);
         }
         storyController.storyChanged = true;
 
-        storyController.updateEditedStepStyle();
+        storyController.remarkStepsOnChange(editor, changeObj);
 
         storyController.debug("# onEditorChangeHandler");
     }
@@ -119,18 +446,284 @@
 
         var editor = storyController.editor;
         var cursor = editor.getCursor();
+        var lineBeingEdited = cursor.line;
+        storyController.debug("line being edited - " + lineBeingEdited);
+        var doc = editor.getDoc();
+        var lineHandle = doc.getLineHandle(lineBeingEdited);
+
+        var tokenAtCurrentLine = editor.getTokenAt({line: lineBeingEdited, ch: lineHandle.text.length}, true);
+//        if (tokenAtCurrentLine.state.inStepBody) {
+        var stepTokensToRematch = [];
+        var currentStepNumber = tokenAtCurrentLine.state.stepNumber;
+        // if we are at the start of the line, we should rematch any previous step also if any
+        if (cursor.ch == 0) {
+            var previousLine = lineBeingEdited - 1;
+            var previousLineHandle = doc.getLineHandle(previousLine);
+            if (previousLineHandle != null) {
+                var previousLineToken = editor.getTokenAt({line: previousLine, ch: previousLineHandle.text.length}, true);
+                if (previousLineToken != null && previousLineToken.state.inStepBody && previousLineToken.state.stepNumber != currentStepNumber) {
+                    stepTokensToRematch.push(previousLine);
+//                        storyController.rematchStepSpanningLine(previousLine);
+                }
+            }
+        }
+        stepTokensToRematch.push(lineBeingEdited);
+        if (stepTokensToRematch.length == 2) {
+            // use case when we will rematch two steps one after the other
+            // in this case we need to clear the markers in range of lines that span the two target steps
+            var stepsStartedLine = previousLineToken.state.lastStepStartedAt;
+            var stepsEndedLine = lineBeingEdited;
+            var nextLine = stepsEndedLine + 1;
+            var nextLineHandle = doc.getLineHandle(nextLine);
+            if (nextLineHandle != null) {
+                var nextLineToken = editor.getTokenAt({line: nextLine, ch: nextLineHandle.text.length}, true);
+                while (nextLineHandle != null && nextLineToken.state.inStepBody && nextLineToken.state.stepNumber == currentStepNumber) {
+                    stepsEndedLine = nextLine;
+                    nextLine++;
+                    nextLineHandle = doc.getLineHandle(nextLine);
+                    if (nextLineHandle != null) {
+                        nextLineToken = editor.getTokenAt({line: nextLine, ch: nextLineHandle.text.length}, true);
+                    }
+                }
+            }
+            var startOfMarkers = {line: stepsStartedLine, ch: 0};
+            var lastStepsLine = doc.getLineHandle(stepsEndedLine);
+            var endOfMarkers = {line: stepsEndedLine, ch: lastStepsLine.text.length};
+            storyController.debug("### Going to rematch two consecutive steps, " +
+                "going to clear markers between [" + startOfMarkers.line + ":" + startOfMarkers.ch + "]" +
+                " and [" + endOfMarkers.line + ":" + endOfMarkers.ch + "]");
+            var markersBefore = doc.findMarks(startOfMarkers, endOfMarkers);
+            if (markersBefore.length > 0) {
+                // always remove any existing marks, so that we include newly edited text in the marked range
+                for (var m = 0; m < markersBefore.length; m++) {
+                    var marker = markersBefore[m];
+                    if (marker.className == "cm-matched-step"
+                        || marker.className == "cm-unmatched-step"
+                        || marker.className == "cm-step-parameter") {
+                        marker.clear();
+                    }
+                }
+            }
+        }
+
+        if (tokenAtCurrentLine.state.inStepBody) {
+            for (var i = 0; i < stepTokensToRematch.length; i++) {
+                storyController.rematchStepSpanningLine(stepTokensToRematch[i]);
+            }
+        }
+
+//        }
+
+        storyController.debug("# updateEditedStepStyle");
+    }
+
+    this.rematchStepSpanningLine = function (stepLine) {
+
+        storyController.debug("> rematchStepSpanningLine");
+
+        var editor = storyController.editor;
+        var lineBeingEdited = stepLine;
+
+        var doc = editor.getDoc();
+        var lineHandle = doc.getLineHandle(lineBeingEdited);
+
+        var tokenAtCurrentLine = editor.getTokenAt({line: lineBeingEdited, ch: lineHandle.text.length}, true);
+        storyController.debug("tokenAtCurrentLine.type - " + tokenAtCurrentLine.type);
+
+        // work out final token of step body
+        var stepBodyToken = tokenAtCurrentLine;
+        {
+            var currentStepNumber = tokenAtCurrentLine.state.currentStepNumber;
+
+            var lastStepLine = lineBeingEdited;
+            var nextLineHandle = doc.getLineHandle(lastStepLine + 1);
+
+            if (nextLineHandle != null) {
+                var tokenAtNextLine = editor.getTokenAt({line: lastStepLine + 1, ch: nextLineHandle.text.length}, true);
+                while (tokenAtNextLine != null && tokenAtNextLine.state.inStepBody && tokenAtNextLine.state.currentStepNumber == currentStepNumber) {
+                    stepBodyToken = tokenAtNextLine;
+                    lastStepLine++;
+                    var nextLineHandle = doc.getLineHandle(lastStepLine + 1);
+                    if (nextLineHandle != null) {
+                        tokenAtNextLine = editor.getTokenAt({line: lastStepLine + 1, ch: nextLineHandle.text.length}, true);
+                    } else {
+                        tokenAtNextLine = null;
+                    }
+                }
+            }
+        }
+
+        // check if step matches
+        var matchedResult = null;
+        var matchingStepDoc = null;
+        {
+            var lastStepType = stepBodyToken.state.lastStepType;
+            storyController.debug("lastStepType - " + lastStepType);
+
+            var stepDocs = storyController.stepDocs;
+            var stepBody = stepBodyToken.state.stepBody;
+            var stepBodyTrimmed = stepBody.replace(/\s+$/g, ''); // trim trailing whitespace;
+
+            for (var i = 0; i < stepDocs.length; i++) {
+                var stepDoc = stepDocs[i];
+                if (stepDoc.startingWord == lastStepType) {
+                    // try to see if the step docs pattern matches step body
+                    var regExpStr = stepDoc.groupedRegExpPattern;
+                    // replace the (.*) with ([\s\S]*) for javascript version of dotall option
+                    regExpStr = regExpStr.replace("(.*)", "([\\s\\S]*)");
+                    // add start and end chars to match the string exactly
+                    regExpStr = "^" + regExpStr + "$";
+                    storyController.debug("Trying to match the step body against pattern - " + regExpStr);
+                    var regExpPattern = new RegExp(regExpStr);
+                    var matchedResult = regExpPattern.exec(stepBodyTrimmed);
+                    if (matchedResult != null) {
+                        storyController.debug("Step pattern - " + regExpStr + " matches current step body");
+                        matchingStepDoc = stepDoc;
+                        break;
+                    }
+                }
+            }
+        }
+
+        // obtain boundaries of any parameters
+        var parameterGroupsInfos = [];
+        {
+            if (matchedResult != null) {
+                var parameterGroups = matchingStepDoc.parameterGroups;
+                if (parameterGroups.length > 0) {
+                    var pos = 0;
+                    var lineOffset = 0;
+                    for (var j = 1; j < matchedResult.length; j++) {
+                        var matchedGroup = matchedResult[j];
+                        if (parameterGroups.indexOf(j) > -1) {
+                            var pgi = new Object();
+                            pgi.number = j;
+                            pgi.text = matchedGroup;
+                            pgi.startIndex = pos;
+                            pgi.endIndex = pos + matchedGroup.length;
+                            pgi.lineOffset = lineOffset;
+                            parameterGroupsInfos.push(pgi);
+                        }
+                        pos += matchedGroup.length;
+                        var linesInGroup = matchedGroup.split(/\n/).length;
+                        if (linesInGroup > 1) {
+                            lineOffset += linesInGroup;
+                        }
+                    }
+                }
+            }
+        }
+
+        // obtain start and end indexes of parameters in terms of line number and ch position
+        {
+            if (matchedResult != null && parameterGroupsInfos.length > 0) {
+                var startingWord = stepBodyToken.state.stepStartingKeyword;
+                var stepStartLine = stepBodyToken.state.lastStepStartedAt;
+                for (var i = 0; i < parameterGroupsInfos.length; i++) {
+                    var pgi = parameterGroupsInfos[i];
+                    // start
+                    var parameterStartLine = stepStartLine + pgi.lineOffset;
+                    var beforeParam = stepBodyToken.state.stepBody.substring(0, pgi.startIndex);
+                    var lastLineBreakInBefore = beforeParam.lastIndexOf("\n");
+                    var parameterStartLineCh;
+                    if (lastLineBreakInBefore > -1) {
+                        parameterStartLineCh = pgi.startIndex - lastLineBreakInBefore;
+                    } else {
+                        parameterStartLineCh = pgi.startIndex;
+                    }
+                    if (pgi.lineOffset == 0) {
+                        // need to add the length of starting word also
+                        parameterStartLineCh += startingWord.length;
+                    }
+                    pgi.startLine = parameterStartLine;
+                    pgi.startLineCh = parameterStartLineCh;
+                    // end
+                    var parameterEndLine = stepStartLine + pgi.lineOffset + (pgi.text.split("\n").length - 1);
+                    var includingParam = stepBodyToken.state.stepBody.substring(0, pgi.startIndex + pgi.text.length);
+                    var lastLineBreakInIncludingParam = includingParam.lastIndexOf("\n");
+                    var parameterEndLineCh;
+                    if (lastLineBreakInIncludingParam > -1) {
+                        parameterEndLineCh = pgi.startIndex + pgi.text.length - lastLineBreakInIncludingParam;
+                    } else {
+                        parameterEndLineCh = pgi.startIndex + pgi.text.length;
+                    }
+                    if (pgi.lineOffset == 0 && lastLineBreakInIncludingParam == -1) {
+                        // need to add the length of starting word also
+                        parameterEndLineCh += startingWord.length;
+                    }
+                    pgi.endLine = parameterEndLine;
+                    pgi.endLineCh = parameterEndLineCh;
+                }
+            }
+        }
+
+        // mark the step as unmatched / matched
+        var stepStartedAtLine = stepBodyToken.state.lastStepStartedAt;
+        var stepEndedAtLine = stepBodyToken.state.lineNumber;
+        {
+            var from = {line: stepStartedAtLine, ch: 0};
+            var toLineHandle = doc.getLineHandle(stepEndedAtLine);
+            var to = {line: stepEndedAtLine, ch: toLineHandle.text.length};
+            var options = new Object();
+            var marksBefore = doc.findMarks(from, to);
+            if (marksBefore.length > 0) {
+                // always remove any existing marks, so that we include newly edited text in the marked range
+                for (var m = 0; m < marksBefore.length; m++) {
+                    var marks = marksBefore[m];
+                    if (marks.className == "cm-matched-step"
+                        || marks.className == "cm-unmatched-step"
+                        || marks.className == "cm-step-parameter") {
+                        marks.clear();
+                    }
+                }
+            }
+            if (matchedResult != null) {
+                options.className = "cm-matched-step";
+            } else {
+                options.className = "cm-unmatched-step";
+            }
+            doc.markText(from, to, options);
+        }
+
+        // mark parameter boundaries
+        {
+            if (parameterGroupsInfos.length > 0) {
+                for (var k = 0; k < parameterGroupsInfos.length; k++) {
+                    var pgi = parameterGroupsInfos[k];
+                    var paramStart = {line: pgi.startLine, ch: pgi.startLineCh};
+                    var paramEnd = {line: pgi.endLine, ch: pgi.endLineCh};
+                    options.className = "cm-step-parameter";
+                    doc.markText(paramStart, paramEnd, options);
+                }
+            }
+        }
+
+        storyController.debug("# rematchStepSpanningLine");
+    }
+
+
+    this.updateEditedStepStyle_backup = function () {
+
+        storyController.debug("> updateEditedStepStyle");
+
+        var editor = storyController.editor;
+        var cursor = editor.getCursor();
         var line = cursor.line;
         storyController.debug("line being edited - " + line);
 
-        var tokenAt = editor.getTokenAt(cursor, true);
+        var doc = editor.getDoc();
+        var lineHandle = doc.getLineHandle(line);
+
+        var checkTokenPos = {line: line, ch: lineHandle.text.length};
+        var tokenAt = editor.getTokenAt(checkTokenPos, true);
         storyController.debug("tokenAt.type - " + tokenAt.type);
 
-//        if (tokenAt.type == "step-body") {
-        if (tokenAt.state.inStepBody) {
+        if (tokenAt.state.inStep) {
+
             storyController.debug("### modifying step ...");
-            var doc = editor.getDoc();
-            var stepBody = tokenAt.state.stepBodySoFar;
-            storyController.debug("stepBodySoFar - " + stepBody);
+
+            var stepBody = tokenAt.state.stepBody;
+            storyController.debug("stepBody - " + stepBody);
             var inStepBody = true;
             var nextLineNum = cursor.line;
             var stepEndedAtLine = cursor.line;
@@ -159,7 +752,7 @@
                     if (nextToken.type != "step-body") {
                         inStepBody = false;
                     } else {
-                        stepBody = nextToken.state.stepBodySoFar;
+                        stepBody = nextToken.state.stepBody;
                         nextLineNum++;
                         stepEndedAtLine++;
                     }
@@ -210,7 +803,7 @@
 
                                     // work out start and end boundaries in terms of line and line position
                                     // start position
-                                    var beforeParam = step.substring(0, pgi.startIndex);
+                                    var beforeParam = step.substring(0 + lastStepType.length, pgi.startIndex + lastStepType.length);
                                     var numOfLinesInBefore = beforeParam.split(/\n/).length;
                                     var startAtLine = lastStepStartedAt + (numOfLinesInBefore - 1);
                                     pgi.startAtLine = startAtLine;
@@ -220,7 +813,7 @@
                                     }
                                     pgi.startAtLineCh = pgi.startIndex - lastLineBreakPos;
                                     // end position
-                                    var includingParam = step.substring(0, (pgi.startIndex + matchedGroup.length));
+                                    var includingParam = step.substring(0 + lastStepType.length, (pgi.startIndex + matchedGroup.length + lastStepType.length));
                                     var numOfLinesInIncludingParam = includingParam.split(/\n/).length;
                                     var endAtLine = lastStepStartedAt + (numOfLinesInIncludingParam - 1);
                                     pgi.endAtLine = endAtLine;
@@ -340,15 +933,25 @@
         this.debug("> showStory");
 
         this.currentStory = storyModel;
-        this.editor.off("change", storyController.onEditorChangeHandler);
+
+//        this.editor.off("change", storyController.onEditorChangeHandler);
         this.editor.setValue(storyModel.asString);
-        this.editor.on("change", storyController.onEditorChangeHandler);
+//        this.editor.on("change", storyController.onEditorChangeHandler);
+
         storyController.storyChanged = false;
 
         this.editor.setOption("readOnly", false);
 
         this.debug("# showStory");
 
+        // rescan step matching
+        var firstStepStartingLine = this.findStepStartingLineAfter(-1);
+        if (firstStepStartingLine != -1) {
+            var lastStepStartingLine = this.findStepStartingLineBefore(this.editor.lineCount());
+            var lastStepEndingLine = this.findLastStepLineFrom(lastStepStartingLine);
+            this.remarkStepsBetween(firstStepStartingLine, lastStepEndingLine);
+        }
+
         if (storyModel.version != null) {
             // this is NOT a new story, so check and show any story reports
             var projectKey = storyModel.projectKey;
@@ -379,7 +982,7 @@
 
         var templateParam = new Object();
         templateParam.storyTestReports = storyTestReports;
-        templateParam.currentStoryVersion = this.currentStory.version;
+        templateParam.currentStoryVersion = storyController.currentStory.version;
 
         var storyReportsContent = execspec.viewissuepage.showstoryreports.renderStoryReports(templateParam);
 
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(date 1406793811000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(revision )
@@ -27,6 +27,10 @@
     "use strict";
 
     CodeMirror.defineMode("jbehave", function () {
+
+        var sc = null;
+        var stepDocs = null;
+
         return {
             lineComment: "!--",
             tableLineComment: "|--",
@@ -34,7 +38,7 @@
 //                console.log("### on blankLine");
                 state.lineNumber++;
                 if (state.inStep) {
-                    state.stepBodySoFar += "\n";
+                    state.stepBody += "\n";
                 }
             },
             startState: function () {
@@ -62,11 +66,24 @@
                     lastStepType: null,
                     lastStepStartedAt: null,
 
+                    currentStepNumber: 0,
+
+                    stepStartingKeyword: null,
+                    stepBody: null,
+
                     lastTokenType: null,
-                    stepBodySoFar: null
+
+                    inStep: false
+
                 };
             },
             token: function (stream, state) {
+
+                if (sc == null) {
+                    sc = storyController;
+                    stepDocs = sc.stepDocs;
+                }
+
                 if (stream.sol()) {
                     state.lineNumber++;
 
@@ -159,16 +176,24 @@
 
                     // GIVEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(Given )/)) {
+
                     state.lastStepType = "Given";
+                    state.stepStartingKeyword = "Given "; //TODO
                     state.allowAndStep = true;
                     state.inStep = true;
                     state.stepNumber++;
-                    state.stepBodySoFar = "";
+                    state.stepBody = "";
                     state.lastStepStartedAt = state.lineNumber;
 
                     state.inStepBody = false;
                     state.stepBodyStartedAtCh = null;
 
+                    state.currentStepNumber++;
+
+                    var doc = storyController.editor.getDoc();
+
+                    doc.getLineHandle(state.lineNumber);
+
                     return state.lastTokenType = "step-keyword given-step";
 
                     // WHEN
@@ -177,39 +202,50 @@
                     state.inStep = true;
                     state.allowAndStep = true;
                     state.lastStepType = "When";
+                    state.stepStartingKeyword = "When "; //TODO
                     state.stepNumber++;
-                    state.stepBodySoFar = "";
+                    state.stepBody = "";
                     state.lastStepStartedAt = state.lineNumber;
 
                     state.inStepBody = false;
                     state.stepBodyStartedAtCh = null;
 
+                    state.currentStepNumber++;
+
                     return state.lastTokenType = "step-keyword when-step";
 
                     // THEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(Then )/)) {
                     state.lastStepType = "Then";
+                    state.stepStartingKeyword = "Then "; //TODO
+
                     state.allowAndStep = true;
                     state.inStep = true;
                     state.stepNumber++;
-                    state.stepBodySoFar = "";
+                    state.stepBody = "";
                     state.lastStepStartedAt = state.lineNumber;
 
                     state.inStepBody = false;
                     state.stepBodyStartedAtCh = null;
 
+                    state.currentStepNumber++;
+
                     return state.lastTokenType = "step-keyword then-step";
 
                     // AND
                 } else if (state.allowAndStep && stream.sol() && stream.match(/(And )/)) {
                     state.inStep = true;
                     state.stepNumber++;
-                    state.stepBodySoFar = "";
+                    state.stepBody = "";
                     state.lastStepStartedAt = state.lineNumber;
+                    state.stepStartingKeyword = "And "; //TODO
 
+
                     state.inStepBody = false;
                     state.stepBodyStartedAtCh = null;
 
+                    state.currentStepNumber++;
+
                     return state.lastTokenType = "step-keyword " + state.lastStepType + "-step";
 
                     // Description
@@ -218,17 +254,62 @@
                     return state.lastTokenType = "description-line";
 
                     // Step body
-                } else if (state.inStep && stream.match(/(.*)/, false)) {
+                } else if (state.inStep && stream.match(/(.*)/)) {
 
                     if (state.inStepBody == false) {
                         // this is the first line of the step
                         state.inStepBody = true;
-                        state.stepBodyStartedAtCh = stream.column();
+                        state.stepBodyStartedAtCh = stream.column() - stream.current().length;
                     }
-                    stream.match(/(.*)/);
 
-                    state.stepBodySoFar += stream.current() + "\n";
-                    console.log("stepBodySoFar - " + state.stepBodySoFar);
+                    state.stepBody += stream.current() + "\n";
+
+                    var stepBody = state.stepBody;
+                    console.log("stepBody - " + stepBody);
+
+//                    // look ahead for full step body
+//                    var editor = storyController.editor;
+//                    var isCurrentStepLine = true;
+//                    var lineNumberToCheck = state.lineNumber;
+//                    var remainingStepBody = "";
+//                    while (isCurrentStepLine) {
+//                        lineToCheck++;
+//                        var lineToCheck = editor.getLineHandle(lineNumberToCheck);
+//                        if (lineToCheck == null) {
+//                            // we are at the end of the document
+//                            break;
+//                        } else {
+//                            var lineText = lineToCheck.text;
+//                            if (lineText.substr(0, "Given ".length) == "Given ") {
+//                                isCurrentStepLine = false;
+//                                break;
+//                            } else {
+//                                remainingStepBody += lineText + "\n";
+//                            }
+//                        }
+//                    }
+//
+//                    var fullStepBody = stepBody + remainingStepBody;
+//                    console.log("### fullStepBody - " + fullStepBody);
+
+
+//                    var paramStart = {line: state.lineNumber, ch: 0};
+//                    var paramEnd = {line: state.lineNumber, ch: currentLine.text.length};
+//                    var options = new Object();
+//                    options.className = "step-body-line";
+//
+//                    var marksBefore = editor.getDoc().findMarks(paramStart, paramEnd);
+//
+//                    if (marksBefore.length > 0) {
+//                        // always remove any existing marks, so that we include newly edited text in the marked range
+//                        for (var m = 0; m < marksBefore.length; m++) {
+//                            marksBefore[m].clear();
+//                        }
+//                    }
+//                    editor.getDoc().markText(paramStart, paramEnd, options);
+
+//                    editor.addLineClass({line: state.lineNumber-1, where: "wrap", "class": "step-body-line"});
+
                     return state.lastTokenType = "step-body"
 //                        + "line-step-line"
 //                        + " line-step-number-" + state.stepNumber
@@ -237,7 +318,7 @@
 
                     // Fall through
                 } else {
-                    stream.next();
+                    stream.match(/(.*)/);
 //                    stream.eatWhile(/[^@"<#]/);
                     return null;
                 }
