Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/ScenarioDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/ScenarioDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/ScenarioDTO.java	(date 1407407547000)
@@ -1,110 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-import java.util.List;
-
-/**
- * Created by Dmytro on 5/28/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class ScenarioDTO {
-
-    private String keyword;
-    private String title;
-    private MetaDTO meta;
-    private GivenStoriesDTO givenStories;
-    private ExamplesTableDTO examplesTable;
-    private List<String> steps;
-
-    public String getTitle() {
-        return title;
-    }
-
-    public void setTitle(String title) {
-        this.title = title;
-    }
-
-    public MetaDTO getMeta() {
-        return meta;
-    }
-
-    public void setMeta(MetaDTO meta) {
-        this.meta = meta;
-    }
-
-    public GivenStoriesDTO getGivenStories() {
-        return givenStories;
-    }
-
-    public void setGivenStories(GivenStoriesDTO givenStories) {
-        this.givenStories = givenStories;
-    }
-
-    public ExamplesTableDTO getExamplesTable() {
-        return examplesTable;
-    }
-
-    public void setExamplesTable(ExamplesTableDTO examplesTable) {
-        this.examplesTable = examplesTable;
-    }
-
-    public List<String> getSteps() {
-        return steps;
-    }
-
-    public void setSteps(List<String> steps) {
-        this.steps = steps;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        ScenarioDTO that = (ScenarioDTO) o;
-
-        if (examplesTable != null ? !examplesTable.equals(that.examplesTable) : that.examplesTable != null)
-            return false;
-        if (givenStories != null ? !givenStories.equals(that.givenStories) : that.givenStories != null) return false;
-        if (keyword != null ? !keyword.equals(that.keyword) : that.keyword != null) return false;
-        if (meta != null ? !meta.equals(that.meta) : that.meta != null) return false;
-        if (steps != null ? !steps.equals(that.steps) : that.steps != null) return false;
-        if (title != null ? !title.equals(that.title) : that.title != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = title != null ? title.hashCode() : 0;
-        result = 31 * result + (meta != null ? meta.hashCode() : 0);
-        result = 31 * result + (givenStories != null ? givenStories.hashCode() : 0);
-        result = 31 * result + (examplesTable != null ? examplesTable.hashCode() : 0);
-        result = 31 * result + (steps != null ? steps.hashCode() : 0);
-        result = 31 * result + (keyword != null ? keyword.hashCode() : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "ScenarioDTO{" +
-                "title='" + title + '\'' +
-                ", meta=" + meta +
-                ", givenStories=" + givenStories +
-                ", examplesTable=" + examplesTable +
-                ", steps=" + steps +
-                ", keyword='" + keyword + '\'' +
-                '}';
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword;
-    }
-
-    public String getKeyword() {
-        return keyword;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/MetaDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/MetaDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/MetaDTO.java	(date 1407407547000)
@@ -1,62 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-import java.util.List;
-
-/**
- * Created by Dmytro on 5/28/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class MetaDTO {
-
-    private String keyword;
-
-    private List<MetaEntryDTO> properties;
-
-    public List<MetaEntryDTO> getProperties() {
-        return properties;
-    }
-
-    public void setProperties(List<MetaEntryDTO> properties) {
-        this.properties = properties;
-    }
-
-    public String getKeyword() {
-        return keyword;
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword;
-    }
-
-    @Override
-    public String toString() {
-        return "MetaDTO{" +
-                "keyword='" + keyword + '\'' +
-                ", properties=" + properties +
-                '}';
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        MetaDTO metaDTO = (MetaDTO) o;
-
-        if (keyword != null ? !keyword.equals(metaDTO.keyword) : metaDTO.keyword != null) return false;
-        if (properties != null ? !properties.equals(metaDTO.properties) : metaDTO.properties != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = keyword != null ? keyword.hashCode() : 0;
-        result = 31 * result + (properties != null ? properties.hashCode() : 0);
-        return result;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/customfields/StoryStatusField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/customfields/StoryStatusField.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/customfields/StoryStatusField.java	(revision )
@@ -10,6 +10,9 @@
 import com.mycomp.execspec.jiraplugin.service.StepDocsSerivce;
 import com.mycomp.execspec.jiraplugin.service.StoryReportService;
 import com.mycomp.execspec.jiraplugin.service.StoryService;
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStory;
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStoryHtml;
+import org.bitbucket.jbehaveforjira.javaclient.util.TestStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -51,15 +54,15 @@
         String projectKey = issue.getProjectObject().getKey();
         String issueKey = issue.getKey();
 
-        StoryDTO story = storyService.findByProjectAndIssueKey(projectKey, issueKey);
+        JiraStory story = storyService.findByProjectAndIssueKey(projectKey, issueKey);
 
         if (story != null) {
 
-            List<StoryHtmlReportDTO> storyTestReports = storyReportService.findStoryReports(projectKey, issueKey);
+            List<JiraStoryHtml> storyTestReports = storyReportService.findStoryReports(projectKey, issueKey);
             Map<String, TestStatus> statusesByEnvironment = new HashMap<String, TestStatus>(storyTestReports.size());
             EnvironmentTestStatuses environmentTestStatuses = new EnvironmentTestStatuses(statusesByEnvironment);
 
-            for (StoryHtmlReportDTO storyTestReport : storyTestReports) {
+            for (JiraStoryHtml storyTestReport : storyTestReports) {
                 TestStatus status = storyTestReport.getStatus();
                 String environment = storyTestReport.getEnvironment();
                 statusesByEnvironment.put(environment, status);
\ No newline at end of file
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/rest/AutoCompleteResource.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/rest/AutoCompleteResource.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/rest/AutoCompleteResource.java	(date 1407407547000)
@@ -1,50 +0,0 @@
-package com.mycomp.execspec.jiraplugin.rest;
-
-import com.atlassian.plugins.rest.common.security.AnonymousAllowed;
-import com.mycomp.execspec.jiraplugin.dto.autocomplete.AutoCompleteDTO;
-import com.mycomp.execspec.jiraplugin.dto.autocomplete.AutoCompletePayload;
-import com.mycomp.execspec.jiraplugin.service.AutoCompleteService;
-import org.apache.commons.lang.Validate;
-
-import javax.ws.rs.POST;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.Produces;
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-import java.util.List;
-
-/**
- * Created by Dmytro on 5/15/2014.
- */
-@Path("/autocomplete")
-public class AutoCompleteResource {
-
-    private AutoCompleteService autoCompleteService;
-
-    public AutoCompleteResource(AutoCompleteService autoCompleteService) {
-        this.autoCompleteService = autoCompleteService;
-    }
-
-    @POST
-    @AnonymousAllowed
-    @Path("/{projectKey}")
-    @Produces(MediaType.APPLICATION_JSON)
-//    @Consumes(MediaType.APPLICATION_JSON)
-    public Response autoComplete(@PathParam("projectKey") String projectKey, String input) {
-
-        Validate.notNull(input); // we can actually do auto complete for empty input but not null
-
-        List<AutoCompleteDTO> autoCompleteDTOs = autoCompleteService.autoComplete(projectKey, input);
-
-        Response response;
-        if (!autoCompleteDTOs.isEmpty()) {
-            AutoCompletePayload payload = new AutoCompletePayload(autoCompleteDTOs);
-            response = Response.ok(payload, MediaType.APPLICATION_JSON).build();
-        } else {
-            response = Response.noContent().build();
-        }
-        return response;
-    }
-
-}
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryPathFinder.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryPathFinder.java	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryPathFinder.java	(date 1407407547000)
@@ -1,66 +0,0 @@
-package com.mycomp.execspec;
-
-import com.mycomp.execspec.jiraplugin.dto.story.StoryPathsDTO;
-import com.sun.jersey.api.client.Client;
-import com.sun.jersey.api.client.ClientResponse;
-import com.sun.jersey.api.client.WebResource;
-import org.apache.commons.lang.Validate;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Created by Dmytro on 2/17/14.
- */
-public class JiraStoryPathFinder {
-
-    private final Logger log = LoggerFactory.getLogger(getClass());
-
-    public List<String> findPaths(String jiraBaseUrl, String projectKey, List<String> includes, List<String> excludes) {
-
-        Validate.notEmpty(projectKey);
-
-        List<String> paths = new ArrayList<String>();
-
-        URI jiraSearchUrl = null;
-        try {
-            String fullPath = jiraBaseUrl + "/rest/story-res/1.0/find/story-paths/" + projectKey;
-            fullPath += "?os_username=admin&os_password=admin";
-            jiraSearchUrl = new URI(fullPath);
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
-
-        Client client = Client.create();
-        WebResource res = client.resource(jiraSearchUrl);
-        res.type(MediaType.APPLICATION_JSON);
-//        res.type(MediaType.TEXT_PLAIN);
-        ClientResponse response = res.get(ClientResponse.class);
-        log.info("response - " + response);
-        if (response.getStatus() == 200) {
-
-            int length = response.getLength();
-            MediaType type = response.getType();
-            StoryPathsDTO storyPaths = response.getEntity(StoryPathsDTO.class);
-
-            if (storyPaths.getPaths() != null && !storyPaths.getPaths().isEmpty()) {
-                paths = storyPaths.getPaths();
-            }
-
-        } else {
-            int status = response.getStatus();
-            Response.StatusType statusInfo = response.getStatusInfo();
-            throw new RuntimeException("Error occurred while trying to find Jira story paths. " +
-                    "Response status was - " + status + ", status info - " + statusInfo);
-        }
-
-        return paths;
-    }
-
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryReportServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryReportServiceImpl.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryReportServiceImpl.java	(revision )
@@ -7,6 +7,7 @@
 import com.mycomp.execspec.jiraplugin.ao.testreport.StoryHtmlReport;
 import com.mycomp.execspec.jiraplugin.ao.testreport.StoryReportDao;
 import com.mycomp.execspec.jiraplugin.dto.storyreport.StoryReportDTOUtils;
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStoryHtml;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -29,7 +30,7 @@
         this.storyReportDao = storyReportDao;
     }
 
-    public void addStoryTestReport(String projectKey, String issueKey, StoryHtmlReportDTO storyReportDTO) {
+    public void addStoryTestReport(String projectKey, String issueKey, JiraStoryHtml storyReportDTO) {
 
         List<Story> byIssueKey = storyDao.findByProjectAndIssueKey(projectKey, issueKey);
         if (byIssueKey.isEmpty()) {
@@ -65,7 +66,7 @@
     }
 
     @Override
-    public List<StoryHtmlReportDTO> findStoryReports(String projectKey, String issueKey) {
+    public List<JiraStoryHtml> findStoryReports(String projectKey, String issueKey) {
         List<Story> byIssueKey = storyDao.findByProjectAndIssueKey(projectKey, issueKey);
         if (byIssueKey.isEmpty()) {
             return Collections.emptyList();
@@ -79,9 +80,9 @@
                 // createStoryReport a new report
                 return Collections.emptyList();
             } else {
-                List<StoryHtmlReportDTO> storyReportDTOs = new ArrayList<StoryHtmlReportDTO>(storyTestReports.length);
+                List<JiraStoryHtml> storyReportDTOs = new ArrayList<JiraStoryHtml>(storyTestReports.length);
                 for (StoryHtmlReport storyTestReport : storyTestReports) {
-                    StoryHtmlReportDTO storyReportDTO = StoryReportDTOUtils.fromModelToDTO(storyTestReport);
+                    JiraStoryHtml storyReportDTO = StoryReportDTOUtils.fromModelToDTO(storyTestReport);
                     storyReportDTOs.add(storyReportDTO);
                 }
                 return storyReportDTOs;
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStepDocReporter.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStepDocReporter.java	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStepDocReporter.java	(date 1407407547000)
@@ -1,85 +0,0 @@
-package com.mycomp.execspec;
-
-import com.mycomp.execspec.jiraplugin.dto.stepdoc.StepDocDTO;
-import com.mycomp.execspec.jiraplugin.dto.stepdoc.StepDocsPayload;
-import com.sun.jersey.api.client.Client;
-import com.sun.jersey.api.client.WebResource;
-import org.jbehave.core.model.StepPattern;
-import org.jbehave.core.parsers.RegexPrefixCapturingPatternParser;
-import org.jbehave.core.parsers.StepMatcher;
-import org.jbehave.core.reporters.StepdocReporter;
-import org.jbehave.core.steps.StepType;
-import org.jbehave.core.steps.Stepdoc;
-
-import javax.ws.rs.core.MediaType;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Created by Dmytro on 2/26/14.
- */
-public class JiraStepDocReporter implements StepdocReporter {
-
-    private final String jiraBaseUrl;
-    private final String jiraProject;
-
-    private String createStepDocsPath = "rest/story-res/1.0/step-doc/add";
-
-    private RegexPrefixCapturingPatternParser patternParser;
-
-    public JiraStepDocReporter(String jiraBaseUrl, String jiraProject) {
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.jiraProject = jiraProject;
-        patternParser = new RegexPrefixCapturingPatternParser();
-    }
-
-    @Override
-    public void stepdocs(List<Stepdoc> stepdocs, List<Object> stepsInstances) {
-
-//        List<StepCandidate> stepCandidates = candidateSteps.get(0).listCandidates();
-        System.out.println("stepdocs, stepdocs - " + stepdocs + ", stepsInstances - " + stepsInstances);
-
-        List<StepDocDTO> stepDocDTOs = new ArrayList<StepDocDTO>(stepdocs.size());
-
-        for (Stepdoc stepdoc : stepdocs) {
-
-            String pattern = stepdoc.getPattern();
-            StepType stepType = stepdoc.getStepType();
-            String startingWord = stepdoc.getStartingWord();
-
-            StepMatcher stepMatcher = patternParser.parseStep(stepType, pattern);
-            StepPattern stepPattern = stepMatcher.pattern();
-            String regExpPattern = stepPattern.resolved();
-            StepDocDTO stepDocDTO = new StepDocDTO(stepType, startingWord, pattern, regExpPattern, null, null);
-            stepDocDTOs.add(stepDocDTO);
-        }
-
-        StepDocsPayload stepDocsPayload = new StepDocsPayload(stepDocDTOs);
-        sendStepDocs(stepDocsPayload);
-    }
-
-    private void sendStepDocs(StepDocsPayload stepDocsPayload) {
-
-        String loginParams = "?os_username=admin&os_password=admin";
-        String postUrl = jiraBaseUrl
-                + "/" + createStepDocsPath + "/"
-                + jiraProject
-                + loginParams;
-
-        Client client = Client.create();
-        WebResource res = client.resource(postUrl);
-
-        String response = res.accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .post(String.class, stepDocsPayload);
-
-        System.out.println("response - " + response);
-
-    }
-
-    @Override
-    public void stepdocsMatching(String stepAsString, List<Stepdoc> matching, List<Object> stepsIntances) {
-        System.out.println("stepdocsMatching, stepAsString - " + stepAsString + ", matching - " + matching
-                + ", stepInstances - " + stepsIntances);
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/stepdoc/StepDocDTOUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/stepdoc/StepDocDTOUtils.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/stepdoc/StepDocDTOUtils.java	(revision )
@@ -1,7 +1,6 @@
 package com.mycomp.execspec.jiraplugin.dto.stepdoc;
 
 import com.mycomp.execspec.jiraplugin.ao.stepdoc.StepDoc;
-import org.jbehave.core.steps.StepType;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -14,10 +13,9 @@
 
     public static void fromDTOToModel(StepDocDTO stepDocDTO, StepDoc stepDoc) {
 
-        stepDoc.setStepType(stepDocDTO.getStepType().name());
         stepDoc.setStartingWord(stepDocDTO.getStartingWord());
         stepDoc.setPattern(stepDocDTO.getPattern());
-        stepDoc.setRegExpPattern(stepDocDTO.getRegExpPattern());
+        stepDoc.setRegExpPattern(stepDocDTO.getResolvedPattern());
         stepDoc.setGroupedRegExpPattern(stepDocDTO.getGroupedRegExpPattern());
 
         List<Integer> parameterGroups = stepDocDTO.getParameterGroups();
@@ -37,7 +35,6 @@
 
     public static StepDocDTO fromModelToDTO(StepDoc stepDoc) {
 
-        StepType stepType = StepType.valueOf(stepDoc.getStepType());
         String startingWord = stepDoc.getStartingWord();
         String pattern = stepDoc.getPattern();
         String regExpPattern = stepDoc.getRegExpPattern();
@@ -55,7 +52,7 @@
             parameterGroups = Collections.emptyList();
         }
 
-        StepDocDTO stepDocDTO = new StepDocDTO(stepType, startingWord, pattern, regExpPattern, groupedRegExpPattern, parameterGroups);
+        StepDocDTO stepDocDTO = new StepDocDTO(startingWord, pattern, regExpPattern, groupedRegExpPattern, parameterGroups);
         return stepDocDTO;
     }
 
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/GivenStoriesDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/GivenStoriesDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/GivenStoriesDTO.java	(date 1407407547000)
@@ -1,62 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-import java.util.List;
-
-/**
- * Created by Dmytro on 5/28/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class GivenStoriesDTO {
-
-    private String keyword;
-
-    private List<String> paths;
-
-    public List<String> getPaths() {
-        return paths;
-    }
-
-    public void setPaths(List<String> paths) {
-        this.paths = paths;
-    }
-
-    public String getKeyword() {
-        return keyword;
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword;
-    }
-
-    @Override
-    public String toString() {
-        return "GivenStoriesDTO{" +
-                "keyword='" + keyword + '\'' +
-                ", paths=" + paths +
-                '}';
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        GivenStoriesDTO that = (GivenStoriesDTO) o;
-
-        if (keyword != null ? !keyword.equals(that.keyword) : that.keyword != null) return false;
-        if (paths != null ? !paths.equals(that.paths) : that.paths != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = keyword != null ? keyword.hashCode() : 0;
-        result = 31 * result + (paths != null ? paths.hashCode() : 0);
-        return result;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/rest/StoryTestResource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/rest/StoryTestResource.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/rest/StoryTestResource.java	(revision )
@@ -7,6 +7,7 @@
 import com.mycomp.execspec.jiraplugin.service.StoryReportService;
 import com.mycomp.execspec.jiraplugin.service.StoryService;
 import org.apache.commons.lang.Validate;
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStoryHtml;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -56,9 +57,9 @@
             String payload) {
 
         ObjectMapper mapper = new ObjectMapper();
-        JiraStoryHtmlReport storyReportDTO = null;
+        JiraStoryHtml storyReportDTO = null;
         try {
-            storyReportDTO = mapper.readValue(payload, JiraStoryHtmlReport.class);
+            storyReportDTO = mapper.readValue(payload, JiraStoryHtml.class);
         } catch (IOException e) {
             throw new RuntimeException(e);
         }
@@ -95,7 +96,7 @@
             @PathParam("projectKey") String projectKey,
             @PathParam("issueKey") String issueKey) {
 
-        List<JiraStoryHtmlReport> storyTestReports = storyReportService.findStoryReports(projectKey, issueKey);
+        List<JiraStoryHtml> storyTestReports = storyReportService.findStoryReports(projectKey, issueKey);
 
         StoryTestReportsPayload storyTestReportsPayloadDTO = new StoryTestReportsPayload(storyTestReports);
         return storyTestReportsPayloadDTO;
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/storyreport/StoryTestReportsPayload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/storyreport/StoryTestReportsPayload.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/storyreport/StoryTestReportsPayload.java	(revision )
@@ -1,5 +1,7 @@
 package com.mycomp.execspec.jiraplugin.dto.storyreport;
 
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStoryHtml;
+
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlRootElement;
@@ -12,16 +14,16 @@
 @XmlAccessorType(XmlAccessType.FIELD)
 public class StoryTestReportsPayload {
 
-    private List<JiraStoryHtmlReport> storyTestReports;
+    private List<JiraStoryHtml> storyTestReports;
 
     protected StoryTestReportsPayload() {
     }
 
-    public StoryTestReportsPayload(List<JiraStoryHtmlReport> storyTestReports) {
+    public StoryTestReportsPayload(List<JiraStoryHtml> storyTestReports) {
         this.storyTestReports = storyTestReports;
     }
 
-    public List<JiraStoryHtmlReport> getStoryTestReports() {
+    public List<JiraStoryHtml> getStoryTestReports() {
         return storyTestReports;
     }
 }
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/ExamplesTableDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/ExamplesTableDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/ExamplesTableDTO.java	(date 1407407547000)
@@ -1,65 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-import java.util.List;
-
-/**
- * Created by Dmytro on 5/30/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class ExamplesTableDTO {
-
-    private List<String> headers;
-
-    private List<TableRowDTO> rows;
-
-    public ExamplesTableDTO() {
-    }
-
-    public List<String> getHeaders() {
-        return headers;
-    }
-
-    public void setHeaders(List<String> headers) {
-        this.headers = headers;
-    }
-
-    public List<TableRowDTO> getRows() {
-        return rows;
-    }
-
-    public void setRows(List<TableRowDTO> rows) {
-        this.rows = rows;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        ExamplesTableDTO that = (ExamplesTableDTO) o;
-
-        if (headers != null ? !headers.equals(that.headers) : that.headers != null) return false;
-        if (rows != null ? !rows.equals(that.rows) : that.rows != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = headers != null ? headers.hashCode() : 0;
-        result = 31 * result + (rows != null ? rows.hashCode() : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "ExamplesTableDTO{" +
-                "headers=" + headers +
-                ", rows=" + rows +
-                '}';
-    }
-}
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryLoader.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryLoader.java	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraStoryLoader.java	(date 1407407547000)
@@ -1,107 +0,0 @@
-package com.mycomp.execspec;
-
-import com.mycomp.execspec.jiraplugin.dto.story.StoryDTO;
-import com.sun.jersey.api.client.Client;
-import com.sun.jersey.api.client.ClientResponse;
-import com.sun.jersey.api.client.WebResource;
-import org.jbehave.core.io.StoryLoader;
-import org.jbehave.core.parsers.StoryParser;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.net.URI;
-import java.net.URISyntaxException;
-
-/**
- * Created by Dmytro on 2/25/14.
- */
-public class JiraStoryLoader implements StoryLoader {
-
-    private final Logger log = LoggerFactory.getLogger(getClass());
-
-    private String jiraBaseUrl;
-
-    private String downloadedStoriesDir = "src/test/resources/jira_stories";
-
-    //    private String loadStoryPath = "rest/story-res/1.0/find/as-string";
-    private String loadStoryPath = "rest/story-res/1.0/find/for-path";
-
-    private final StoryParser parser;
-
-    public JiraStoryLoader(StoryParser parser) {
-        this.parser = parser;
-    }
-
-    @Override
-    public String loadStoryAsText(String storyPath) {
-
-        URI jiraSearchUrl = null;
-        try {
-            String fullPath = jiraBaseUrl + "/" + loadStoryPath + "/" + storyPath;
-            fullPath += "?os_username=admin&os_password=admin&versionInPath=true";
-            log.debug("full story path is - " + fullPath);
-            jiraSearchUrl = new URI(fullPath);
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
-
-        Client client = Client.create();
-        WebResource res = client.resource(jiraSearchUrl);
-        ClientResponse response = res.type(MediaType.APPLICATION_JSON).get(ClientResponse.class);
-
-        log.info("response - " + response);
-
-        if (response.getStatus() == 200) {
-            StoryDTO storyDTO = response.getEntity(StoryDTO.class);
-            return storyDTO.getAsString();
-        } else {
-            int status = response.getStatus();
-            Response.StatusType statusInfo = response.getStatusInfo();
-            throw new RuntimeException("Error occurred while trying to find Jira story paths. " +
-                    "Response status was - " + status + ", status info - " + statusInfo);
-        }
-
-    }
-
-    private void writeModelToFile(String storyPath, String storyModel) {
-
-        PrintWriter pw = null;
-        try {
-            File storiesDir = new File(downloadedStoriesDir);
-            File outFile = new File(storiesDir, storyPath);
-            outFile.getParentFile().mkdirs();
-            FileWriter fw = new FileWriter(outFile.getAbsoluteFile());
-            pw = new PrintWriter(fw);
-
-            // we need to insert jira story version as a meta tag into the story
-            // the meta section may exist - in this case we add an extra attribute
-            // if meta section doesn't exist - we create it and create one attribute containing our version
-
-
-            pw.print(storyModel);
-
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        } finally {
-            if (pw != null) {
-                pw.close();
-            }
-        }
-
-    }
-
-    public String getJiraBaseUrl() {
-        return jiraBaseUrl;
-    }
-
-    public void setJiraBaseUrl(String jiraBaseUrl) {
-        this.jiraBaseUrl = jiraBaseUrl;
-    }
-
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/LifecycleDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/LifecycleDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/LifecycleDTO.java	(date 1407407547000)
@@ -1,76 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Created by Dmytro on 5/28/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class LifecycleDTO {
-
-    private String keyword;
-
-    private List<String> beforeSteps = new ArrayList<String>();
-
-    private List<String> afterSteps = new ArrayList<String>();
-
-    public List<String> getBeforeSteps() {
-        return beforeSteps;
-    }
-
-    public void setBeforeSteps(List<String> beforeSteps) {
-        this.beforeSteps = beforeSteps;
-    }
-
-    public List<String> getAfterSteps() {
-        return afterSteps;
-    }
-
-    public void setAfterSteps(List<String> afterSteps) {
-        this.afterSteps = afterSteps;
-    }
-
-    public String getKeyword() {
-        return keyword;
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword;
-    }
-
-    @Override
-    public String toString() {
-        return "LifecycleDTO{" +
-                "keyword='" + keyword + '\'' +
-                ", beforeSteps=" + beforeSteps +
-                ", afterSteps=" + afterSteps +
-                '}';
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        LifecycleDTO that = (LifecycleDTO) o;
-
-        if (afterSteps != null ? !afterSteps.equals(that.afterSteps) : that.afterSteps != null) return false;
-        if (beforeSteps != null ? !beforeSteps.equals(that.beforeSteps) : that.beforeSteps != null) return false;
-        if (keyword != null ? !keyword.equals(that.keyword) : that.keyword != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = keyword != null ? keyword.hashCode() : 0;
-        result = 31 * result + (beforeSteps != null ? beforeSteps.hashCode() : 0);
-        result = 31 * result + (afterSteps != null ? afterSteps.hashCode() : 0);
-        return result;
-    }
-}
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/DefaultHTMLFormatPatterns.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/DefaultHTMLFormatPatterns.java	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/DefaultHTMLFormatPatterns.java	(date 1407407547000)
@@ -1,103 +0,0 @@
-package com.mycomp.execspec.util;
-
-import java.util.Properties;
-
-/**
- * Created by Dmytro on 4/29/2014.
- */
-@Deprecated
-public class DefaultHTMLFormatPatterns {
-
-    public Properties getPatterns() {
-        return patterns;
-    }
-
-    private final Properties patterns;
-
-    public DefaultHTMLFormatPatterns() {
-
-        patterns = new Properties();
-        patterns.setProperty("dryRun", "<div class=\"dryRun\">{0}</div>\n");
-
-//        patterns.setProperty("beforeStory", "<div class=\"story\">\n<h1>{0}</h1>\n<div class=\"path\">{1}</div>\n");
-        patterns.setProperty("beforeStory", "<div class=\"story\">\n");
-
-//        patterns.setProperty("beforeStory", "<div class=\"story\">\n");
-        patterns.setProperty("afterStory", "</div>\n");
-
-        patterns.setProperty("storyCancelled", "<div class=\"cancelled\">{0} ({1} {2} s)</div>\n");
-        patterns.setProperty("pendingMethod", "<div><pre class=\"pending\">{0}</pre></div>\n");
-        patterns.setProperty("metaStart", "<div class=\"meta\">\n<div class=\"keyword\">{0}</div>\n");
-        patterns.setProperty("metaProperty", "<div class=\"property\">{0}{1} {2}</div>\n");
-        patterns.setProperty("metaEnd", "</div>\n");
-        patterns.setProperty("filter", "<div class=\"filter\">{0}</div>\n");
-
-//        patterns.setProperty("narrative", "<div class=\"narrative\"><h2>{0}</h2>\n<div class=\"element inOrderTo\"><span class=\"keyword inOrderTo\">{1}</span> {2}</div>\n<div class=\"element asA\"><span class=\"keyword asA\">{3}</span> {4}</div>\n<div class=\"element iWantTo\"><span class=\"keyword iWantTo\">{5}</span> {6}</div>\n</div>\n");
-        patterns.setProperty("narrative",
-                "<div class=\"beforeNarrative\"><span>&nbsp;</span><span style=\"display: none;\" class=\"beforeNarrativeHint\">+<span></div>" +
-                        "<div class=\"narrative\">" +
-                        "<div class=\"label\">" +
-                        "{0}</div>\n" +
-                        "<div contentEditable=\"false\" class=\"element inOrderTo\">" +
-                        "<div style=\"display: none;\" class=\"add-icon\">+</div>" +
-                        "<span contentEditable=\"false\" class=\"keyword inOrderTo inOrderToSpan\">{1}</span> <span></span></div>\n" +
-
-                        "<div class=\"element asA\"><span class=\"keyword asA\">{3}</span> {4}</div>\n" +
-                        "<div class=\"element iWantTo\"><span class=\"keyword iWantTo\">{5}</span> {6}</div>\n" +
-                        "</div>\n"
-        );
-
-        patterns.setProperty("lifecycleStart", "<div class=\"lifecycle\"><h2>{0}</h2>");
-        patterns.setProperty("lifecycleEnd", "</div>");
-        patterns.setProperty("lifecycleBeforeStart", "<div class=\"before\"><h3>{0}</h3>");
-        patterns.setProperty("lifecycleBeforeEnd", "</div>");
-        patterns.setProperty("lifecycleAfterStart", "<div class=\"after\"><h3>{0}</h3>");
-        patterns.setProperty("lifecycleAfterEnd", "</div>");
-        patterns.setProperty("lifecycleStep", "<div class=\"step\">{0}</div>\n");
-
-//        patterns.setProperty("beforeScenario", "<div class=\"scenario\">\n<h2>{0} {1}</h2>\n");
-        patterns.setProperty("beforeScenario", "<div class=\"scenario\">\n<div class=\"scenario-title\"><span class=\"scenario-plus aui-icon aui-icon-small aui-iconfont-add\"></span><span class=\"label\">{0}</span> <span class=\"title\">{1}</span></div>\n");
-
-        patterns.setProperty("afterScenario", "</div>\n");
-        patterns.setProperty("afterScenarioWithFailure", "<pre class=\"failure\">{0}</pre>\n</div>\n");
-        patterns.setProperty("givenStories", "<div class=\"givenStories\">{0} {1}</div>\n");
-        patterns.setProperty("givenStoriesStart", "<div class=\"givenStories\">{0}\n");
-        patterns.setProperty("givenStory", "<div class=\"givenStory\">{0} {1}</div>\n");
-        patterns.setProperty("givenStoriesEnd", "</div>\n");
-
-        patterns.setProperty("successful", "<div class=\"step successful\">{0}</div>\n");
-        patterns.setProperty("ignorable", "<div class=\"step ignorable\">{0}</div>\n");
-        patterns.setProperty("pending", "<div class=\"step pending\"><span class=\"aui-icon aui-icon-small aui-iconfont-add\"></span>{0} <span class=\"keyword pending\">({1})</span></div>\n");
-        patterns.setProperty("notPerformed", "<div class=\"step notPerformed\">{0} <span class=\"keyword notPerformed\">({1})</span></div>\n");
-        patterns.setProperty("failed", "<div class=\"step failed\">{0} <span class=\"keyword failed\">({1})</span><br/><span class=\"message failed\">{2}</span></div>\n");
-        patterns.setProperty("restarted", "<div class=\"step restarted\">{0} <span class=\"message restarted\">{1}</span></div>\n");
-
-        patterns.setProperty("outcomesTableStart", "<div class=\"outcomes\"><table>\n");
-        patterns.setProperty("outcomesTableHeadStart", "<thead>\n<tr>\n");
-        patterns.setProperty("outcomesTableHeadCell", "<th>{0}</th>");
-        patterns.setProperty("outcomesTableHeadEnd", "</tr>\n</thead>\n");
-        patterns.setProperty("outcomesTableBodyStart", "<tbody>\n");
-        patterns.setProperty("outcomesTableRowStart", "<tr class=\"{0}\">\n");
-        patterns.setProperty("outcomesTableCell", "<td>{0}</td>");
-        patterns.setProperty("outcomesTableRowEnd", "</tr>\n");
-        patterns.setProperty("outcomesTableBodyEnd", "</tbody>\n");
-        patterns.setProperty("outcomesTableEnd", "</table></div>\n");
-        patterns.setProperty("beforeExamples", "<div class=\"examples\">\n<h3>{0}</h3>\n");
-        patterns.setProperty("examplesStep", "<div class=\"step\">{0}</div>\n");
-        patterns.setProperty("afterExamples", "</div>\n");
-        patterns.setProperty("examplesTableStart", "<table>\n");
-        patterns.setProperty("examplesTableHeadStart", "<thead>\n<tr>\n");
-        patterns.setProperty("examplesTableHeadCell", "<th>{0}</th>");
-        patterns.setProperty("examplesTableHeadEnd", "</tr>\n</thead>\n");
-        patterns.setProperty("examplesTableBodyStart", "<tbody>\n");
-        patterns.setProperty("examplesTableRowStart", "<tr>\n");
-        patterns.setProperty("examplesTableCell", "<td>{0}</td>");
-        patterns.setProperty("examplesTableRowEnd", "</tr>\n");
-        patterns.setProperty("examplesTableBodyEnd", "</tbody>\n");
-        patterns.setProperty("examplesTableEnd", "</table>\n");
-        patterns.setProperty("example", "\n<h3 class=\"example\">{0} {1}</h3>\n");
-        patterns.setProperty("parameterValueStart", "<span class=\"step parameter\">");
-        patterns.setProperty("parameterValueEnd", "</span>");
-        patterns.setProperty("parameterValueNewline", "<br/>");
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/NarrativeDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/NarrativeDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/NarrativeDTO.java	(date 1407407547000)
@@ -1,107 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * Created by Dmytro on 5/28/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class NarrativeDTO {
-
-    private String keyword;
-
-    private InOrderToDTO inOrderTo;
-
-    private AsADTO asA;
-
-    private IWantToDTO iWantTo;
-
-    private SoThatDTO soThat;
-
-    public NarrativeDTO() {
-    }
-
-    public NarrativeDTO(String keyword) {
-        this.keyword = keyword;
-    }
-
-    public String getKeyword() {
-        return keyword;
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword;
-    }
-
-    public InOrderToDTO getInOrderTo() {
-        return inOrderTo;
-    }
-
-    public void setInOrderTo(InOrderToDTO inOrderTo) {
-        this.inOrderTo = inOrderTo;
-    }
-
-    public AsADTO getAsA() {
-        return asA;
-    }
-
-    public void setAsA(AsADTO asA) {
-        this.asA = asA;
-    }
-
-    public IWantToDTO getiWantTo() {
-        return iWantTo;
-    }
-
-    public void setiWantTo(IWantToDTO iWantTo) {
-        this.iWantTo = iWantTo;
-    }
-
-    public SoThatDTO getSoThat() {
-        return soThat;
-    }
-
-    public void setSoThat(SoThatDTO soThat) {
-        this.soThat = soThat;
-    }
-
-    @Override
-    public String toString() {
-        return "NarrativeDTO{" +
-                "keyword='" + keyword + '\'' +
-                ", inOrderTo=" + inOrderTo +
-                ", asA=" + asA +
-                ", iWantTo=" + iWantTo +
-                ", soThat=" + soThat +
-                '}';
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        NarrativeDTO that = (NarrativeDTO) o;
-
-        if (asA != null ? !asA.equals(that.asA) : that.asA != null) return false;
-        if (iWantTo != null ? !iWantTo.equals(that.iWantTo) : that.iWantTo != null) return false;
-        if (inOrderTo != null ? !inOrderTo.equals(that.inOrderTo) : that.inOrderTo != null) return false;
-        if (keyword != null ? !keyword.equals(that.keyword) : that.keyword != null) return false;
-        if (soThat != null ? !soThat.equals(that.soThat) : that.soThat != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = keyword != null ? keyword.hashCode() : 0;
-        result = 31 * result + (inOrderTo != null ? inOrderTo.hashCode() : 0);
-        result = 31 * result + (asA != null ? asA.hashCode() : 0);
-        result = 31 * result + (iWantTo != null ? iWantTo.hashCode() : 0);
-        result = 31 * result + (soThat != null ? soThat.hashCode() : 0);
-        return result;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/jbehave-edit.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/jbehave-edit.css	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/css/jbehave-edit.css	(revision )
@@ -41,25 +41,45 @@
 .cm-step-keyword {
     color: #aa5500;
     font-weight: bold;
+    font-style: italic;
 }
 
-.cm-step-keyword.cm-unmatched-step {
-    font-weight: normal;
-    font-style: italic;
+.cm-step-keyword.matched-step {
+    font-style: normal;
 }
 
-.cm-step-body.cm-unmatched-step {
-    font-style: italic;
+/*.hint-step-keyword {*/
+    /*color: #aa5500;*/
     /*font-weight: bold;*/
+    /*font-style: normal;*/
+/*}*/
+
+/*.cm-step-body.cm-matched-step {*/
+    /*font-style: normal;*/
     /*font-weight: bold;*/
-    color: lightslategrey;
+    /*font-weight: bold;*/
+    /*color: lightslategrey;*/
+/*}*/
+
+.cm-step-body {
+    font-style: italic;
 }
 
-.cm-step-body.cm-step-parameter {
+.cm-step-body.matched-step {
+    font-style: normal;
+}
+
+.cm-step-body.matched-step.step-parameter {
     font-weight: bold;
     color: purple;
-    /*color: chocolate;*/
 }
+
+/*.hint-step-parameter {*/
+    /*font-weight: bold;*/
+    /*color: purple;*/
+/*}*/
+
+
 
 /*.cm-unmatched-step {*/
     /*font-style: italic;*/
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/ao/stepdoc/StepDoc.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/ao/stepdoc/StepDoc.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/ao/stepdoc/StepDoc.java	(revision )
@@ -13,10 +13,6 @@
 
     void setProjectKey(String projectKey);
 
-    String getStepType();
-
-    void setStepType(String stepType);
-
     String getStartingWord();
 
     void setStartingWord(String startingWord);
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/IWantToDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/IWantToDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/IWantToDTO.java	(date 1407407547000)
@@ -1,69 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * Created by Dmytro on 6/2/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class IWantToDTO {
-
-    private String keyword;
-
-    private String value;
-
-    public IWantToDTO() {
-    }
-
-    public IWantToDTO(String keyword, String value) {
-        this.keyword = keyword;
-        this.value = value;
-    }
-
-    public String getKeyword() {
-        return keyword;
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword;
-    }
-
-    public String getValue() {
-        return value;
-    }
-
-    public void setValue(String value) {
-        this.value = value;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        IWantToDTO that = (IWantToDTO) o;
-
-        if (keyword != null ? !keyword.equals(that.keyword) : that.keyword != null) return false;
-        if (value != null ? !value.equals(that.value) : that.value != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = keyword != null ? keyword.hashCode() : 0;
-        result = 31 * result + (value != null ? value.hashCode() : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "IWantToDTO{" +
-                "keyword='" + keyword + '\'' +
-                ", value='" + value + '\'' +
-                '}';
-    }
-}
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/BytesListPrintStream.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/BytesListPrintStream.java	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/BytesListPrintStream.java	(date 1407407547000)
@@ -1,38 +0,0 @@
-package com.mycomp.execspec.util;
-
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.PrintStream;
-import java.util.LinkedList;
-import java.util.List;
-
-/**
- * Created by Dmytro on 4/29/2014.
- */
-public class BytesListPrintStream extends PrintStream {
-
-    protected List<Byte> writtenBytes;
-
-    public BytesListPrintStream() {
-        this(new LinkedList<Byte>());
-    }
-
-    private BytesListPrintStream(final List<Byte> bytesList) {
-
-        super(new OutputStream() {
-
-            @Override
-            public void write(int b) throws IOException {
-                bytesList.add((byte) b);
-            }
-
-        });
-
-        writtenBytes = bytesList;
-    }
-
-    public List<Byte> getWrittenBytes() {
-        return writtenBytes;
-    }
-
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(revision )
@@ -75,24 +75,34 @@
 
         var lineTextTrimmed = lineTextSoFar.replace(/\s+$/g, '');
 
-        if (lineTextTrimmed.length > 0) {
+        var stepKeyword = state.currentStepKeyword;
+
+        if (lineTextTrimmed.length > 0 && stepKeyword != null) {
             // hint on steps
             for (var k = 0; k < stepDocs.length; k++) {
                 var stepDoc = stepDocs[k];
-                var stepPatternWithKeyword = stepDoc.startingWord + " " + stepDoc.pattern;
+
+                if (stepDoc.startingWord == stepKeyword) {
+
+                    var stepStartingKeyword = state.stepStartingKeyword;
+
+                    var stepPatternWithKeyword = stepStartingKeyword + stepDoc.pattern;
-                if (stepPatternWithKeyword.substr(0, lineTextSoFar.length) == lineTextSoFar) {
-                    var stepHint = new Object();
-                    stepHint.text = stepPatternWithKeyword;
-                    var pattern = stepDoc.pattern;
+                    if (stepPatternWithKeyword.substr(0, lineTextSoFar.length) == lineTextSoFar) {
+                        var stepHint = new Object();
+                        stepHint.text = stepPatternWithKeyword;
+                        var pattern = stepDoc.pattern;
-                    var regExpPattern = new RegExp("\\$");
-                    pattern = pattern.replace(regExpPattern, "<span class='cm-step-parameter'>@</span>");
+                        var regExpPattern = new RegExp("(\\$[^\\s]*)", "g");
+                        pattern = pattern.replace(regExpPattern, "<span class='cm-step-body matched-step step-parameter'>$1</span>");
+                        stepHint.markedPattern = pattern;
+                        stepHint.stepStartingKeyword = stepStartingKeyword;
-                    stepHint.stepDoc = stepDoc;
-                    stepHint.render = function (element, data, self) {
-                        element.innerHTML =
+                        stepHint.stepDoc = stepDoc;
+                        stepHint.render = function (element, data, self) {
+                            element.innerHTML =
-                            "<span class='cm-step-keyword'>" + self.stepDoc.startingWord + "</span> "
-                                + pattern;
+                                "<span class='cm-step-keyword matched-step'>" + self.stepStartingKeyword + "</span>"
+                                    + self.markedPattern;
-                    };
-                    list.push(stepHint);
+                        };
+                        list.push(stepHint);
+                    }
                 }
             }
         }
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/InOrderToDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/InOrderToDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/InOrderToDTO.java	(date 1407407547000)
@@ -1,69 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * Created by Dmytro on 6/2/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class InOrderToDTO {
-
-    private String keyword;
-
-    private String value;
-
-    public InOrderToDTO() {
-    }
-
-    public InOrderToDTO(String keyword, String value) {
-        this.keyword = keyword;
-        this.value = value;
-    }
-
-    public String getKeyword() {
-        return keyword;
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword;
-    }
-
-    public String getValue() {
-        return value;
-    }
-
-    public void setValue(String value) {
-        this.value = value;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        InOrderToDTO that = (InOrderToDTO) o;
-
-        if (keyword != null ? !keyword.equals(that.keyword) : that.keyword != null) return false;
-        if (value != null ? !value.equals(that.value) : that.value != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = keyword != null ? keyword.hashCode() : 0;
-        result = 31 * result + (value != null ? value.hashCode() : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "InOrderToDTO{" +
-                "keyword='" + keyword + '\'' +
-                ", value='" + value + '\'' +
-                '}';
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/StoryDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/StoryDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/StoryDTO.java	(date 1407407547000)
@@ -1,56 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * DTO class for Story instances.
- *
- * @author stasyukd
- * @since 2.0.0-SNAPSHOT
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class StoryDTO {
-
-    private String issueKey;
-
-    private String projectKey;
-
-    private Long version;
-
-    private String asString;
-
-    public String getIssueKey() {
-        return issueKey;
-    }
-
-    public void setIssueKey(String issueKey) {
-        this.issueKey = issueKey;
-    }
-
-    public String getProjectKey() {
-        return projectKey;
-    }
-
-    public void setProjectKey(String projectKey) {
-        this.projectKey = projectKey;
-    }
-
-    public Long getVersion() {
-        return version;
-    }
-
-    public void setVersion(Long version) {
-        this.version = version;
-    }
-
-    public String getAsString() {
-        return asString;
-    }
-
-    public void setAsString(String asString) {
-        this.asString = asString;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryServiceImpl.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryServiceImpl.java	(revision )
@@ -9,6 +9,7 @@
 import com.mycomp.execspec.jiraplugin.ao.testreport.StoryReportDao;
 import com.mycomp.execspec.jiraplugin.dto.story.StoryDTOUtils;
 import org.apache.commons.lang.Validate;
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -39,7 +40,7 @@
     }
 
     @Override
-    public synchronized StoryDTO saveOrUpdate(StoryDTO storyDTO) {
+    public synchronized JiraStory saveOrUpdate(JiraStory storyDTO) {
 
         String issueKey = storyDTO.getIssueKey();
         User user = authenticationContext.getLoggedInUser();
@@ -74,7 +75,7 @@
         }
     }
 
-    private StoryDTO create(StoryDTO storyDTO, String userName) {
+    private JiraStory create(JiraStory storyDTO, String userName) {
 
 
         final Story story = storyDao.create();
@@ -85,11 +86,11 @@
         story.setLastEditedBy(userName);
         story.save();
 
-        StoryDTO byId = this.findById(story.getID());
+        JiraStory byId = this.findById(story.getID());
         return byId;
     }
 
-    private StoryDTO update(Story story, StoryDTO storyDTO, String userName) {
+    private JiraStory update(Story story, JiraStory storyDTO, String userName) {
 
         long currentVersion = story.getVersion();
         long rolledVersion = currentVersion + 1;
@@ -99,12 +100,12 @@
         story.setLastEditedBy(userName);
         story.save();
 
-        StoryDTO byId = this.findById(story.getID());
+        JiraStory byId = this.findById(story.getID());
         return byId;
     }
 
     @Override
-    public StoryDTO findByProjectAndIssueKey(String projectKey, String issueKey) {
+    public JiraStory findByProjectAndIssueKey(String projectKey, String issueKey) {
 
         List<Story> byIssueKey = storyDao.findByProjectAndIssueKey(projectKey, issueKey);
         if (byIssueKey.isEmpty()) {
@@ -115,19 +116,19 @@
 
             Story story = byIssueKey.get(0);
 
-            StoryDTO storyDTO = StoryDTOUtils.toDTO(story);
+            JiraStory storyDTO = StoryDTOUtils.toDTO(story);
             return storyDTO;
         }
     }
 
     @Override
-    public List<StoryDTO> findByProjectKey(String projectKey) {
+    public List<JiraStory> findByProjectKey(String projectKey) {
 
         List<Story> stories = storyDao.findAll();
 
-        List<StoryDTO> storyDTOs = new ArrayList<StoryDTO>(stories.size());
+        List<JiraStory> storyDTOs = new ArrayList<JiraStory>(stories.size());
         for (Story story : stories) {
-            StoryDTO storyDTO = StoryDTOUtils.toDTO(story);
+            JiraStory storyDTO = StoryDTOUtils.toDTO(story);
             storyDTOs.add(storyDTO);
         }
 
@@ -135,11 +136,11 @@
     }
 
     @Override
-    public StoryDTO findById(int storyId) {
+    public JiraStory findById(int storyId) {
 
         Story story = storyDao.get(storyId);
 
-        StoryDTO storyModel = StoryDTOUtils.toDTO(story);
+        JiraStory storyModel = StoryDTOUtils.toDTO(story);
         return storyModel;
     }
 
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/atlassian-plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/atlassian-plugin.xml	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/atlassian-plugin.xml	(revision )
@@ -44,7 +44,6 @@
         <resource type="download" name="StoryController.js" location="/js/StoryController.js"/>
         <resource type="download" name="StoryModel.js" location="/js/StoryModel.js"/>
         <resource type="download" name="StoryReportModel.js" location="/js/StoryReportModel.js"/>
-        <resource type="download" name="AutoCompleteEntryModel.js" location="/js/AutoCompleteEntryModel.js"/>
         <resource type="download" name="StoryView.js" location="/js/StoryView.js"/>
         <resource type="download" name="StoryEditHandler.js" location="/js/StoryEditHandler.js"/>
         <!--soy-->
@@ -206,8 +205,6 @@
                class="com.mycomp.execspec.jiraplugin.service.StoryReportServiceImpl"/>
     <component key="step-doc-service" name="Step Doc Service"
                class="com.mycomp.execspec.jiraplugin.service.StepDocsServiceImpl"/>
-    <component key="auto-complete-service" name="Auto Complete Service"
-               class="com.mycomp.execspec.jiraplugin.service.AutoCompleteServiceImpl"/>
 
     <!-- ==================================================================================================== -->
     <!--Active Objects-->
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StepDocsServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StepDocsServiceImpl.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StepDocsServiceImpl.java	(revision )
@@ -49,40 +49,40 @@
 
     private void setGroupedPatternOnStepDoc(StepDocDTO stepDocDTO) {
 
-        String regExpPattern = stepDocDTO.getRegExpPattern();
+        String resolvedPattern = stepDocDTO.getResolvedPattern();
         StringBuilder groupedPatternBuilder = new StringBuilder();
         List<Integer> parameterGroups = new ArrayList<Integer>();
 
         int pos = 0;
         int groupCount = 0;
-        int indexOfOpenBrace = regExpPattern.indexOf("(");
+        int indexOfOpenBrace = resolvedPattern.indexOf("(");
         while(indexOfOpenBrace != -1) {
 
             // we want to group everything before that opening brace
             groupedPatternBuilder.append("(");
-            groupedPatternBuilder.append(regExpPattern.substring(pos, indexOfOpenBrace));
+            groupedPatternBuilder.append(resolvedPattern.substring(pos, indexOfOpenBrace));
             groupedPatternBuilder.append(")");
             groupCount++;
 
-            int indexOfCloseBrace = regExpPattern.indexOf(")", indexOfOpenBrace);
-            Validate.isTrue(indexOfCloseBrace != -1, "Failed to find matching closing brace in pattern - " + regExpPattern);
+            int indexOfCloseBrace = resolvedPattern.indexOf(")", indexOfOpenBrace);
+            Validate.isTrue(indexOfCloseBrace != -1, "Failed to find matching closing brace in pattern - " + resolvedPattern);
             pos = indexOfCloseBrace + 1;
-            groupedPatternBuilder.append(regExpPattern.substring(indexOfOpenBrace, pos));
+            groupedPatternBuilder.append(resolvedPattern.substring(indexOfOpenBrace, pos));
             groupCount++;
             parameterGroups.add(groupCount);
 
-            if (pos >= regExpPattern.length()) {
+            if (pos >= resolvedPattern.length()) {
                 // we have reached the end of the pattern
                 break;
             } else {
-                indexOfOpenBrace = regExpPattern.indexOf("(", pos);
+                indexOfOpenBrace = resolvedPattern.indexOf("(", pos);
                 if (indexOfOpenBrace != -1) {
                     // we simply iterate again
                     continue;
                 } else {
                     // there are no more parameter groups so we simply append any string into last group
                     groupedPatternBuilder.append("(");
-                    groupedPatternBuilder.append(regExpPattern.substring(pos));
+                    groupedPatternBuilder.append(resolvedPattern.substring(pos));
                     groupedPatternBuilder.append(")");
                     groupCount++;
                 }
@@ -92,7 +92,7 @@
         String groupedPattern = groupedPatternBuilder.toString();
         if (groupedPattern.isEmpty()) {
             // reg exp pattern did not contain any groups
-            groupedPattern = "(" + regExpPattern + ")";
+            groupedPattern = "(" + resolvedPattern + ")";
         }
         stepDocDTO.setGroupedRegExpPattern(groupedPattern);
         stepDocDTO.setParameterGroups(parameterGroups);
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/CustomHTMLOutput.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/CustomHTMLOutput.java	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/CustomHTMLOutput.java	(date 1407407547000)
@@ -1,43 +0,0 @@
-package com.mycomp.execspec.util;
-
-import org.jbehave.core.configuration.Keywords;
-import org.jbehave.core.reporters.HtmlOutput;
-
-import java.io.PrintStream;
-import java.util.Properties;
-
-/**
- * Created by Dmytro on 4/29/2014.
- */
-@Deprecated
-public class CustomHTMLOutput extends HtmlOutput {
-
-    public CustomHTMLOutput(PrintStream output) {
-        super(output);
-    }
-
-    public CustomHTMLOutput(PrintStream output, Properties outputPatterns) {
-        super(output, outputPatterns);
-    }
-
-    public CustomHTMLOutput(PrintStream output, Keywords keywords) {
-        super(output, keywords);
-    }
-
-    public CustomHTMLOutput(PrintStream output, Properties outputPatterns, Keywords keywords) {
-        super(output, outputPatterns, keywords);
-    }
-
-    public CustomHTMLOutput(PrintStream output, Properties outputPatterns, Keywords keywords, boolean reportFailureTrace) {
-        super(output, outputPatterns, keywords, reportFailureTrace);
-    }
-
-    public CustomHTMLOutput(PrintStream output, Properties outputPatterns, Keywords keywords, boolean reportFailureTrace, boolean compressFailureTrace) {
-        super(output, outputPatterns, keywords, reportFailureTrace, compressFailureTrace);
-    }
-
-    public String escapeHTML(String args) {
-        Object[] escaped = super.escape(Format.HTML, args);
-        return (String) escaped[0];
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/MetaEntryDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/MetaEntryDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/MetaEntryDTO.java	(date 1407407547000)
@@ -1,69 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * Created by Dmytro on 6/13/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class MetaEntryDTO {
-
-    private String name;
-
-    private String value;
-
-    public MetaEntryDTO() {
-    }
-
-    public MetaEntryDTO(String name, String value) {
-        this.name = name;
-        this.value = value;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getValue() {
-        return value;
-    }
-
-    public void setValue(String value) {
-        this.value = value;
-    }
-
-    @Override
-    public String toString() {
-        return "MetaEntryDTO{" +
-                "name='" + name + '\'' +
-                ", value='" + value + '\'' +
-                '}';
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        MetaEntryDTO that = (MetaEntryDTO) o;
-
-        if (name != null ? !name.equals(that.name) : that.name != null) return false;
-        if (value != null ? !value.equals(that.value) : that.value != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = name != null ? name.hashCode() : 0;
-        result = 31 * result + (value != null ? value.hashCode() : 0);
-        return result;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/pom.xml	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/pom.xml	(revision )
@@ -164,7 +164,7 @@
         <dependency>
             <groupId>org.bitbucket.pristrom</groupId>
             <artifactId>jbehave-for-jira-java-client</artifactId>
-            <version>1.0.4-SNAPSHOT</version>
+            <version>1.0.5-SNAPSHOT</version>
         </dependency>
     </dependencies>
 </project>
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/TableRowDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/TableRowDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/TableRowDTO.java	(date 1407407547000)
@@ -1,55 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-import java.util.List;
-
-/**
- * Created by Dmytro on 6/13/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class TableRowDTO {
-
-    private List<String> values;
-
-    public TableRowDTO() {
-    }
-
-    public TableRowDTO(List<String> values) {
-        this.values = values;
-    }
-
-    public List<String> getValues() {
-        return values;
-    }
-
-    public void setValues(List<String> values) {
-        this.values = values;
-    }
-
-    @Override
-    public String toString() {
-        return "TableRow{" +
-                "values=" + values +
-                '}';
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        TableRowDTO tableRow = (TableRowDTO) o;
-
-        if (values != null ? !values.equals(tableRow.values) : tableRow.values != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        return values != null ? values.hashCode() : 0;
-    }
-}
Index: execspec/tests-2-master/example-projects/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/example-projects/pom.xml	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/pom.xml	(revision )
@@ -24,19 +24,6 @@
             <scope>test</scope>
         </dependency>
     </dependencies>
-    <repositories>
-        <repository>
-            <id>sonatype-snapshots</id>
-            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
-            <snapshots>
-                <enabled>true</enabled>
-            </snapshots>
-            <releases>
-                <enabled>true</enabled>
-                <checksumPolicy>warn</checksumPolicy>
-            </releases>
-        </repository>
-    </repositories>
     <build>
         <plugins>
             <plugin>
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/stepdoc/StepDocDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/stepdoc/StepDocDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/stepdoc/StepDocDTO.java	(revision )
@@ -14,17 +14,17 @@
 
     private String startingWord;
     private String pattern;
-    private String regExpPattern;
+    private String resolvedPattern;
     private String groupedRegExpPattern;
     private List<Integer> parameterGroups;
 
     protected StepDocDTO() {
     }
 
-    public StepDocDTO(String startingWord, String pattern, String regExpPattern, String groupedRegExpPattern, List<Integer> parameterGroups) {
+    public StepDocDTO(String startingWord, String pattern, String resolvedPattern, String groupedRegExpPattern, List<Integer> parameterGroups) {
         this.startingWord = startingWord;
         this.pattern = pattern;
-        this.regExpPattern = regExpPattern;
+        this.resolvedPattern = resolvedPattern;
         this.groupedRegExpPattern = groupedRegExpPattern;
         this.parameterGroups = parameterGroups;
     }
@@ -38,8 +38,8 @@
         return pattern;
     }
 
-    public String getRegExpPattern() {
-        return regExpPattern;
+    public String getResolvedPattern() {
+        return resolvedPattern;
     }
 
     public String getGroupedRegExpPattern() {
@@ -63,7 +63,7 @@
         return "StepDocDTO{" +
                 "startingWord='" + startingWord + '\'' +
                 ", pattern='" + pattern + '\'' +
-                ", regExpPattern='" + regExpPattern + '\'' +
+                ", resolvedPattern='" + resolvedPattern + '\'' +
                 ", groupedRegExpPattern='" + groupedRegExpPattern + '\'' +
                 ", parameterGroups=" + parameterGroups +
                 '}';
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/pom.xml	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/pom.xml	(revision )
@@ -105,7 +105,7 @@
         <dependency>
             <groupId>org.bitbucket.pristrom</groupId>
             <artifactId>jbehave-for-jira-java-client</artifactId>
-            <version>1.0.4-SNAPSHOT</version>
+            <version>1.0.5-SNAPSHOT</version>
         </dependency>
         <dependency>
             <groupId>org.jbehave</groupId>
@@ -132,6 +132,22 @@
             <groupId>com.sun.jersey</groupId>
             <artifactId>jersey-json</artifactId>
             <version>1.18</version>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+            <version>1.6.6</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-core</artifactId>
+            <version>1.1.2</version>
+        </dependency>
+        <dependency>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+            <version>1.1.2</version>
         </dependency>
     </dependencies>
 </project>
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/AutoCompleteService.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/AutoCompleteService.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/AutoCompleteService.java	(date 1407407547000)
@@ -1,14 +0,0 @@
-package com.mycomp.execspec.jiraplugin.service;
-
-import com.mycomp.execspec.jiraplugin.dto.autocomplete.AutoCompleteDTO;
-
-import java.util.List;
-
-/**
- * Created by Dmytro on 5/15/2014.
- */
-public interface AutoCompleteService {
-
-    List<AutoCompleteDTO> autoComplete(String projectKey, String input);
-
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryReportService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryReportService.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryReportService.java	(revision )
@@ -1,6 +1,7 @@
 package com.mycomp.execspec.jiraplugin.service;
 
 import com.atlassian.activeobjects.tx.Transactional;
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStoryHtml;
 
 import java.util.List;
 
@@ -10,9 +11,9 @@
 @Transactional
 public interface StoryReportService {
 
-    void addStoryTestReport(String projectKey, String issueKey, StoryHtmlReportDTO storyReportDTO);
+    void addStoryTestReport(String projectKey, String issueKey, JiraStoryHtml storyReportDTO);
 
-    List<StoryHtmlReportDTO> findStoryReports(String projectKey, String issueKey);
+    List<JiraStoryHtml> findStoryReports(String projectKey, String issueKey);
 
     void deleteForIssue(String projectKey, String issueKey);
 }
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/AsADTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/AsADTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/AsADTO.java	(date 1407407547000)
@@ -1,69 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * Created by Dmytro on 6/2/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class AsADTO {
-
-    private String keyword;
-
-    private String value;
-
-    public AsADTO() {
-    }
-
-    public AsADTO(String keyword, String value) {
-        this.keyword = keyword;
-        this.value = value;
-    }
-
-    public String getKeyword() {
-        return keyword;
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword;
-    }
-
-    public String getValue() {
-        return value;
-    }
-
-    public void setValue(String value) {
-        this.value = value;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        AsADTO that = (AsADTO) o;
-
-        if (keyword != null ? !keyword.equals(that.keyword) : that.keyword != null) return false;
-        if (value != null ? !value.equals(that.value) : that.value != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = keyword != null ? keyword.hashCode() : 0;
-        result = 31 * result + (value != null ? value.hashCode() : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "AsADTO{" +
-                "keyword='" + keyword + '\'' +
-                ", value='" + value + '\'' +
-                '}';
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/StoryWithReportsPayload.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/StoryWithReportsPayload.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/StoryWithReportsPayload.java	(date 1407407547000)
@@ -1,49 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import com.mycomp.execspec.jiraplugin.dto.testreport.StoryHtmlReportDTO;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-import java.util.List;
-
-/**
- * TODO - add at least one line of java doc comment.
- *
- * @author stasyukd
- * @since 6.0.0-SNAPSHOT
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class StoryWithReportsPayload {
-
-    private StoryDTO story;
-
-    private List<StoryHtmlReportDTO> testReports;
-
-
-    public StoryWithReportsPayload() {
-    }
-
-    public StoryWithReportsPayload(StoryDTO story, List<StoryHtmlReportDTO> testReports) {
-        this.story = story;
-        this.testReports = testReports;
-    }
-
-    public StoryDTO getStory() {
-        return story;
-    }
-
-    public void setStory(StoryDTO story) {
-        this.story = story;
-    }
-
-    public List<StoryHtmlReportDTO> getTestReports() {
-        return testReports;
-    }
-
-    public void setTestReports(List<StoryHtmlReportDTO> testReports) {
-        this.testReports = testReports;
-    }
-
-}
Index: execspec/tests-2-master/execspec-parent/execspec-maven-plugin/src/main/java/com/mycomp/execspec/mavenplugin/DownloadStoriesFromJira.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-maven-plugin/src/main/java/com/mycomp/execspec/mavenplugin/DownloadStoriesFromJira.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-maven-plugin/src/main/java/com/mycomp/execspec/mavenplugin/DownloadStoriesFromJira.java	(revision )
@@ -16,6 +16,7 @@
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.Parameter;
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStory;
 
 import javax.ws.rs.core.MediaType;
 import java.io.File;
@@ -61,7 +62,7 @@
         getLog().info("response - " + response);
         if (response.getStatus() == 200) {
             StoriesPayload storiesPayload = response.getEntity(StoriesPayload.class);
-            List<StoryDTO> stories = storiesPayload.getStories();
+            List<JiraStory> stories = storiesPayload.getStories();
             getLog().info("stories.size() = " + stories.size());
             getLog().info("stories:\n" + stories);
 
@@ -75,9 +76,9 @@
 
     private void writeModelToFile(StoriesPayload storiesPayload) {
 
-        List<StoryDTO> stories = storiesPayload.getStories();
+        List<JiraStory> stories = storiesPayload.getStories();
 
-        for (StoryDTO storyModel : stories) {
+        for (JiraStory storyModel : stories) {
 
             PrintWriter pw = null;
             try {
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/customfields/EnvironmentTestStatuses.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/customfields/EnvironmentTestStatuses.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/customfields/EnvironmentTestStatuses.java	(revision )
@@ -1,5 +1,7 @@
 package com.mycomp.execspec.jiraplugin.customfields;
 
+import org.bitbucket.jbehaveforjira.javaclient.util.TestStatus;
+
 import java.util.*;
 
 /**
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraHtmlOutput.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraHtmlOutput.java	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/JiraHtmlOutput.java	(date 1407407547000)
@@ -1,341 +0,0 @@
-package com.mycomp.execspec;
-
-import com.mycomp.execspec.jiraplugin.dto.story.StoryDTOUtils;
-import com.mycomp.execspec.jiraplugin.dto.testreport.StoryHtmlReportDTO;
-import com.mycomp.execspec.jiraplugin.dto.testreport.TestStatus;
-import com.mycomp.execspec.util.BytesListPrintStream;
-import com.mycomp.execspec.util.DefaultHTMLFormatPatterns;
-import com.sun.jersey.api.client.Client;
-import com.sun.jersey.api.client.WebResource;
-import org.apache.commons.lang.Validate;
-import org.jbehave.core.configuration.Keywords;
-import org.jbehave.core.i18n.LocalizedKeywords;
-import org.jbehave.core.model.Narrative;
-import org.jbehave.core.model.Scenario;
-import org.jbehave.core.model.Story;
-import org.jbehave.core.reporters.HtmlOutput;
-import org.jbehave.core.steps.StepCreator;
-
-import javax.ws.rs.core.MediaType;
-import java.util.Properties;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-/**
- * Created by Dmytro on 4/15/2014.
- */
-public class JiraHtmlOutput extends HtmlOutput {
-
-    private final BytesListPrintStream printStream;
-
-    private String environment;
-
-    private String jiraBaseUrl;
-
-    private String jiraProject;
-
-    private String addTestReportPath = "rest/story-res/1.0/story-test/add-for-path";
-
-    private String storyPath;
-
-    private Long jiraVersion;
-
-    private TestStatus status;
-
-    private int totalScenarios;
-
-    private int totalScenariosPassed;
-
-    private int totalScenariosFailed;
-
-    private int totalScenariosPending;
-
-    private int totalScenariosIgnored;
-
-    private int totalScenariosNotPerformed;
-
-    private TestStatus currentScenarioStatus;
-
-    public JiraHtmlOutput(String jiraBaseUrl, String jiraProject, String environment) {
-        this(new Properties(), jiraBaseUrl, jiraProject, environment);
-    }
-
-    public JiraHtmlOutput(Properties outputPatterns, String jiraBaseUrl, String jiraProject, String environment) {
-        this(outputPatterns, new LocalizedKeywords(), jiraBaseUrl, jiraProject, environment);
-    }
-
-    public JiraHtmlOutput(Keywords keywords, String jiraBaseUrl, String jiraProject, String environment) {
-        this(new Properties(), keywords, jiraBaseUrl, jiraProject, environment);
-    }
-
-    public JiraHtmlOutput(Properties outputPatterns, Keywords keywords,
-                          String jiraBaseUrl, String jiraProject, String environment) {
-        this(outputPatterns, keywords, false, jiraBaseUrl, jiraProject, environment);
-    }
-
-    public JiraHtmlOutput(Properties outputPatterns,
-                          Keywords keywords, boolean reportFailureTrace,
-                          String jiraBaseUrl, String jiraProject, String environment) {
-        this(new BytesListPrintStream(), outputPatterns, keywords, reportFailureTrace, false,
-                jiraBaseUrl, jiraProject, environment);
-    }
-
-    public JiraHtmlOutput(BytesListPrintStream printStream, Properties outputPatterns,
-                          Keywords keywords, boolean reportFailureTrace,
-                          boolean compressFailureTrace,
-                          String jiraBaseUrl, String jiraProject, String environment) {
-        super(printStream, mergeOverridenPatterns(outputPatterns), keywords, reportFailureTrace, compressFailureTrace);
-        this.printStream = printStream;
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.jiraProject = jiraProject;
-        this.environment = environment;
-    }
-
-    public void narrative(Narrative narrative) {
-        super.narrative(narrative);
-    }
-
-    @Override
-    public void beforeScenario(String title) {
-
-        this.totalScenarios++;
-        this.currentScenarioStatus = TestStatus.PASSED; // assume pass initially
-
-        super.beforeScenario(title);
-    }
-
-    @Override
-    public void afterScenario() {
-
-        super.afterScenario();
-
-        switch (this.currentScenarioStatus) {
-            case PASSED:
-                totalScenariosPassed++;
-                break;
-            case FAILED:
-                totalScenariosFailed++;
-                break;
-            case PENDING:
-                totalScenariosPending++;
-                break;
-            case IGNORED:
-                totalScenariosIgnored++;
-                break;
-            case NOT_PERFORMED:
-                totalScenariosNotPerformed++;
-                break;
-        }
-    }
-
-    @Override
-    public void scenarioNotAllowed(Scenario scenario, String filter) {
-
-        super.scenarioNotAllowed(scenario, filter);
-        if (this.currentScenarioStatus == TestStatus.PASSED /*i.e. if it has not been set to some other status yet*/) {
-            this.currentScenarioStatus = TestStatus.IGNORED;
-        }
-    }
-
-    @Override
-    public void successful(String step) {
-
-        super.successful(step);
-    }
-
-    @Override
-    public void failed(String step, Throwable storyFailure) {
-
-        super.failed(step, storyFailure);
-        this.currentScenarioStatus = TestStatus.FAILED;
-    }
-
-    @Override
-    public void pending(String step) {
-
-        super.pending(step);
-        if (this.currentScenarioStatus != TestStatus.FAILED) { // fail status has priority over pending
-            this.currentScenarioStatus = TestStatus.PENDING;
-        }
-    }
-
-
-    @Override
-    public void beforeStory(Story story, boolean givenStory) {
-
-        this.status = TestStatus.PASSED; // assume passed at start, and then change to other if failed/pending, etc.
-
-        storyPath = story.getPath();
-
-        if (!givenStory && !storyPath.equals("BeforeStories") && !storyPath.equals("AfterStories")) {
-            // extract version
-            String regexPattern = "(.*)\\.([0-9]*)(\\.story)";
-            Pattern p = Pattern.compile(regexPattern);
-            Matcher matcher = p.matcher(storyPath);
-            if (matcher.matches()) {
-                String versionStr = matcher.group(2);
-                jiraVersion = Long.parseLong(versionStr);
-            } else {
-                throw new IllegalArgumentException("Story path must match pattern - " + regexPattern);
-            }
-        }
-
-        super.beforeStory(story, givenStory);
-    }
-
-    @Override
-    public void afterStory(boolean givenStory) {
-
-        super.afterStory(givenStory);
-
-        if (!givenStory && !storyPath.equals("BeforeStories") && !storyPath.equals("AfterStories")) {
-
-            // set story status
-            if (totalScenariosFailed > 0) {
-                this.status = TestStatus.FAILED;
-            } else if (totalScenariosPending > 0) {
-                this.status = TestStatus.PENDING;
-            } else if (totalScenariosIgnored == totalScenarios) {
-                this.status = TestStatus.IGNORED;
-            } else {
-                this.status = TestStatus.PASSED;
-            }
-
-            String storyReport = StoryDTOUtils.bytesListToString(this.printStream.getWrittenBytes());
-            sendStoryReport(storyReport);
-        }
-
-    }
-
-    protected void sendStoryReport(String testReport) {
-
-        Validate.notNull(status);
-        Validate.notEmpty(testReport);
-
-        StoryHtmlReportDTO storyHtmlReportDTO = new StoryHtmlReportDTO(environment, storyPath, jiraVersion, status, testReport);
-
-        storyHtmlReportDTO.setTotalScenarios(totalScenarios);
-        storyHtmlReportDTO.setTotalScenariosPassed(totalScenariosPassed);
-        storyHtmlReportDTO.setTotalScenariosFailed(totalScenariosFailed);
-        storyHtmlReportDTO.setTotalScenariosPending(totalScenariosPending);
-        storyHtmlReportDTO.setTotalScenariosSkipped(totalScenariosIgnored);
-        storyHtmlReportDTO.setTotalScenariosNotPerformed(totalScenariosNotPerformed);
-
-        // remove the version part from story path
-        // extract version
-        String regexPattern = "(.*)\\.([0-9]*)(\\.story)";
-        Pattern p = Pattern.compile(regexPattern);
-        Matcher matcher = p.matcher(storyPath);
-        if (matcher.matches()) {
-            storyPath = matcher.group(1) + matcher.group(3);;
-        } else {
-            throw new IllegalArgumentException("Story path must match pattern - " + regexPattern);
-        }
-
-        String loginParams = "?os_username=admin&os_password=admin";
-        String postUrl = jiraBaseUrl
-                + "/" + addTestReportPath + "/"
-//                + jiraProject + "/"
-                + storyPath
-                + loginParams;
-
-        Client client = Client.create();
-        WebResource res = client.resource(postUrl);
-
-        String response = res.accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .post(String.class, storyHtmlReportDTO);
-
-        System.out.println("response - " + response);
-    }
-
-    @Override
-    protected void print(String text) {
-        text = markTableCorrectly(text);
-        super.print(text);
-    }
-
-    private String markTableCorrectly(String text) {
-
-        if (text.contains("&#9252;")) {
-
-            StringBuilder sb = new StringBuilder();
-            String[] tokens = text.split("\\&#9252;");
-
-            for (int i = 0; i < tokens.length; i++) {
-                String token = tokens[i];
-                boolean isTableStartLine = false;
-                boolean isTableEndLine = false;
-                if (token.startsWith("|")) {
-                    // table line
-                    if (i == 0 || (i != 0 && !tokens[i - 1].startsWith("|"))) {
-                        // if previous line was not a table line then open the table tag
-                        String tableStartMarker = StepCreator.PARAMETER_TABLE_START;
-                        tableStartMarker = (String) escape(Format.HTML, tableStartMarker)[0];
-                        sb.append(tableStartMarker);
-                        sb.append(token);
-                        isTableStartLine = true;
-                    }
-                    if (i == tokens.length - 1 || !tokens[i + 1].startsWith("|")) {
-                        // if this is the last line or the next line is not a table line
-                        String beforePart = token.substring(0, token.lastIndexOf("|") + 1);
-                        sb.append(beforePart);
-                        String tableEndMarker = StepCreator.PARAMETER_TABLE_END;
-                        tableEndMarker = (String) escape(Format.HTML, tableEndMarker)[0];
-                        sb.append(tableEndMarker);
-                        String afterPart = token.substring(token.lastIndexOf("|") + 1);
-                        sb.append(afterPart);
-                        isTableEndLine = true;
-                    }
-                    if (!isTableStartLine && !isTableEndLine) {
-                        // table line that is not first or last line in that table
-                        sb.append(token);
-                    }
-                    if (i != 0 && i != tokens.length - 1) {
-                        sb.append("\n");
-                    }
-                } else {
-                    if (i != 0) {
-                        sb.append("\n");
-                    }
-                    sb.append(token);
-                }
-            }
-
-            String result = sb.toString();
-            return result;
-
-        } else {
-            return text;
-        }
-    }
-
-    private static Properties mergeOverridenPatterns(Properties outputPatterns) {
-        Properties patterns = new DefaultHTMLFormatPatterns().getPatterns();
-        Properties overridenPatterns = overridenPatterns();
-        patterns.putAll(overridenPatterns);
-        patterns.putAll(outputPatterns);
-        return patterns;
-    }
-
-    public static Properties overridenPatterns() {
-
-        Properties patterns = new Properties();
-
-        patterns.setProperty("beforeScenario", "<div class=\"scenario\">\n<div class=\"scenario-title\"><span class=\"label\">{0}</span> <span class=\"title\">{1}</span></div>\n");
-        patterns.setProperty("afterScenario", "</div>\n");
-        patterns.setProperty("afterScenarioWithFailure", "<pre class=\"failure\">{0}</pre>\n</div>\n");
-
-        patterns.setProperty("successful", "<div class=\"step successful\">{0}</div>\n");
-        patterns.setProperty("ignorable", "<div class=\"step ignorable\">{0}</div>\n");
-        patterns.setProperty("pending", "<div class=\"step pending\">{0} <span class=\"keyword pending\">({1})</span></div>\n");
-        patterns.setProperty("notPerformed", "<div class=\"step notPerformed\">{0} <span class=\"keyword notPerformed\">({1})</span></div>\n");
-        patterns.setProperty("failed", "<div class=\"step failed\">{0} <span class=\"keyword failed\">({1})</span><br/><span class=\"message failed\">{2}</span></div>\n");
-        patterns.setProperty("restarted", "<div class=\"step restarted\">{0} <span class=\"message restarted\">{1}</span></div>\n");
-
-        patterns.setProperty("pendingMethod", "");
-
-        return patterns;
-    }
-
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/storyreport/StoryReportDTOUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/storyreport/StoryReportDTOUtils.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/storyreport/StoryReportDTOUtils.java	(revision )
@@ -1,6 +1,7 @@
 package com.mycomp.execspec.jiraplugin.dto.storyreport;
 
 import com.mycomp.execspec.jiraplugin.ao.testreport.StoryHtmlReport;
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStoryHtml;
 import org.bitbucket.jbehaveforjira.javaclient.util.TestStatus;
 
 /**
@@ -8,7 +9,7 @@
  */
 public class StoryReportDTOUtils {
 
-    public static void fromDTOToModel(JiraStoryHtmlReport storyHtmlReportDTO, StoryHtmlReport storyHtmlReport) {
+    public static void fromDTOToModel(JiraStoryHtml storyHtmlReportDTO, StoryHtmlReport storyHtmlReport) {
 
         storyHtmlReport.setStatus(storyHtmlReportDTO.getStatus().name());
         storyHtmlReport.setStoryVersion(storyHtmlReportDTO.getStoryVersion());
@@ -24,14 +25,14 @@
 
     }
 
-    public static JiraStoryHtmlReport fromModelToDTO(StoryHtmlReport storyHtmlReport) {
+    public static JiraStoryHtml fromModelToDTO(StoryHtmlReport storyHtmlReport) {
 
         String environment = storyHtmlReport.getEnvironment();
         String storyPath = storyHtmlReport.getStory().getIssueKey();
         Long storyVersion = storyHtmlReport.getStoryVersion();
         TestStatus status = TestStatus.valueOf(storyHtmlReport.getStatus());
         String htmlReport = storyHtmlReport.getHtmlReport();
-        JiraStoryHtmlReport storyReportDTO = new JiraStoryHtmlReport(environment, storyPath, storyVersion, status, htmlReport);
+        JiraStoryHtml storyReportDTO = new JiraStoryHtml(environment, storyPath, storyVersion, status, htmlReport);
 
         storyReportDTO.setTotalScenarios(storyHtmlReport.getTotalScenarios());
         storyReportDTO.setTotalScenariosPassed(storyHtmlReport.getTotalScenariosPassed());
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(revision )
@@ -28,9 +28,6 @@
 
     CodeMirror.defineMode("jbehave", function () {
 
-        var sc = null;
-        var stepDocs = null;
-
         return {
             lineComment: "!--",
             tableLineComment: "|--",
@@ -43,6 +40,7 @@
             },
             startState: function () {
                 return {
+
                     lineNumber: -1,
                     stepNumber: 0,
 
@@ -63,7 +61,8 @@
                     inMultilineString: false,
                     inMultilineTable: false,
 
-                    lastStepType: null,
+                    lastStepKeyword: null,
+                    currentStepKeyword: null,
                     lastStepStartedAt: null,
 
                     currentStepNumber: 0,
@@ -79,14 +78,8 @@
             },
             token: function (stream, state) {
 
-                if (sc == null) {
-                    sc = storyController;
-                    stepDocs = sc.stepDocs;
-                }
-
                 if (stream.sol()) {
                     state.lineNumber++;
-
                     state.inScenarioTitleLine = false;
                     state.inNarrativeField = false;
                 }
@@ -165,7 +158,8 @@
 
                     state.inStep = false;
                     state.allowAndStep = false;
-                    state.lastStepType = null;
+                    state.lastStepKeyword = null;
+                    state.currentStepKeyword = null;
                     state.lastStepStartedAt = null;
 
                     return state.lastTokenType = "scenario-keyword";
@@ -177,7 +171,11 @@
                     // GIVEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(Given )/)) {
 
-                    state.lastStepType = "Given";
+                    if (state.currentStepKeyword != null) {
+                        state.lastStepKeyword = state.currentStepKeyword;
+                    }
+                    state.currentStepKeyword = "Given";
+
                     state.stepStartingKeyword = "Given "; //TODO
                     state.allowAndStep = true;
                     state.inStep = true;
@@ -201,7 +199,12 @@
 
                     state.inStep = true;
                     state.allowAndStep = true;
-                    state.lastStepType = "When";
+
+                    if (state.currentStepKeyword != null) {
+                        state.lastStepKeyword = state.currentStepKeyword;
+                    }
+                    state.currentStepKeyword = "When";
+
                     state.stepStartingKeyword = "When "; //TODO
                     state.stepNumber++;
                     state.stepBody = "";
@@ -216,7 +219,12 @@
 
                     // THEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(Then )/)) {
-                    state.lastStepType = "Then";
+
+                    if (state.currentStepKeyword != null) {
+                        state.lastStepKeyword = state.currentStepKeyword;
+                    }
+                    state.currentStepKeyword = "Then";
+
                     state.stepStartingKeyword = "Then "; //TODO
 
                     state.allowAndStep = true;
@@ -240,13 +248,17 @@
                     state.lastStepStartedAt = state.lineNumber;
                     state.stepStartingKeyword = "And "; //TODO
 
+                    if (state.currentStepKeyword != null) {
+                        state.lastStepKeyword = state.currentStepKeyword;
+                    }
+                    state.currentStepKeyword = state.currentStepKeyword;
 
                     state.inStepBody = false;
                     state.stepBodyStartedAtCh = null;
 
                     state.currentStepNumber++;
 
-                    return state.lastTokenType = "step-keyword " + state.lastStepType + "-step";
+                    return state.lastTokenType = "step-keyword " + state.lastStepKeyword + "-step";
 
                     // Description
                 } else if (stream.sol() && state.allowDescription && stream.match(/(.*)/)) {
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/test/java/com/mycomp/execspec/jiraplugin/util/ByLineStoryParserTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/test/java/com/mycomp/execspec/jiraplugin/util/ByLineStoryParserTest.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/test/java/com/mycomp/execspec/jiraplugin/util/ByLineStoryParserTest.java	(revision )
@@ -1,5 +1,6 @@
 package com.mycomp.execspec.jiraplugin.util;
 
+import org.bitbucket.jbehaveforjira.javaclient.dto.JiraStory;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -42,7 +43,7 @@
 
     }
 
-    private void verifyEqual(StoryDTO actualStoryDTO, StoryDTO expStoryDTO) {
+    private void verifyEqual(JiraStory actualStoryDTO, JiraStory expStoryDTO) {
 
 //        String actualDescription = actualStoryDTO.getDescription();
 //        String expectedDesription = expStoryDTO.getDescription();
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/autocomplete/AutoCompletePayload.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/autocomplete/AutoCompletePayload.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/autocomplete/AutoCompletePayload.java	(date 1407407547000)
@@ -1,27 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.autocomplete;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-import java.util.List;
-
-/**
- * Created by Dmytro on 4/23/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class AutoCompletePayload {
-
-    private List<AutoCompleteDTO> entries;
-
-    private AutoCompletePayload() {
-    }
-
-    public AutoCompletePayload(List<AutoCompleteDTO> entries) {
-        this.entries = entries;
-    }
-
-    public List<AutoCompleteDTO> getEntries() {
-        return entries;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/autocomplete/AutoCompleteDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/autocomplete/AutoCompleteDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/autocomplete/AutoCompleteDTO.java	(date 1407407547000)
@@ -1,33 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.autocomplete;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * Created by Dmytro on 4/23/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class AutoCompleteDTO {
-
-    private String suggestion;
-
-    private String completePart;
-
-    protected AutoCompleteDTO() {
-    }
-
-    public AutoCompleteDTO(String suggestion, String completePart) {
-        this.suggestion = suggestion;
-        this.completePart = completePart;
-    }
-
-    public String getSuggestion() {
-        return suggestion;
-    }
-
-    public String getCompletePart() {
-        return completePart;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/StoryPathsDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/StoryPathsDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/StoryPathsDTO.java	(date 1407407547000)
@@ -1,24 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-import java.util.List;
-
-/**
- * Created by Dmytro on 2/25/14.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class StoryPathsDTO {
-
-    private List<String> paths;
-
-    public List<String> getPaths() {
-        return paths;
-    }
-
-    public void setPaths(List<String> paths) {
-        this.paths = paths;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js	(revision )
@@ -135,6 +135,20 @@
         }
     }
 
+    this.lineStartsWithAndKeyword = function (lineNumber) {
+
+        var lineHandle = this.editor.getLineHandle(lineNumber);
+        var lineText = lineHandle.text;
+
+        var regExpPattern = new RegExp("^(And)\\s+");
+        var matchedResult = regExpPattern.exec(lineText);
+        if (matchedResult != null) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
     this.findStepStartingLineBefore = function (lineNumber) {
         var previousLine = lineNumber - 1;
         while (previousLine != -1) {
@@ -146,6 +160,20 @@
         return -1;
     }
 
+    this.findStepStartingLineInSameScenarioBefore = function (lineNumber) {
+        var previousLine = lineNumber - 1;
+        while (previousLine != -1) {
+            if (this.lineStartsWithStepKeyword(previousLine)) {
+                return previousLine;
+            } else if (this.lineStartsWithScenario(previousLine)) {
+                return -1;
+            } else {
+                previousLine--;
+            }
+        }
+        return -1;
+    }
+
     this.findStepStartingLineAfter = function (lineNumber) {
         var nextLine = lineNumber + 1;
         var totalLines = this.editor.lineCount();
@@ -158,22 +186,44 @@
         return -1;
     }
 
-    this.lineStartsWithScenarioOrExamles = function (lineNumber) {
+    this.findStepStartingLineInSameScenarioAfter = function (lineNumber) {
+        var nextLine = lineNumber + 1;
+        var totalLines = this.editor.lineCount();
+        while (nextLine < totalLines) {
+            if (this.lineStartsWithStepKeyword(nextLine)) {
+                return nextLine;
+            } else if (this.lineStartsWithScenarioOrExamples(nextLine)) {
+                return -1;
+            }
+            nextLine++;
+        }
+        return -1;
+    }
 
+    this.lineStartsWithScenario = function (lineNumber) {
+
         var lineHandle = this.editor.getLineHandle(lineNumber);
         var lineText = lineHandle.text;
-
-        if (lineText.match(/^Examples: /)) {
-
+        var regExpPattern = new RegExp("^(Scenario:)\\s+");
+        var matchedResult = regExpPattern.exec(lineText);
+        if (matchedResult != null) {
+            return true;
+        } else {
+            return false;
         }
+    }
 
-        if (lineText.substring(0, "Examples: ".length) == "Examples: "
-            || lineText.substring(0, "Scenario ".length) == "Scenario ") {
+    this.lineStartsWithScenarioOrExamples = function (lineNumber) {
+
+        var lineHandle = this.editor.getLineHandle(lineNumber);
+        var lineText = lineHandle.text;
+        var regExpPattern = new RegExp("^(Examples:|Scenario:)\\s+");
+        var matchedResult = regExpPattern.exec(lineText);
+        if (matchedResult != null) {
             return true;
         } else {
             return false;
         }
-
     }
 
     this.findLastStepLineFrom = function (lineNumber) {
@@ -182,7 +232,8 @@
         var lineCount = this.editor.getDoc().lineCount();
         var lastStepLine = lineNumber;
         while (nextLineNumber < lineCount) {
-            if (this.lineStartsWithStepKeyword(nextLineNumber)) {
+            if (this.lineStartsWithStepKeyword(nextLineNumber)
+                || this.lineStartsWithScenarioOrExamples(nextLineNumber)) {
                 break;
             } else {
                 lastStepLine = nextLineNumber;
@@ -209,7 +260,8 @@
                     // try to see if the step docs pattern matches step body
                     var regExpStr = stepDoc.groupedRegExpPattern;
                     // replace the (.*) with ([\s\S]*) for javascript version of dotall option
-                    regExpStr = regExpStr.replace("(.*)", "([\\s\\S]*)");
+                    var replacePattern = new RegExp("\\(\\.\\*\\)", "g");
+                    regExpStr = regExpStr.replace(replacePattern, "([\\s\\S]*)");
                     // add start and end chars to match the string exactly
                     regExpStr = "^" + regExpStr + "$";
                     storyController.debug("Trying to match the step body against pattern - " + regExpStr);
@@ -248,10 +300,26 @@
             keyword = matchedResult[2];
             stepBody = matchedResult[3];
         } else {
-            console.error("Failed to match step against expected pattern, step - " + step + ", pattern - " + regExpPattern);
+            console.log("Failed to match step against expected pattern, step - " + step + ", pattern - " + regExpPattern);
             return;
         }
 
+        var lookingAtLine = stepStartLine;
+        while (keyword == "And") {
+            // replace it with the previous steps keyword
+            var previousStepStartLine = this.findStepStartingLineInSameScenarioBefore(lookingAtLine);
+
+            if (previousStepStartLine != -1) {
+                var previousStepFirstLine = this.editor.getLineHandle(previousStepStartLine).text;
+                var result = regExpPattern.exec(previousStepFirstLine);
+                keyword = result[2];
+                lookingAtLine = previousStepStartLine;
+            } else {
+                // there is no previous step in this same scenario
+                return;
+            }
+        }
+
         var findResult = this.findMatchingStepdoc(stepBody, keyword);
 
         var markerStart = {line: stepStartLine, ch: 0};
@@ -304,7 +372,7 @@
                         var lastLineBreakInBefore = beforeParam.lastIndexOf("\n");
                         var parameterStartLineCh;
                         if (lastLineBreakInBefore > -1) {
-                            parameterStartLineCh = pgi.startIndex - lastLineBreakInBefore;
+                            parameterStartLineCh = pgi.startIndex - lastLineBreakInBefore - 1;
                         } else {
                             parameterStartLineCh = pgi.startIndex;
                         }
@@ -319,7 +387,7 @@
                         var lastLineBreakInIncludingParam = includingParam.lastIndexOf("\n");
                         var parameterEndLineCh;
                         if (lastLineBreakInIncludingParam > -1) {
-                            parameterEndLineCh = pgi.startIndex + pgi.text.length - lastLineBreakInIncludingParam;
+                            parameterEndLineCh = pgi.startIndex + pgi.text.length - lastLineBreakInIncludingParam - 1;
                         } else {
                             parameterEndLineCh = pgi.startIndex + pgi.text.length;
                         }
@@ -333,10 +401,8 @@
                     }
                     pos += matchedGroup.length;
                     var linesInGroup = matchedGroup.split(/\n/).length;
-                    if (linesInGroup > 1) {
-                        lineOffset += linesInGroup;
+                    lineOffset += (linesInGroup - 1);
-                    }
+                }
-                }
 
                 // mark any step parameters
                 for (var k = 0; k < parameterGroupsInfos.length; k++) {
@@ -384,8 +450,10 @@
         while (stepEndLine < scanEndLine) {
             stepStartLine = stepEndLine + 1;
             stepEndLine = this.findLastStepLineFrom(stepStartLine);
+            if (this.lineStartsWithStepKeyword(stepStartLine)) {
-            this.remarkStepBetween(stepStartLine, stepEndLine);
-        }
+                this.remarkStepBetween(stepStartLine, stepEndLine);
+            }
+        }
 
         storyController.debug("# remarkStepsBetween");
     }
@@ -420,6 +488,19 @@
         if (scanStartLine != null) {
             // find scanEndLine
             var scanEndLine = this.findLastStepLineFrom(toLine);
+
+            var nextStepStartLine = this.findStepStartingLineInSameScenarioAfter(scanEndLine);
+            if (nextStepStartLine != -1) {
+                var startsWithAnd = this.lineStartsWithAndKeyword(nextStepStartLine);
+                while(nextStepStartLine !=-1 && startsWithAnd) {
+                    scanEndLine = this.findLastStepLineFrom(nextStepStartLine);
+                    nextStepStartLine = this.findStepStartingLineInSameScenarioAfter(scanEndLine);
+                    if (nextStepStartLine != -1) {
+                        startsWithAnd = this.lineStartsWithAndKeyword(nextStepStartLine);
+                    }
+                }
+            }
+
             this.remarkStepsBetween(scanStartLine, scanEndLine);
         }
 
@@ -440,440 +521,6 @@
         storyController.debug("# onEditorChangeHandler");
     }
 
-    this.updateEditedStepStyle = function () {
-
-        storyController.debug("> updateEditedStepStyle");
-
-        var editor = storyController.editor;
-        var cursor = editor.getCursor();
-        var lineBeingEdited = cursor.line;
-        storyController.debug("line being edited - " + lineBeingEdited);
-        var doc = editor.getDoc();
-        var lineHandle = doc.getLineHandle(lineBeingEdited);
-
-        var tokenAtCurrentLine = editor.getTokenAt({line: lineBeingEdited, ch: lineHandle.text.length}, true);
-//        if (tokenAtCurrentLine.state.inStepBody) {
-        var stepTokensToRematch = [];
-        var currentStepNumber = tokenAtCurrentLine.state.stepNumber;
-        // if we are at the start of the line, we should rematch any previous step also if any
-        if (cursor.ch == 0) {
-            var previousLine = lineBeingEdited - 1;
-            var previousLineHandle = doc.getLineHandle(previousLine);
-            if (previousLineHandle != null) {
-                var previousLineToken = editor.getTokenAt({line: previousLine, ch: previousLineHandle.text.length}, true);
-                if (previousLineToken != null && previousLineToken.state.inStepBody && previousLineToken.state.stepNumber != currentStepNumber) {
-                    stepTokensToRematch.push(previousLine);
-//                        storyController.rematchStepSpanningLine(previousLine);
-                }
-            }
-        }
-        stepTokensToRematch.push(lineBeingEdited);
-        if (stepTokensToRematch.length == 2) {
-            // use case when we will rematch two steps one after the other
-            // in this case we need to clear the markers in range of lines that span the two target steps
-            var stepsStartedLine = previousLineToken.state.lastStepStartedAt;
-            var stepsEndedLine = lineBeingEdited;
-            var nextLine = stepsEndedLine + 1;
-            var nextLineHandle = doc.getLineHandle(nextLine);
-            if (nextLineHandle != null) {
-                var nextLineToken = editor.getTokenAt({line: nextLine, ch: nextLineHandle.text.length}, true);
-                while (nextLineHandle != null && nextLineToken.state.inStepBody && nextLineToken.state.stepNumber == currentStepNumber) {
-                    stepsEndedLine = nextLine;
-                    nextLine++;
-                    nextLineHandle = doc.getLineHandle(nextLine);
-                    if (nextLineHandle != null) {
-                        nextLineToken = editor.getTokenAt({line: nextLine, ch: nextLineHandle.text.length}, true);
-                    }
-                }
-            }
-            var startOfMarkers = {line: stepsStartedLine, ch: 0};
-            var lastStepsLine = doc.getLineHandle(stepsEndedLine);
-            var endOfMarkers = {line: stepsEndedLine, ch: lastStepsLine.text.length};
-            storyController.debug("### Going to rematch two consecutive steps, " +
-                "going to clear markers between [" + startOfMarkers.line + ":" + startOfMarkers.ch + "]" +
-                " and [" + endOfMarkers.line + ":" + endOfMarkers.ch + "]");
-            var markersBefore = doc.findMarks(startOfMarkers, endOfMarkers);
-            if (markersBefore.length > 0) {
-                // always remove any existing marks, so that we include newly edited text in the marked range
-                for (var m = 0; m < markersBefore.length; m++) {
-                    var marker = markersBefore[m];
-                    if (marker.className == "cm-matched-step"
-                        || marker.className == "cm-unmatched-step"
-                        || marker.className == "cm-step-parameter") {
-                        marker.clear();
-                    }
-                }
-            }
-        }
-
-        if (tokenAtCurrentLine.state.inStepBody) {
-            for (var i = 0; i < stepTokensToRematch.length; i++) {
-                storyController.rematchStepSpanningLine(stepTokensToRematch[i]);
-            }
-        }
-
-//        }
-
-        storyController.debug("# updateEditedStepStyle");
-    }
-
-    this.rematchStepSpanningLine = function (stepLine) {
-
-        storyController.debug("> rematchStepSpanningLine");
-
-        var editor = storyController.editor;
-        var lineBeingEdited = stepLine;
-
-        var doc = editor.getDoc();
-        var lineHandle = doc.getLineHandle(lineBeingEdited);
-
-        var tokenAtCurrentLine = editor.getTokenAt({line: lineBeingEdited, ch: lineHandle.text.length}, true);
-        storyController.debug("tokenAtCurrentLine.type - " + tokenAtCurrentLine.type);
-
-        // work out final token of step body
-        var stepBodyToken = tokenAtCurrentLine;
-        {
-            var currentStepNumber = tokenAtCurrentLine.state.currentStepNumber;
-
-            var lastStepLine = lineBeingEdited;
-            var nextLineHandle = doc.getLineHandle(lastStepLine + 1);
-
-            if (nextLineHandle != null) {
-                var tokenAtNextLine = editor.getTokenAt({line: lastStepLine + 1, ch: nextLineHandle.text.length}, true);
-                while (tokenAtNextLine != null && tokenAtNextLine.state.inStepBody && tokenAtNextLine.state.currentStepNumber == currentStepNumber) {
-                    stepBodyToken = tokenAtNextLine;
-                    lastStepLine++;
-                    var nextLineHandle = doc.getLineHandle(lastStepLine + 1);
-                    if (nextLineHandle != null) {
-                        tokenAtNextLine = editor.getTokenAt({line: lastStepLine + 1, ch: nextLineHandle.text.length}, true);
-                    } else {
-                        tokenAtNextLine = null;
-                    }
-                }
-            }
-        }
-
-        // check if step matches
-        var matchedResult = null;
-        var matchingStepDoc = null;
-        {
-            var lastStepType = stepBodyToken.state.lastStepType;
-            storyController.debug("lastStepType - " + lastStepType);
-
-            var stepDocs = storyController.stepDocs;
-            var stepBody = stepBodyToken.state.stepBody;
-            var stepBodyTrimmed = stepBody.replace(/\s+$/g, ''); // trim trailing whitespace;
-
-            for (var i = 0; i < stepDocs.length; i++) {
-                var stepDoc = stepDocs[i];
-                if (stepDoc.startingWord == lastStepType) {
-                    // try to see if the step docs pattern matches step body
-                    var regExpStr = stepDoc.groupedRegExpPattern;
-                    // replace the (.*) with ([\s\S]*) for javascript version of dotall option
-                    regExpStr = regExpStr.replace("(.*)", "([\\s\\S]*)");
-                    // add start and end chars to match the string exactly
-                    regExpStr = "^" + regExpStr + "$";
-                    storyController.debug("Trying to match the step body against pattern - " + regExpStr);
-                    var regExpPattern = new RegExp(regExpStr);
-                    var matchedResult = regExpPattern.exec(stepBodyTrimmed);
-                    if (matchedResult != null) {
-                        storyController.debug("Step pattern - " + regExpStr + " matches current step body");
-                        matchingStepDoc = stepDoc;
-                        break;
-                    }
-                }
-            }
-        }
-
-        // obtain boundaries of any parameters
-        var parameterGroupsInfos = [];
-        {
-            if (matchedResult != null) {
-                var parameterGroups = matchingStepDoc.parameterGroups;
-                if (parameterGroups.length > 0) {
-                    var pos = 0;
-                    var lineOffset = 0;
-                    for (var j = 1; j < matchedResult.length; j++) {
-                        var matchedGroup = matchedResult[j];
-                        if (parameterGroups.indexOf(j) > -1) {
-                            var pgi = new Object();
-                            pgi.number = j;
-                            pgi.text = matchedGroup;
-                            pgi.startIndex = pos;
-                            pgi.endIndex = pos + matchedGroup.length;
-                            pgi.lineOffset = lineOffset;
-                            parameterGroupsInfos.push(pgi);
-                        }
-                        pos += matchedGroup.length;
-                        var linesInGroup = matchedGroup.split(/\n/).length;
-                        if (linesInGroup > 1) {
-                            lineOffset += linesInGroup;
-                        }
-                    }
-                }
-            }
-        }
-
-        // obtain start and end indexes of parameters in terms of line number and ch position
-        {
-            if (matchedResult != null && parameterGroupsInfos.length > 0) {
-                var startingWord = stepBodyToken.state.stepStartingKeyword;
-                var stepStartLine = stepBodyToken.state.lastStepStartedAt;
-                for (var i = 0; i < parameterGroupsInfos.length; i++) {
-                    var pgi = parameterGroupsInfos[i];
-                    // start
-                    var parameterStartLine = stepStartLine + pgi.lineOffset;
-                    var beforeParam = stepBodyToken.state.stepBody.substring(0, pgi.startIndex);
-                    var lastLineBreakInBefore = beforeParam.lastIndexOf("\n");
-                    var parameterStartLineCh;
-                    if (lastLineBreakInBefore > -1) {
-                        parameterStartLineCh = pgi.startIndex - lastLineBreakInBefore;
-                    } else {
-                        parameterStartLineCh = pgi.startIndex;
-                    }
-                    if (pgi.lineOffset == 0) {
-                        // need to add the length of starting word also
-                        parameterStartLineCh += startingWord.length;
-                    }
-                    pgi.startLine = parameterStartLine;
-                    pgi.startLineCh = parameterStartLineCh;
-                    // end
-                    var parameterEndLine = stepStartLine + pgi.lineOffset + (pgi.text.split("\n").length - 1);
-                    var includingParam = stepBodyToken.state.stepBody.substring(0, pgi.startIndex + pgi.text.length);
-                    var lastLineBreakInIncludingParam = includingParam.lastIndexOf("\n");
-                    var parameterEndLineCh;
-                    if (lastLineBreakInIncludingParam > -1) {
-                        parameterEndLineCh = pgi.startIndex + pgi.text.length - lastLineBreakInIncludingParam;
-                    } else {
-                        parameterEndLineCh = pgi.startIndex + pgi.text.length;
-                    }
-                    if (pgi.lineOffset == 0 && lastLineBreakInIncludingParam == -1) {
-                        // need to add the length of starting word also
-                        parameterEndLineCh += startingWord.length;
-                    }
-                    pgi.endLine = parameterEndLine;
-                    pgi.endLineCh = parameterEndLineCh;
-                }
-            }
-        }
-
-        // mark the step as unmatched / matched
-        var stepStartedAtLine = stepBodyToken.state.lastStepStartedAt;
-        var stepEndedAtLine = stepBodyToken.state.lineNumber;
-        {
-            var from = {line: stepStartedAtLine, ch: 0};
-            var toLineHandle = doc.getLineHandle(stepEndedAtLine);
-            var to = {line: stepEndedAtLine, ch: toLineHandle.text.length};
-            var options = new Object();
-            var marksBefore = doc.findMarks(from, to);
-            if (marksBefore.length > 0) {
-                // always remove any existing marks, so that we include newly edited text in the marked range
-                for (var m = 0; m < marksBefore.length; m++) {
-                    var marks = marksBefore[m];
-                    if (marks.className == "cm-matched-step"
-                        || marks.className == "cm-unmatched-step"
-                        || marks.className == "cm-step-parameter") {
-                        marks.clear();
-                    }
-                }
-            }
-            if (matchedResult != null) {
-                options.className = "cm-matched-step";
-            } else {
-                options.className = "cm-unmatched-step";
-            }
-            doc.markText(from, to, options);
-        }
-
-        // mark parameter boundaries
-        {
-            if (parameterGroupsInfos.length > 0) {
-                for (var k = 0; k < parameterGroupsInfos.length; k++) {
-                    var pgi = parameterGroupsInfos[k];
-                    var paramStart = {line: pgi.startLine, ch: pgi.startLineCh};
-                    var paramEnd = {line: pgi.endLine, ch: pgi.endLineCh};
-                    options.className = "cm-step-parameter";
-                    doc.markText(paramStart, paramEnd, options);
-                }
-            }
-        }
-
-        storyController.debug("# rematchStepSpanningLine");
-    }
-
-
-    this.updateEditedStepStyle_backup = function () {
-
-        storyController.debug("> updateEditedStepStyle");
-
-        var editor = storyController.editor;
-        var cursor = editor.getCursor();
-        var line = cursor.line;
-        storyController.debug("line being edited - " + line);
-
-        var doc = editor.getDoc();
-        var lineHandle = doc.getLineHandle(line);
-
-        var checkTokenPos = {line: line, ch: lineHandle.text.length};
-        var tokenAt = editor.getTokenAt(checkTokenPos, true);
-        storyController.debug("tokenAt.type - " + tokenAt.type);
-
-        if (tokenAt.state.inStep) {
-
-            storyController.debug("### modifying step ...");
-
-            var stepBody = tokenAt.state.stepBody;
-            storyController.debug("stepBody - " + stepBody);
-            var inStepBody = true;
-            var nextLineNum = cursor.line;
-            var stepEndedAtLine = cursor.line;
-            if (cursor.ch != 0) {
-                // if we are in a step and also at the start of the line, i.e. case of multiline steps
-                // then we do not want to yet advance to the next line since we want to include the
-                // step body of this step line also
-                nextLineNum++;
-            } else {
-                stepEndedAtLine--;
-            }
-
-            var stepStartedAtLine = tokenAt.state.lastStepStartedAt;
-
-            while (inStepBody && nextLineNum < doc.lineCount()) {
-                var lineContent = editor.getLine(nextLineNum);
-                if (lineContent == undefined) {
-                    // we have reached the end of the story
-                    break;
-                } else if (lineContent.length == 0) {
-                    // empty line so simply move onto next line
-                    nextLineNum++;
-                    stepEndedAtLine++;
-                } else {
-                    var nextToken = editor.getTokenAt({line: nextLineNum, ch: 1}, true);
-                    if (nextToken.type != "step-body") {
-                        inStepBody = false;
-                    } else {
-                        stepBody = nextToken.state.stepBody;
-                        nextLineNum++;
-                        stepEndedAtLine++;
-                    }
-                }
-            }
-
-            storyController.debug("Modifying step body:\n" + stepBody);
-            stepBody = stepBody.replace(/\s+$/g, ''); // trim trailing whitespace
-            storyController.debug("Modifying step body after trimming:\n" + stepBody);
-            var lastStepType = tokenAt.state.lastStepType;
-            storyController.debug("lastStepType - " + lastStepType);
-
-            // check if step matches
-            var stepMatched = false;
-            var lastStepStartedAt = tokenAt.state.lastStepStartedAt;
-            var stepBodyStartedAtCh = tokenAt.state.stepBodyStartedAtCh;
-            var stepDocs = storyController.stepDocs;
-            var parameterGroupsInfos = [];
-
-            for (var i = 0; i < stepDocs.length; i++) {
-                var stepDoc = stepDocs[i];
-                if (stepDoc.startingWord == lastStepType) {
-                    // try to see if the step docs pattern matches step body
-                    var regExpStr = stepDoc.groupedRegExpPattern;
-                    // replace the (.*) with ([\s\S]*) for javascript version of dotall option
-                    regExpStr = regExpStr.replace("(.*)", "([\\s\\S]*)");
-                    // add start and end chars to match the string exactly
-                    regExpStr = "^" + regExpStr + "$";
-                    storyController.debug("Trying to match the step against pattern - " + regExpStr);
-                    var regExpPattern = new RegExp(regExpStr);
-                    var matched = regExpPattern.exec(stepBody);
-                    if (matched != null) {
-                        var step = lastStepType + " " + stepBody;
-                        storyController.debug("Step pattern - " + regExpStr + " matches current step");
-                        stepMatched = true;
-                        // obtain boundaries of any parameters
-                        var parameterGroups = stepDoc.parameterGroups;
-                        if (parameterGroups.length > 0) {
-                            var pos = stepBodyStartedAtCh;
-                            for (var j = 1; j < matched.length; j++) {
-                                var matchedGroup = matched[j];
-                                if (parameterGroups.indexOf(j) > -1) {
-                                    var pgi = new Object();
-                                    pgi.number = j;
-                                    pgi.text = matchedGroup;
-                                    pgi.startIndex = pos;
-                                    pgi.endIndex = pos + matchedGroup.length;
-
-                                    // work out start and end boundaries in terms of line and line position
-                                    // start position
-                                    var beforeParam = step.substring(0 + lastStepType.length, pgi.startIndex + lastStepType.length);
-                                    var numOfLinesInBefore = beforeParam.split(/\n/).length;
-                                    var startAtLine = lastStepStartedAt + (numOfLinesInBefore - 1);
-                                    pgi.startAtLine = startAtLine;
-                                    var lastLineBreakPos = beforeParam.lastIndexOf("\n");
-                                    if (lastLineBreakPos == -1) {
-                                        lastLineBreakPos = 0;
-                                    }
-                                    pgi.startAtLineCh = pgi.startIndex - lastLineBreakPos;
-                                    // end position
-                                    var includingParam = step.substring(0 + lastStepType.length, (pgi.startIndex + matchedGroup.length + lastStepType.length));
-                                    var numOfLinesInIncludingParam = includingParam.split(/\n/).length;
-                                    var endAtLine = lastStepStartedAt + (numOfLinesInIncludingParam - 1);
-                                    pgi.endAtLine = endAtLine;
-                                    lastLineBreakPos = includingParam.lastIndexOf("\n");
-                                    if (lastLineBreakPos == -1) {
-                                        lastLineBreakPos = 0;
-                                    }
-                                    pgi.endAtLineCh = pgi.endIndex - lastLineBreakPos;
-
-                                    parameterGroupsInfos.push(pgi);
-                                }
-                                pos += matchedGroup.length;
-                            }
-                        }
-                        break;
-                    }
-                }
-            }
-
-            var from = {line: stepStartedAtLine, ch: 0};
-            var to = {line: stepEndedAtLine, ch: null};
-            var options = new Object();
-
-            var marksBefore = doc.findMarks(from, to);
-
-            if (marksBefore.length > 0) {
-                // always remove any existing marks, so that we include newly edited text in the marked range
-                for (var m = 0; m < marksBefore.length; m++) {
-                    marksBefore[m].clear();
-                }
-            }
-
-            if (stepMatched) {
-                options.className = "cm-matched-step";
-            } else {
-                options.className = "cm-unmatched-step";
-            }
-            doc.markText(from, to, options);
-
-            var marksAfter = doc.findMarks(from, to);
-
-            // mark parameter boundaries
-            if (parameterGroupsInfos.length > 0) {
-                for (var k = 0; k < parameterGroupsInfos.length; k++) {
-                    var pgi = parameterGroupsInfos[k];
-                    var startLine = pgi.startAtLine;
-                    var startCh = pgi.startAtLineCh;
-                    var paramStart = {line: startLine, ch: startCh};
-                    var endLine = pgi.endAtLine;
-                    var endCh = pgi.endAtLineCh;
-                    var paramEnd = {line: endLine, ch: endCh};
-                    options.className = "cm-step-parameter";
-                    doc.markText(paramStart, paramEnd, options);
-                }
-            }
-        }
-
-        storyController.debug("# updateEditedStepStyle");
-    }
-
     this.showWarningMessage = function (saveCancelMsg) {
         AJS.$("#storyMsgBar").empty();
         AJS.messages.warning("#storyMsgBar", {
@@ -934,9 +581,9 @@
 
         this.currentStory = storyModel;
 
-//        this.editor.off("change", storyController.onEditorChangeHandler);
+        this.editor.off("change", storyController.onEditorChangeHandler);
         this.editor.setValue(storyModel.asString);
-//        this.editor.on("change", storyController.onEditorChangeHandler);
+        this.editor.on("change", storyController.onEditorChangeHandler);
 
         storyController.storyChanged = false;
 
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/AutoCompleteServiceImpl.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/AutoCompleteServiceImpl.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/AutoCompleteServiceImpl.java	(date 1407407547000)
@@ -1,394 +0,0 @@
-package com.mycomp.execspec.jiraplugin.service;
-
-import com.mycomp.execspec.jiraplugin.dto.autocomplete.AutoCompleteDTO;
-import com.mycomp.execspec.jiraplugin.dto.stepdoc.StepDocDTO;
-import com.mycomp.execspec.jiraplugin.util.CustomRegExStoryParser;
-import org.jbehave.core.configuration.Keywords;
-import org.jbehave.core.i18n.LocalizedKeywords;
-import org.jbehave.core.model.*;
-import org.jbehave.core.parsers.StoryParser;
-import org.jbehave.core.steps.StepType;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Set;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.regex.PatternSyntaxException;
-
-/**
- * Created by Dmytro on 5/15/2014.
- */
-public class AutoCompleteServiceImpl implements AutoCompleteService {
-
-    private Logger log = LoggerFactory.getLogger(this.getClass());
-
-    private StepDocsSerivce stepDocsSerivce;
-
-    public AutoCompleteServiceImpl(StepDocsSerivce stepDocsSerivce) {
-        this.stepDocsSerivce = stepDocsSerivce;
-    }
-
-    private static enum AutoCompleteEntry {
-
-        Meta("meta:\n"),
-        MetaSkip("@skip\n"),
-        MetaIgnored("@ignored true\n"),
-        MetaAuthor("@author "),
-
-        Narrative("narrative:\n"),
-        GivenStories("givenStories: "),
-        Lifecycle("lifecycle:\n"),
-        Scenario("scenario: "),
-        InOrderTo("In order to "),
-        AsA("As a "),
-        IWantTo("I want to "),
-        SoThat("So that "),
-        Before("Before:\n"),
-        After("After:\n"),
-        Examples("Examples:\n"),
-        Given("Given "),
-        When("When "),
-        Then("Then "),
-        And("And ");
-
-        public final String asString;
-
-        AutoCompleteEntry(String asString) {
-            this.asString = asString;
-        }
-
-        public String autoComplete(String input) {
-
-            if (input.length() == 0) {
-                return this.asString;
-            } else if (this.asString.startsWith(input) && input.length() < this.asString.length()) {
-                return this.asString.substring(input.length());
-            } else {
-                return null;
-            }
-
-        }
-    }
-
-    @Override
-    public List<AutoCompleteDTO> autoComplete(String projectKey, String input) {
-
-        log.debug("input - " + input);
-
-        List<AutoCompleteDTO> results = new ArrayList<AutoCompleteDTO>();
-
-        StoryParser storyParser;
-//        regexStoryParser = new RegexStoryParser();
-        storyParser = new CustomRegExStoryParser();
-        Story story = storyParser.parseStory(input);
-
-        String lastLine;
-        if (input.endsWith("\n")) {
-            lastLine = "";
-        } else if (input.lastIndexOf("\n") != -1) {
-            lastLine = input.substring(input.lastIndexOf("\n") + 1);
-        } else {
-            lastLine = input;
-        }
-
-        autoCompleteForMeta(story, lastLine, results);
-        autoCompleteForNarrative(story, lastLine, results);
-        autoCompleteForGivenStories(story, lastLine, results);
-        autoCompleteForLifecycle(story, lastLine, results);
-        autoCompleteForScenario(story, lastLine, results);
-        autoCompleteForScenarioKeywords(story, lastLine, results);
-
-        autoCompleteForSteps(story, lastLine, results, projectKey);
-
-        return results;
-    }
-
-    private void autoCompleteForSteps(Story story, String lastLine, List<AutoCompleteDTO> results, String projectKey) {
-
-        LocalizedKeywords keywords = new LocalizedKeywords();
-
-        List<Scenario> scenarios = story.getScenarios();
-        if (!scenarios.isEmpty()) {
-
-            Scenario scenario = scenarios.get(scenarios.size() - 1);
-
-            ExamplesTable examplesTable = scenario.getExamplesTable();
-            if (examplesTable == ExamplesTable.EMPTY) {
-
-                String givenAutoComplete = AutoCompleteEntry.Given.autoComplete(lastLine);
-                if (givenAutoComplete != null || lastLine.startsWith(keywords.given())) {
-                    autoCompleteForGivenSteps(story, lastLine, results, projectKey, keywords);
-                } else {
-                    String whenAutoComplete = AutoCompleteEntry.When.autoComplete(lastLine);
-                    if (whenAutoComplete != null || lastLine.startsWith(keywords.when())) {
-                        autoCompleteForWhenSteps(story, lastLine, results, projectKey, keywords);
-                    } else {
-                        String thenAutoComplete = AutoCompleteEntry.Then.autoComplete(lastLine);
-                        if (thenAutoComplete != null || lastLine.startsWith(keywords.then())) {
-                            autoCompleteForThenSteps(story, lastLine, results, projectKey, keywords);
-                        } else {
-                            String andAutoComplete = AutoCompleteEntry.And.autoComplete(lastLine);
-                            List<String> steps = scenario.getSteps();
-                            if (andAutoComplete != null && !steps.isEmpty()) {
-                                String lastStep = steps.get(steps.size() - 1);
-                                // figure out what step type to complete on based on the previous step
-                                if (lastStep.startsWith(keywords.given())) {
-                                    autoCompleteForGivenSteps(story, lastLine, results, projectKey, keywords);
-                                } else if (lastStep.startsWith(keywords.when())) {
-                                    autoCompleteForWhenSteps(story, lastLine, results, projectKey, keywords);
-                                } else if (lastStep.startsWith(keywords.then())) {
-                                    autoCompleteForThenSteps(story, lastLine, results, projectKey, keywords);
-                                }
-                            }
-                        }
-                    }
-                }
-
-            }
-
-        }
-    }
-
-    private void autoCompleteForGivenSteps(Story story, String lastLine, List<AutoCompleteDTO> results, String projectKey, Keywords keywords) {
-
-        List<StepDocDTO> stepsForProject = this.stepDocsSerivce.findForProject(projectKey, StepType.GIVEN);
-        autoCompleteForKeywordSteps(lastLine, results, stepsForProject, keywords.given());
-    }
-
-    private void autoCompleteForWhenSteps(Story story, String lastLine, List<AutoCompleteDTO> results, String projectKey, Keywords keywords) {
-
-        List<StepDocDTO> stepsForProject = this.stepDocsSerivce.findForProject(projectKey, StepType.WHEN);
-        autoCompleteForKeywordSteps(lastLine, results, stepsForProject, keywords.when());
-    }
-
-    private void autoCompleteForThenSteps(Story story, String lastLine, List<AutoCompleteDTO> results, String projectKey, Keywords keywords) {
-
-        List<StepDocDTO> stepsForProject = this.stepDocsSerivce.findForProject(projectKey, StepType.THEN);
-        autoCompleteForKeywordSteps(lastLine, results, stepsForProject, keywords.then());
-    }
-
-    private void autoCompleteForKeywordSteps(String lastLine, List<AutoCompleteDTO> results, List<StepDocDTO> stepsForProject, String keyword) {
-        for (StepDocDTO stepDocDTO : stepsForProject) {
-
-            String strPattern = stepDocDTO.getPattern();
-            String strPatternWithKeyword = keyword + " " + strPattern;
-            String regExpPattern = stepDocDTO.getRegExpPattern();
-            String regExpPatternWithKeyword = keyword + " " + regExpPattern;
-
-            // find the maximum matching part of the pattern
-            char[] chars = regExpPatternWithKeyword.toCharArray();
-            StringBuilder sb = new StringBuilder();
-            int matchingPartLength = 0;
-            for (char aChar : chars) {
-                sb.append(aChar);
-                String part = sb.toString();
-                Pattern partPattern;
-                try {
-                    partPattern = Pattern.compile(part);
-                    Matcher matcher = partPattern.matcher(lastLine);
-                    if (matcher.matches()) {
-                        matchingPartLength = sb.length();
-                    }
-                } catch (PatternSyntaxException pse) {
-                    // ignore
-                }
-
-//                else if (!part.endsWith("\\")) {
-//                    // we stop trying more of the pattern only if the part doesn't end with the '\' as this character
-//                    // is used for escaping in regexp, e.g. \\n or \\s
-//                    break;
-//                }
-            }
-
-            if (matchingPartLength > 0) {
-                // we found a match for part of the pattern, workout the auto complete part using the string
-                // representation of the pattern
-                String matchingSubPattern = regExpPatternWithKeyword.substring(0, matchingPartLength);
-                Pattern subPattern = Pattern.compile(matchingSubPattern);
-                Matcher matcher = subPattern.matcher(strPatternWithKeyword);
-                boolean found = matcher.find();
-                if (found) {
-                    int matchEnd = matcher.end();
-                    if (matchEnd < strPatternWithKeyword.length()) {
-                        String autoCopmleteForPattern = strPatternWithKeyword.substring(matchEnd);
-                        AutoCompleteDTO entry = new AutoCompleteDTO(strPatternWithKeyword, autoCopmleteForPattern);
-                        results.add(entry);
-                    }
-                } else {
-                    throw new RuntimeException("Sub pattern - " + matchingSubPattern
-                            + "for the step auto complete failed to be found for input string - '" + strPatternWithKeyword + "'.");
-                }
-            }
-
-//            Pattern pattern = Pattern.compile(patternStr);
-
-            System.out.println();
-
-        }
-    }
-
-    private void autoCompleteForScenarioKeywords(Story story, String lastLine, List<AutoCompleteDTO> results) {
-
-        List<Scenario> scenarios = story.getScenarios();
-
-        if (!scenarios.isEmpty()) {
-
-            Scenario lastScenario = scenarios.get(scenarios.size() - 1);
-
-            Meta meta = lastScenario.getMeta();
-            GivenStories givenStories = lastScenario.getGivenStories();
-            List<String> steps = lastScenario.getSteps();
-            ExamplesTable examplesTable = lastScenario.getExamplesTable();
-
-            if (meta == Meta.EMPTY
-                    && givenStories == GivenStories.EMPTY
-                    && steps.isEmpty()
-                    && examplesTable == ExamplesTable.EMPTY) {
-                autoCompleteEntry(AutoCompleteEntry.Meta, lastLine, results);
-            }
-
-            if (givenStories == GivenStories.EMPTY
-                    && steps.isEmpty()
-                    && examplesTable == ExamplesTable.EMPTY) {
-                autoCompleteEntry(AutoCompleteEntry.GivenStories, lastLine, results);
-            }
-
-            if (examplesTable == ExamplesTable.EMPTY) {
-                autoCompleteEntry(AutoCompleteEntry.Given, lastLine, results);
-                autoCompleteEntry(AutoCompleteEntry.When, lastLine, results);
-                autoCompleteEntry(AutoCompleteEntry.Then, lastLine, results);
-                autoCompleteEntry(AutoCompleteEntry.Examples, lastLine, results);
-                if (!steps.isEmpty()) {
-                    // advise on And only if there are already steps present
-                    autoCompleteEntry(AutoCompleteEntry.And, lastLine, results);
-                }
-            }
-
-        }
-
-    }
-
-    private void autoCompleteForScenario(Story story, String lastLine, List<AutoCompleteDTO> results) {
-
-        autoCompleteEntry(AutoCompleteEntry.Scenario, lastLine, results);
-        List<Scenario> scenarios = story.getScenarios();
-        if (!scenarios.isEmpty()) {
-            Scenario lastScenario = scenarios.get(scenarios.size() - 1);
-            Meta scenarioMeta = lastScenario.getMeta();
-            GivenStories scenarioGivenStories = lastScenario.getGivenStories();
-            List<String> steps = lastScenario.getSteps();
-            ExamplesTable examplesTable = lastScenario.getExamplesTable();
-            System.out.println();
-        }
-    }
-
-    private void autoCompleteForLifecycle(Story story, String lastLine, List<AutoCompleteDTO> results) {
-
-        Lifecycle lifecycle = story.getLifecycle();
-        if (lifecycle == Lifecycle.EMPTY) {
-            if (story.getScenarios().isEmpty()) {
-                autoCompleteEntry(AutoCompleteEntry.Lifecycle, lastLine, results);
-            }
-        } else {
-            if (story.getScenarios().isEmpty()) {
-                // auto complete on Before and After Steps
-                List<String> beforeSteps = lifecycle.getBeforeSteps();
-                List<String> afterSteps = lifecycle.getAfterSteps();
-                if (beforeSteps == null && afterSteps == null) {
-                    autoCompleteEntry(AutoCompleteEntry.Before, lastLine, results);
-                }
-                if (afterSteps == null) {
-                    autoCompleteEntry(AutoCompleteEntry.After, lastLine, results);
-                }
-            }
-        }
-    }
-
-    private void autoCompleteForGivenStories(Story story, String lastLine, List<AutoCompleteDTO> results) {
-
-        GivenStories givenStories = story.getGivenStories();
-        if (givenStories == GivenStories.EMPTY) {
-            if (story.getLifecycle() == Lifecycle.EMPTY
-                    && story.getScenarios().isEmpty()) {
-                autoCompleteEntry(AutoCompleteEntry.GivenStories, lastLine, results);
-            }
-        } else {
-            // TODO - implement auto complete on story names used in givenStories
-        }
-    }
-
-    private void autoCompleteForNarrative(Story story, String lastLine, List<AutoCompleteDTO> results) {
-
-        Narrative narrative = story.getNarrative();
-        if (narrative == Narrative.EMPTY
-                && story.getGivenStories() == GivenStories.EMPTY
-                && story.getLifecycle() == Lifecycle.EMPTY
-                && story.getScenarios().isEmpty()) {
-            autoCompleteEntry(AutoCompleteEntry.Narrative, lastLine, results);
-        } else {
-            if (narrative.inOrderTo().isEmpty()
-                    && story.getGivenStories() == GivenStories.EMPTY
-                    && story.getLifecycle() == Lifecycle.EMPTY
-                    && story.getScenarios().isEmpty()) {
-                autoCompleteEntry(AutoCompleteEntry.InOrderTo, lastLine, results);
-            }
-            if (narrative.asA().isEmpty()
-                    && story.getGivenStories() == GivenStories.EMPTY
-                    && story.getLifecycle() == Lifecycle.EMPTY
-                    && story.getScenarios().isEmpty()) {
-                autoCompleteEntry(AutoCompleteEntry.AsA, lastLine, results);
-            }
-            if (narrative.iWantTo().isEmpty()
-                    && story.getGivenStories() == GivenStories.EMPTY
-                    && story.getLifecycle() == Lifecycle.EMPTY
-                    && story.getScenarios().isEmpty()) {
-                autoCompleteEntry(AutoCompleteEntry.IWantTo, lastLine, results);
-            }
-        }
-    }
-
-    private void autoCompleteForMeta(Story story, String lastLine, List<AutoCompleteDTO> results) {
-
-        Meta meta = story.getMeta();
-        if (meta == Meta.EMPTY) {
-            if (story.getNarrative() == Narrative.EMPTY
-                    && story.getGivenStories() == GivenStories.EMPTY
-                    && story.getLifecycle() == Lifecycle.EMPTY
-                    && story.getScenarios().isEmpty()) {
-                autoCompleteEntry(AutoCompleteEntry.Meta, lastLine, results);
-            }
-        } else {
-            if (story.getNarrative() == Narrative.EMPTY
-                    && story.getGivenStories() == GivenStories.EMPTY
-                    && story.getLifecycle() == Lifecycle.EMPTY
-                    && story.getScenarios().isEmpty()) {
-                // meta is not empty but we can perhaps autocomplete on individual meta entries
-                Set<String> propertyNames = meta.getPropertyNames();
-                if (!propertyNames.contains("skip")) {
-                    autoCompleteEntry(AutoCompleteEntry.MetaSkip, lastLine, results);
-                }
-                if (!propertyNames.contains("ignored")) {
-                    autoCompleteEntry(AutoCompleteEntry.MetaIgnored, lastLine, results);
-                }
-                if (!propertyNames.contains("author")) {
-                    autoCompleteEntry(AutoCompleteEntry.MetaAuthor, lastLine, results);
-                }
-            }
-        }
-    }
-
-    private void autoCompleteEntry(AutoCompleteEntry autoCompleteEntry, String lastLine, List<AutoCompleteDTO> results) {
-        String autoComplete = autoCompleteEntry.autoComplete(lastLine);
-        if (autoComplete != null) {
-            AutoCompleteDTO entry = new AutoCompleteDTO(autoCompleteEntry.asString, autoComplete);
-            results.add(entry);
-        }
-    }
-
-    private String retrieveLastStep(String input) {
-        return null;
-    }
-}
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/SoThatDTO.java
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/SoThatDTO.java	(date 1407407547000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/dto/story/SoThatDTO.java	(date 1407407547000)
@@ -1,69 +0,0 @@
-package com.mycomp.execspec.jiraplugin.dto.story;
-
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
-
-/**
- * Created by Dmytro on 6/2/2014.
- */
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-public class SoThatDTO {
-
-    private String keyword;
-
-    private String value;
-
-    public SoThatDTO() {
-    }
-
-    public SoThatDTO(String keyword, String value) {
-        this.keyword = keyword;
-        this.value = value;
-    }
-
-    public String getKeyword() {
-        return keyword;
-    }
-
-    public void setKeyword(String keyword) {
-        this.keyword = keyword;
-    }
-
-    public String getValue() {
-        return value;
-    }
-
-    public void setValue(String value) {
-        this.value = value;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        SoThatDTO that = (SoThatDTO) o;
-
-        if (keyword != null ? !keyword.equals(that.keyword) : that.keyword != null) return false;
-        if (value != null ? !value.equals(that.value) : that.value != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = keyword != null ? keyword.hashCode() : 0;
-        result = 31 * result + (value != null ? value.hashCode() : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "SoThatDTO{" +
-                "keyword='" + keyword + '\'' +
-                ", value='" + value + '\'' +
-                '}';
-    }
-}
Index: execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/ReportingStoryWalker.java
===================================================================
--- execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/ReportingStoryWalker.java	(date 1407407547000)
+++ execspec/tests-2-master/example-projects/example-run-stories-as-paths/src/test/java/com/mycomp/execspec/util/ReportingStoryWalker.java	(date 1407407547000)
@@ -1,206 +0,0 @@
-package com.mycomp.execspec.util;
-
-import com.mycomp.execspec.jiraplugin.dto.stepdoc.StepDocDTO;
-import org.jbehave.core.model.GivenStories;
-import org.jbehave.core.model.Story;
-import org.jbehave.core.reporters.StoryReporter;
-import org.jbehave.core.steps.StepCreator;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-/**
- * Created by Dmytro on 4/29/2014.
- */
-@Deprecated
-public class ReportingStoryWalker {
-
-    private final List<StepDocDTO> stepDocs;
-
-    public ReportingStoryWalker() {
-        this(new ArrayList<StepDocDTO>());
-    }
-
-    public ReportingStoryWalker(List<StepDocDTO> stepDocs) {
-        this.stepDocs = stepDocs;
-    }
-
-    public void walkStory(Story story, StoryReporter reporter) {
-
-        reporter.beforeStory(story, false);
-        reporter.narrative(story.getNarrative());
-        reporter.lifecyle(story.getLifecycle());
-        List<String> givenStoriesPaths = story.getGivenStories().getPaths();
-        if (!givenStoriesPaths.isEmpty()) {
-            reporter.givenStories(givenStoriesPaths);
-        }
-
-        List<org.jbehave.core.model.Scenario> scenarios = story.getScenarios();
-        for (org.jbehave.core.model.Scenario scenario : scenarios) {
-
-            reporter.beforeScenario(scenario.getTitle());
-            reporter.scenarioMeta(scenario.getMeta());
-            GivenStories givenStories = scenario.getGivenStories();
-            List<String> givenPaths = givenStories.getPaths();
-            if (!givenPaths.isEmpty()) {
-                reporter.givenStories(givenPaths);
-            }
-
-            List<String> steps = scenario.getSteps();
-            for (String step : steps) {
-
-                boolean stepDocFound = false;
-                for (StepDocDTO stepDocDTO : stepDocs) {
-                    String startingWord = stepDocDTO.getStartingWord();
-                    String startingPrefix = startingWord + " ";
-                    if (step.startsWith(startingPrefix)) {
-                        String stepWithoutKeyword = step.substring(startingPrefix.length());
-                        String regExpPattern = stepDocDTO.getRegExpPattern();
-                        Pattern pattern = Pattern.compile(regExpPattern, Pattern.DOTALL);
-                        Matcher matcher = pattern.matcher(stepWithoutKeyword);
-                        boolean matches = matcher.matches();
-                        if (matches) {
-                            step = startingPrefix + insertParameterMarkers(stepWithoutKeyword, matcher);
-                            stepDocFound = true;
-                            break;
-                        }
-                    }
-                }
-
-                if (stepDocFound) {
-                    reporter.successful(step);
-                } else {
-                    String withTablesMarked = markTablesInPendingStep(step, reporter);
-                    reporter.pending(withTablesMarked);
-                }
-
-            }
-
-            // TODO - implement examples table, i.e. scenarios parametrised with examples table
-            // should the steps be passed to the reporter individually like above or would it be enough to just call
-            // the beforeExamples method of the reporter
-//            ExamplesTable examplesTable = scenario.getExamplesTable();
-//            reporter.beforeExamples(steps, examplesTable);
-
-            reporter.afterScenario();
-        }
-
-        reporter.afterStory(false);
-    }
-
-    private String insertParameterMarkers(String step, Matcher matcher) {
-
-        StringBuilder sb = new StringBuilder();
-
-        int totalGroups = matcher.groupCount();
-
-        if (totalGroups > 0) {
-
-            // has parameters, which are matcher's groups
-            int pos = 0;
-            for (int i = 1; i <= totalGroups; i++) {
-                int groupStart = matcher.start(i);
-                String group = matcher.group(i);
-                if (groupStart > pos) {
-                    // append the string up until the group start
-                    String str = step.substring(pos, groupStart);
-                    sb.append(str);
-                    // append the current group as a parameter
-                    appendParameter(sb, group);
-                    // update position
-                    pos = groupStart + group.length();
-                } else {
-                    // we are at the start of the group already
-                    appendParameter(sb, group);
-                    // update position
-                    pos = groupStart + group.length();
-                }
-            }
-            // append any characters which maybe after the last parameter and hence after the last matcher group
-            if (pos < step.length()) {
-                String str = step.substring(pos);
-                sb.append(str);
-            }
-
-        } else {
-            // doesn't have parameters
-            sb.append(step);
-        }
-
-        return sb.toString();
-    }
-
-    private void appendParameter(StringBuilder sb, String group) {
-        String trimmedGroup = group.trim();
-        if (trimmedGroup.startsWith("|") && trimmedGroup.endsWith("|")) {
-            // is a table parameter
-            sb.append(StepCreator.PARAMETER_TABLE_START);
-            sb.append(group);
-            sb.append(StepCreator.PARAMETER_TABLE_END);
-        } else {
-            sb.append(StepCreator.PARAMETER_VALUE_START);
-            sb.append(group);
-            sb.append(StepCreator.PARAMETER_VALUE_END);
-        }
-    }
-
-    private String markTablesInPendingStep(String step, StoryReporter reporter) {
-
-        if (!step.contains("|")) {
-            return step;
-        } else {
-
-            StringBuilder sb = new StringBuilder();
-            String[] lines = step.split("\\n");
-
-            for (int i = 0; i < lines.length; i++) {
-
-                String line = lines[i];
-                boolean isTableStartLine = false;
-                boolean isTableEndLine = false;
-                if (line.startsWith("|")) {
-                    // table line
-                    if (i == 0) {
-                        throw new IllegalArgumentException("Table cannot start on the first line, i.e. expecting a keyword at the start e.g. Given, When, etc.");
-                    }
-                    if (!lines[i - 1].startsWith("|")) {
-                        // if previous line was not a table line then open the table tag
-//                    String tableStartMarker = reporter.escapeHTML(StepCreator.PARAMETER_TABLE_START);
-                        int tableStartPos = sb.length();
-                        String tableStartMarker = StepCreator.PARAMETER_TABLE_START;
-                        sb.append(tableStartMarker);
-                        sb.append(line);
-                        isTableStartLine = true;
-                    }
-                    if (i == lines.length - 1 || !lines[i + 1].startsWith("|")) {
-                        // if this is the last line or the next line is not a table line
-                        String beforePart = line.substring(0, line.lastIndexOf("|") + 1);
-                        sb.append(beforePart);
-//                    String tableEndMarker = reporter.escapeHTML(StepCreator.PARAMETER_TABLE_END);
-                        String tableEndMarker = StepCreator.PARAMETER_TABLE_END;
-                        sb.append(tableEndMarker);
-                        String afterPart = line.substring(line.lastIndexOf("|") + 1);
-                        sb.append(afterPart);
-                        isTableEndLine = true;
-                    }
-                    if (!isTableStartLine && !isTableEndLine) {
-                        // table line that is not first or last line in that table
-                        sb.append(line);
-                    }
-                } else {
-                    sb.append(line);
-                }
-
-                if (i != lines.length - 1) {
-                    sb.append("\n");
-                }
-            }
-
-            String result = sb.toString();
-            return result;
-
-        }
-    }
-}
