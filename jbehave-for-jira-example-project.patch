Index: jbehave-for-jira/jbehave-for-jira-example-project/src/test/java/com/jbehaveforjira/exampleproject/TransactionSteps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-example-project/src/test/java/com/jbehaveforjira/exampleproject/TransactionSteps.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-example-project/src/test/java/com/jbehaveforjira/exampleproject/TransactionSteps.java	(revision )
@@ -0,0 +1,17 @@
+package com.jbehaveforjira.exampleproject;
+
+import org.jbehave.core.annotations.Given;
+
+public class TransactionSteps {
+
+    @Given("an FX transaction to buy $amount of $currency")
+    public void givenFxTransaction(Double amount, Currency currency) {
+        //
+    }
+
+    @Given("an FX transaction to sell $sellCurrency and buy $buyCurrency")
+    public void givenBuySellTransaction(Currency sellCurrency, Currency buyCurrency) {
+        //
+    }
+
+}
Index: jbehave-for-jira/jbehave-for-jira-example-project/src/main/java/com/jbehaveforjira/exampleproject/Currency.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-example-project/src/main/java/com/jbehaveforjira/exampleproject/Currency.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-example-project/src/main/java/com/jbehaveforjira/exampleproject/Currency.java	(revision )
@@ -0,0 +1,9 @@
+package com.jbehaveforjira.exampleproject;
+
+public enum Currency {
+
+    USD,
+    EUR,
+    GBP,
+    TZS
+}
Index: jbehave-for-jira/jbehave-for-jira-example-project/src/test/java/com/jbehaveforjira/exampleproject/BookStoreTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-example-project/src/test/java/com/jbehaveforjira/exampleproject/BookStoreTest.java	(date 1410985045000)
+++ jbehave-for-jira/jbehave-for-jira-example-project/src/test/java/com/jbehaveforjira/exampleproject/BookStoreTest.java	(revision )
@@ -1,9 +1,9 @@
 package com.jbehaveforjira.exampleproject;
 
-import com.jbehaveforjira.javaclient.JiraStepDocReporter;
+import com.jbehaveforjira.groovyclient.GroovyStepDocReporter;
+import com.jbehaveforjira.groovyclient.GroovyStoryReporter;
 import com.jbehaveforjira.javaclient.JiraStoryLoader;
 import com.jbehaveforjira.javaclient.JiraStoryPathsFinder;
-import com.jbehaveforjira.javaclient.JiraStoryReporter;
 import org.jbehave.core.configuration.MostUsefulConfiguration;
 import org.jbehave.core.embedder.Embedder;
 import org.jbehave.core.junit.JUnitStories;
@@ -27,10 +27,18 @@
 
     private final String jiraProject = "TESTING";
 
-    private final String environment = "TEST";
+    private final String DEFAULT_ENVIRONMENT = "TEST";
 
     public BookStoreTest() {
 
+        final String environment;
+        String envProperty = System.getProperty("environment");
+        if (envProperty != null && !envProperty.trim().isEmpty()) {
+            environment = envProperty.trim();
+        } else {
+            environment = DEFAULT_ENVIRONMENT;
+        }
+
         MostUsefulConfiguration configuration = new MostUsefulConfiguration();
 
         // set custom Jira HTML output format
@@ -38,8 +46,8 @@
                 new StoryReporterBuilder() {
                     public StoryReporter reporterFor(String storyPath, org.jbehave.core.reporters.Format format) {
                         if (format.equals(org.jbehave.core.reporters.Format.HTML)) {
-                            return new JiraStoryReporter(jiraUrl, jiraProject, "admin", "admin", environment);
-//                            return new GroovyStoryReporter(jiraUrl, jiraProject, "admin", "admin", environment);
+//                            return new JiraStoryReporter(jiraUrl, jiraProject, "admin", "admin", environment);
+                            return new GroovyStoryReporter(jiraUrl, jiraProject, "admin", "admin", environment);
                         } else {
                             return super.reporterFor(storyPath, format);
                         }
@@ -59,8 +67,8 @@
         configuration.useStoryLoader(jiraLoader);
 
         // set Jira step doc reporter
-        StepdocReporter stepDocReporter = new JiraStepDocReporter(jiraUrl, jiraProject, "admin", "admin");
-//        StepdocReporter stepDocReporter = new GroovyStepDocReporter(jiraUrl, jiraProject, "admin", "admin");
+//        StepdocReporter stepDocReporter = new JiraStepDocReporter(jiraUrl, jiraProject, "admin", "admin");
+        StepdocReporter stepDocReporter = new GroovyStepDocReporter(jiraUrl, jiraProject, "admin", "admin");
         configuration.useStepdocReporter(stepDocReporter);
 
         useConfiguration(configuration);
@@ -83,7 +91,7 @@
 
     @Override
     public InjectableStepsFactory stepsFactory() {
-        return new InstanceStepsFactory(configuration(), new BookRelatedSteps());
+        return new InstanceStepsFactory(configuration(), new BookRelatedSteps(), new TransactionSteps());
     }
 
     @Override
