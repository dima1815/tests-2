Index: jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/StringResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/StringResponse.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/StringResponse.java	(revision )
@@ -0,0 +1,21 @@
+package com.jbehaveforjira.javaclient.dto;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement
+@XmlAccessorType(XmlAccessType.FIELD)
+public class StringResponse extends BaseRestResponse {
+
+    private String payload;
+
+    public String getPayload() {
+        return payload;
+    }
+
+    public void setPayload(String payload) {
+        this.payload = payload;
+    }
+
+}
Index: jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStoryLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStoryLoader.java	(revision 6ead532dcdbc93bf184cd48dba752d451ac0cb48)
+++ jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStoryLoader.java	(revision )
@@ -1,5 +1,7 @@
 package com.jbehaveforjira.javaclient;
 
+import com.jbehaveforjira.javaclient.dto.ResponseKind;
+import com.jbehaveforjira.javaclient.dto.StringResponse;
 import com.sun.jersey.api.client.Client;
 import com.sun.jersey.api.client.ClientResponse;
 import com.sun.jersey.api.client.WebResource;
@@ -71,13 +73,20 @@
         log.info("response - " + response);
 
         if (response.getStatus() == 200) {
-            String story = response.getEntity(String.class);
 
+            StringResponse responsePayload = response.getEntity(StringResponse.class);
+            ResponseKind kind = responsePayload.getKind();
+            if (kind.equals(ResponseKind.success)) {
+                String story = responsePayload.getPayload();
-            if (downloadedStoriesDir != null && !downloadedStoriesDir.trim().isEmpty()) {
-                this.writeModelToFile(storyPath, story);
-            }
+                if (downloadedStoriesDir != null && !downloadedStoriesDir.trim().isEmpty()) {
+                    this.writeModelToFile(storyPath, story);
+                }
-
-            return story;
+                return story;
+            } else {
+                throw new RuntimeException("Failed to load story for story path - " + storyPath
+                        + ". Server returned error, server message - " + responsePayload.getMessage());
+            }
+
         } else {
             int status = response.getStatus();
             Response.StatusType statusInfo = response.getStatusInfo();
Index: jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStoryReporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStoryReporter.java	(revision 6ead532dcdbc93bf184cd48dba752d451ac0cb48)
+++ jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStoryReporter.java	(revision )
@@ -1,5 +1,7 @@
 package com.jbehaveforjira.javaclient;
 
+import com.jbehaveforjira.javaclient.dto.ResponseKind;
+import com.jbehaveforjira.javaclient.dto.StringResponse;
 import com.sun.jersey.api.client.Client;
 import com.sun.jersey.api.client.WebResource;
 import freemarker.ext.beans.BeansWrapper;
@@ -354,11 +356,16 @@
         Client client = Client.create();
         WebResource res = client.resource(postUrl);
 
-        String response = res.accept(MediaType.APPLICATION_JSON)
+        StringResponse response = res.accept(MediaType.APPLICATION_JSON)
                 .type(MediaType.APPLICATION_JSON)
-                .post(String.class, storyHtmlReportDTO);
+                .post(StringResponse.class, storyHtmlReportDTO);
 
-        System.out.println("response - " + response);
+        if (response.getKind().equals(ResponseKind.success)) {
+            // story report successfully uploaded to jira
+        } else {
+            throw new RuntimeException("Failed to upload story execution report to Jira for story path - "
+                    + outputStory.getPath() + ". Server returned error, msg - " + response.getMessage());
+        }
     }
 
     private Map<String, Object> newDataModel() {
Index: jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStepDocReporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStepDocReporter.java	(revision 6ead532dcdbc93bf184cd48dba752d451ac0cb48)
+++ jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStepDocReporter.java	(revision )
@@ -1,5 +1,7 @@
 package com.jbehaveforjira.javaclient;
 
+import com.jbehaveforjira.javaclient.dto.ResponseKind;
+import com.jbehaveforjira.javaclient.dto.StringResponse;
 import com.sun.jersey.api.client.Client;
 import org.apache.commons.lang.Validate;
 import org.codehaus.jackson.map.ObjectMapper;
@@ -132,8 +134,8 @@
             if (parameterInfos.size() != stepDocDTO.parameterGroups.size()) {
                 // this should not happen, but it may if the developer made a mistake in matching the number of method parameters to
                 // number of parameters in pattern
-                System.out.println("[WARN] Number of resolved parameters doesn't match number of gathered parameter infos, for class - "
-                        + stepDocDTO.stepClassName + " and method - " + stepDocDTO.stepMethodSignature);
+//                System.out.println("[WARN] Number of resolved parameters doesn't match number of gathered parameter infos, for class - "
+//                        + stepDocDTO.stepClassName + " and method - " + stepDocDTO.stepMethodSignature);
 //                throw new IllegalStateException("Number of resolved parameters doesn't match number of gathered parameter infos");
             }
 
@@ -382,13 +384,14 @@
         }
 
         Client client = Client.create();
-        String response = client.resource(this.reportStepDocUrl)
+        StringResponse response = client.resource(this.reportStepDocUrl)
                 .accept(MediaType.APPLICATION_JSON)
                 .type(MediaType.APPLICATION_JSON)
-                .post(String.class, payloadAsString);
+                .post(StringResponse.class, payloadAsString);
 
-        if (!response.startsWith("success")) {
-            throw new RuntimeException("Failed to upload step doc! Server returned error message - " + response);
+        ResponseKind kind = response.getKind();
+        if (!kind.equals(ResponseKind.success)) {
+            throw new RuntimeException("Failed to upload step docs! Server returned error message - " + response);
         }
     }
 
Index: jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/StoryPathsResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/StoryPathsResponse.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/StoryPathsResponse.java	(revision )
@@ -0,0 +1,34 @@
+package com.jbehaveforjira.javaclient.dto;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlRootElement;
+import java.util.List;
+
+@XmlRootElement
+@XmlAccessorType(XmlAccessType.FIELD)
+public class StoryPathsResponse extends BaseRestResponse {
+
+    private StoryPaths payload;
+
+    public StoryPaths getPayload() {
+        return payload;
+    }
+
+    public void setPayload(StoryPaths payload) {
+        this.payload = payload;
+    }
+
+    public static class StoryPaths {
+
+        private List<String> paths;
+
+        public List<String> getPaths() {
+            return paths;
+        }
+
+        public void setPaths(List<String> paths) {
+            this.paths = paths;
+        }
+    }
+}
Index: jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStoryPathsFinder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStoryPathsFinder.java	(revision 6ead532dcdbc93bf184cd48dba752d451ac0cb48)
+++ jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/JiraStoryPathsFinder.java	(revision )
@@ -1,14 +1,13 @@
 package com.jbehaveforjira.javaclient;
 
+import com.jbehaveforjira.javaclient.dto.ResponseKind;
+import com.jbehaveforjira.javaclient.dto.StoryPathsResponse;
 import com.sun.jersey.api.client.Client;
 import com.sun.jersey.api.client.ClientResponse;
 import com.sun.jersey.api.client.WebResource;
 
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.ArrayList;
@@ -48,13 +47,19 @@
         ClientResponse response = res.get(ClientResponse.class);
         if (response.getStatus() == 200) {
 
-            int length = response.getLength();
-            MediaType type = response.getType();
-            StoryPaths storyPaths = response.getEntity(StoryPaths.class);
-
+            StoryPathsResponse storyPathsResponse = response.getEntity(StoryPathsResponse.class);
+            ResponseKind kind = storyPathsResponse.getKind();
+            if (kind.equals(ResponseKind.success)) {
+                StoryPathsResponse.StoryPaths storyPaths = storyPathsResponse.getPayload();
-            if (storyPaths.getPaths() != null && !storyPaths.getPaths().isEmpty()) {
-                paths = storyPaths.getPaths();
+                if (storyPaths.getPaths() != null && !storyPaths.getPaths().isEmpty()) {
+                    paths = storyPaths.getPaths();
+                } else {
+                    // will return empty paths collection
-            }
+                }
+            } else {
+                throw new RuntimeException("Failed to retrieve story paths from Jira. Server returned error, msg - "
+                        + storyPathsResponse.getMessage());
+            }
 
         } else {
             int status = response.getStatus();
@@ -64,21 +69,6 @@
         }
 
         return paths;
-    }
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    public static class StoryPaths {
-
-        private List<String> paths;
-
-        public List<String> getPaths() {
-            return paths;
-        }
-
-        public void setPaths(List<String> paths) {
-            this.paths = paths;
-        }
     }
 
 }
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/ResponseKind.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/ResponseKind.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/ResponseKind.java	(revision )
@@ -0,0 +1,7 @@
+package com.jbehaveforjira.javaclient.dto;
+
+public enum ResponseKind {
+
+    success,
+    failure
+}
Index: jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/BaseRestResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/BaseRestResponse.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-java-client/src/main/java/com/jbehaveforjira/javaclient/dto/BaseRestResponse.java	(revision )
@@ -0,0 +1,25 @@
+package com.jbehaveforjira.javaclient.dto;
+
+public abstract class BaseRestResponse {
+
+    private ResponseKind kind;
+
+    private String message;
+
+    public ResponseKind getKind() {
+        return kind;
+    }
+
+    public void setKind(ResponseKind kind) {
+        this.kind = kind;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+}
