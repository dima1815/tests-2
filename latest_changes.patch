Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/groovy/test.groovy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/groovy/test.groovy	(revision )
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/groovy/test.groovy	(revision )
@@ -0,0 +1,3 @@
+package groovy
+
+println "hello"; HAHA
\ No newline at end of file
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js	(date 1407532080000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/resources/js/StoryController.js	(revision )
@@ -23,6 +23,7 @@
     this.currentStory = null;
     this.storyChanged = false;
     this.stepDocs = null;
+    this.alignTablesOnEdit = true;
 
     this.init = function () {
 
@@ -47,6 +48,11 @@
             extraKeys: {
                 "Ctrl-Space": "autocomplete",
 
+                Tab: function(cm) {
+                    var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
+                    cm.replaceSelection(spaces, "end", "+input");
+                },
+
                 // commenting
                 "Ctrl-/": function (cm) {
 
@@ -171,6 +177,14 @@
         storyController.debug("> alignTableBetween");
         storyController.debug("tableStartLine - " + tableStartLine + ", tableEndLine - " + tableEndLine);
 
+        storyController.debug("storyController.alignTablesOnEdit - " + storyController.alignTablesOnEdit);
+        var currentAlignValue = storyController.alignTablesOnEdit;
+        if (storyController.alignTablesOnEdit == false) {
+            return;
+        } else {
+            storyController.alignTablesOnEdit = false;
+        }
+
         // get max width for columns
         var maxColumnWidths = [];
         this.editor.getDoc().eachLine(tableStartLine, tableEndLine + 1, function (lineHandle) {
@@ -184,6 +198,7 @@
                     var tokens = lineText.split("|");
                     for (var i = 0; i < tokens.length; i++) {
                         var token = tokens[i];
+                        token = token.replace(/\s+$/g, ''); // trim any trailing spaces
                         var currentMax = maxColumnWidths[i];
                         if (currentMax == null || token.length > currentMax) {
                             var newMax = token.length;
@@ -207,33 +222,63 @@
                     var tokens = lineText.split("|");
                     var pos = 0;
                     for (var i = 0; i < tokens.length; i++) {
+                        var isFirstToken = i == 0;
                         var token = tokens[i];
-                        if (token != "") {
+                        if (!isFirstToken) {
                             pos++; // for '|'
                         }
-                        pos += token.length;
+                        var tokenStartCh = pos;
+                        var tokenEndCh = tokenStartCh + token.length;
                         var difference = maxColumnWidths[i] - token.length;
-                        if (difference > 0 && token.length > 0) {
+                        if (difference > 0 && !isFirstToken) {
 
                             var spaces = "";
                             while (difference > 0) {
                                 spaces = spaces + " ";
                                 difference--;
                             }
-
-                            var tokenEndCh = pos;
                             // replace old token with new
                             storyController.editor.getDoc().replaceRange(spaces,
                                 {line: currentLine, ch: tokenEndCh},
                                 {line: currentLine, ch: tokenEndCh});
 
-                            pos += spaces.length;
+                            pos += token.length + spaces.length;
+
+                        } else if (difference < 0 && !isFirstToken) {
+                            // this is the case when token has whitespace at the end
+                            // so we trim the whitespace
+                            token = token.replace(/\s+$/g, ''); // trim any trailing spaces
+                            // after trimming the difference must be zero
+                            difference = maxColumnWidths[i] - token.length;
+                            if (difference < 0) {
+                                console.error("Error occurred while trying to align table line - " + currentLine + ", length of token - "
+                                    + token + " was longer than maximum length for its column");
+                                pos += token.length;
+                            } else {
+                                // we replace the original token with the trimmed one
+                                // but we may need to pad still following our trimming
+                                var spaces = "";
+                                while (difference > 0) {
+                                    spaces = spaces + " ";
+                                    difference--;
-                        }
+                                }
+                                // replace old token with new one, which may also be padded
+                                var replaceToken = token + spaces;
+                                storyController.editor.getDoc().replaceRange(replaceToken,
+                                    {line: currentLine, ch: tokenStartCh},
+                                    {line: currentLine, ch: tokenEndCh});
+                                pos += replaceToken.length;
-                    }
+                            }
+                        } else {
+                            pos += token.length;
-                }
-            }
+                        }
+                    }
+                }
+            }
         );
 
+        storyController.alignTablesOnEdit = currentAlignValue;
+
         storyController.debug("# alignTableBetween");
     }
 
@@ -401,7 +446,7 @@
             if (nextLineHandle == null) {
                 return lastStepLine;
             } else {
-                if (nextLineHandle.text.substring(0, 1) != "|") {
+                if (nextLineHandle.text.length > 0 && nextLineHandle.text.substring(0, 1) != "|") {
                     break;
                 } else {
                     lastStepLine = nextLineNumber;
Index: execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryServiceImpl.java	(date 1407532080000)
+++ execspec/tests-2-master/execspec-parent/execspec-jira-plugin/src/main/java/com/mycomp/execspec/jiraplugin/service/StoryServiceImpl.java	(revision )
@@ -2,7 +2,9 @@
 
 import com.atlassian.crowd.embedded.api.User;
 import com.atlassian.jira.bc.issue.IssueService;
+import com.atlassian.jira.plugin.webresource.JiraWebResourceManager;
 import com.atlassian.jira.security.JiraAuthenticationContext;
+import com.atlassian.plugin.webresource.WebResourceUrlProvider;
 import com.mycomp.execspec.jiraplugin.ao.story.Story;
 import com.mycomp.execspec.jiraplugin.ao.story.StoryDao;
 import com.mycomp.execspec.jiraplugin.ao.testreport.StoryHtmlReport;
@@ -13,30 +15,64 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.List;
 
 public class StoryServiceImpl implements StoryService {
 
     private final Logger log = LoggerFactory.getLogger(getClass());
+
     private final IssueService is;
+
     private final JiraAuthenticationContext authenticationContext;
+
     private final StoryDao storyDao;
+
     private final StoryReportDao storyReportDao;
+
     private final StepDocsSerivce stepDocsSerivce;
+
     private StoryReportService storyReportService;
 
+    private JiraWebResourceManager jiraWebResourceManager;
+
+    private WebResourceUrlProvider webResourceUrlProvider;
+
     public StoryServiceImpl(StoryDao storyDao, StoryReportDao storyReportDao,
                             IssueService is,
                             JiraAuthenticationContext authenticationContext,
                             StepDocsSerivce stepDocsSerivce,
-                            StoryReportService storyReportService) {
+                            StoryReportService storyReportService,
+                            JiraWebResourceManager jiraWebResourceManager,
+                            WebResourceUrlProvider webResourceUrlProvider) {
         this.storyDao = storyDao;
         this.storyReportDao = storyReportDao;
         this.is = is;
         this.authenticationContext = authenticationContext;
         this.stepDocsSerivce = stepDocsSerivce;
         this.storyReportService = storyReportService;
+        this.jiraWebResourceManager = jiraWebResourceManager;
+        this.webResourceUrlProvider = webResourceUrlProvider;
+        InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("groovy/test.groovy");
+        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
+
+        String line = null;
+        try {
+            line = br.readLine();
+            while(line != null){
+                System.out.println("line = " + line);
+                line = br.readLine();
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+
+
     }
 
     @Override
