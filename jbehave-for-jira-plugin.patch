Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/StoryReportDTOUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/StoryReportDTOUtils.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/StoryReportDTOUtils.java	(revision )
@@ -2,9 +2,6 @@
 
 import org.bitbucket.jbehaveforjira.plugin.ao.StoryReport;
 
-/**
- * Created by Dmytro on 4/8/2014.
- */
 public class StoryReportDTOUtils {
 
     public static void fromDTOToModel(JiraStoryHtml storyHtmlReportDTO, StoryReport storyHtmlReport) {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/JiraStoryHtml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/JiraStoryHtml.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/JiraStoryHtml.java	(revision )
@@ -4,9 +4,6 @@
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlRootElement;
 
-/**
- * @author Maryna Stasyuk
- */
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
 public class JiraStoryHtml {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StoryReport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StoryReport.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StoryReport.java	(revision )
@@ -1,25 +1,15 @@
 package org.bitbucket.jbehaveforjira.plugin.ao;
 
-import org.bitbucket.jbehaveforjira.plugin.ao.Story;
 import net.java.ao.Entity;
 import net.java.ao.Preload;
 
-/**
- * Represents story test report, received as from the JBehave story run.
- */
 @Preload
 public interface StoryReport extends Entity {
 
-    //    @NotNull
     Story getStory();
 
     void setStory(Story story);
 
-    /**
-     * Environment where the story test was run, e.g. DEV, TEST, UAT, etc.
-     *
-     * @return
-     */
     String getEnvironment();
 
     void setEnvironment(String environment);
@@ -28,11 +18,6 @@
 
     void setStatus(String testStatus);
 
-    /**
-     * Version of the Story entity at which the story was execute and hence to which report relates.
-     *
-     * @return
-     */
     Long getStoryVersion();
 
     void setStoryVersion(Long storyVersion);
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/test/java/org/bitbucket/jbehaveforjira/plugin/ao/HsqlDbFileJdbcConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/test/java/org/bitbucket/jbehaveforjira/plugin/ao/HsqlDbFileJdbcConfiguration.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/test/java/org/bitbucket/jbehaveforjira/plugin/ao/HsqlDbFileJdbcConfiguration.java	(revision )
@@ -5,8 +5,7 @@
 /**
  * Configuration for HSQL DB that uses file, to be used in tests.
  *
- * @author stasyukd
- * @since 2.0.0-SNAPSHOT
+ * @author Maryna Pristrom
  */
 public class HsqlDbFileJdbcConfiguration implements JdbcConfiguration {
 
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/ParameterInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/ParameterInfo.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/ParameterInfo.java	(revision )
@@ -5,12 +5,6 @@
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.List;
 
-/**
- * Parameter info DTO object.
- *
- * @author stasyukd
- * @since 6.0.0-SNAPSHOT
- */
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
 public class ParameterInfo {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StepDoc.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StepDoc.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StepDoc.java	(revision )
@@ -3,9 +3,6 @@
 import net.java.ao.Entity;
 import net.java.ao.Preload;
 
-/**
- * Created by Dmytro on 4/23/2014.
- */
 @Preload
 public interface StepDoc extends Entity {
 
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StoryCrudResource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StoryCrudResource.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StoryCrudResource.java	(revision )
@@ -14,12 +14,6 @@
 import javax.ws.rs.core.Response;
 import java.io.IOException;
 
-/**
- * Contains rest api methods related to processing of Story objects.
- *
- * @author stasyukd
- * @since 2.0.0-SNAPSHOT
- */
 @Path("/crud")
 public class StoryCrudResource {
 
@@ -43,8 +37,8 @@
     @Produces(MediaType.APPLICATION_JSON)
     @Consumes(MediaType.TEXT_PLAIN)
     public JiraStory save(@PathParam("projectKey") String projectKey,
-                         @PathParam("issueKey") String issueKey,
-                         String storyPayload) {
+                          @PathParam("issueKey") String issueKey,
+                          String storyPayload) {
 
         Validate.notNull(projectKey);
         Validate.notNull(issueKey);
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/UserPreferencesResource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/UserPreferencesResource.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/UserPreferencesResource.java	(revision )
@@ -12,9 +12,6 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
 
-/**
- * Created by Dmytro on 8/25/2014.
- */
 @Path("/preferences")
 public class UserPreferencesResource {
 
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/StepDocDTOUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/StepDocDTOUtils.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/StepDocDTOUtils.java	(revision )
@@ -10,9 +10,6 @@
 import java.util.Collections;
 import java.util.List;
 
-/**
- * Created by Dmytro on 4/8/2014.
- */
 public class StepDocDTOUtils {
 
     public static void fromDTOToModel(StepDocDTO stepDocDTO, StepDoc stepDoc) {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StoryReportService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StoryReportService.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StoryReportService.java	(revision )
@@ -5,9 +5,6 @@
 
 import java.util.List;
 
-/**
- * Created by Dmytro on 4/8/2014.
- */
 @Transactional
 public interface StoryReportService {
 
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/ProfileUserEqualsCurrentUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/ProfileUserEqualsCurrentUser.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/ProfileUserEqualsCurrentUser.java	(revision )
@@ -6,12 +6,6 @@
 
 import java.util.Map;
 
-/**
- * Whether current user is equal to the profile user.
- *
- * @author stasyukd
- * @since 6.0.0-SNAPSHOT
- */
 public class ProfileUserEqualsCurrentUser implements Condition {
 
     @Override
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/Story.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/Story.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/Story.java	(revision )
@@ -4,31 +4,25 @@
 import net.java.ao.OneToMany;
 import net.java.ao.Preload;
 
-/**
- * TODO - renae this class to be different to JBehave's Story class, e.g. JiraStory
- */
 @Preload
 public interface Story extends Entity {
 
-    //    @NotNull
     String getIssueKey();
 
     void setIssueKey(String issueKey);
 
     Long getIssueId();
 
-    void setIssueLong();
+    void setIssueId(Long issueId);
 
     Long getVersion();
 
     void setVersion(Long version);
 
-    //    @NotNull
     String getProjectKey();
 
     void setProjectKey(String projectKey);
 
-    //    @NotNull
     String getAsString();
 
     void setAsString(String asString);
@@ -38,5 +32,5 @@
     void setLastEditedBy(String lastEditedBy);
 
     @OneToMany
-    StoryReport[] getStoryHtmlReports();
+    StoryReport[] getStoryReports();
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryController.js	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryController.js	(revision )
@@ -868,16 +868,15 @@
 
     this.showSuccessMessage = function (saveCancelMsg) {
 
-        JIRA.Messages.showSuccessMsg("Story updated successfully");
-
-//        AJS.$("#storyMsgBar").empty();
-//        AJS.messages.success("#storyMsgBar", {
-//            title: null,
-//            fadeout: true,
-//            delay: 3000,
-//            body: saveCancelMsg,
-//            closeable: true
-//        });
+//        JIRA.Messages.showSuccessMsg("Story updated successfully");
+        AJS.$("#storyMsgBar").empty();
+        AJS.messages.success("#storyMsgBar", {
+            title: null,
+            fadeout: true,
+            delay: 3000,
+            body: saveCancelMsg,
+            closeable: true
+        });
     }
 
     this.loadStory = function () {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/JiraIssueHasStoryCondition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/JiraIssueHasStoryCondition.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/JiraIssueHasStoryCondition.java	(revision )
@@ -10,9 +10,6 @@
 import java.util.List;
 import java.util.Map;
 
-/**
- * Created by Dmytro on 5/7/2014.
- */
 public class JiraIssueHasStoryCondition implements Condition {
 
     private StoryDao storyDao;
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/StepDocsPayload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/StepDocsPayload.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/StepDocsPayload.java	(revision )
@@ -5,9 +5,6 @@
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.List;
 
-/**
- * Created by Dmytro on 4/23/2014.
- */
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
 public class StepDocsPayload {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/contextproviders/StoryPanelContextProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/contextproviders/StoryPanelContextProvider.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/contextproviders/StoryPanelContextProvider.java	(revision )
@@ -7,9 +7,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-/**
- * Created by Dmytro on 5/5/2014.
- */
 public class StoryPanelContextProvider extends AbstractJiraContextProvider {
 
     @Override
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StoryDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StoryDao.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StoryDao.java	(revision )
@@ -2,8 +2,6 @@
 
 import com.atlassian.activeobjects.external.ActiveObjects;
 import net.java.ao.Query;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.util.List;
 
@@ -11,8 +9,6 @@
 import static com.google.common.collect.Lists.newArrayList;
 
 public final class StoryDao {
-
-    private final Logger log = LoggerFactory.getLogger(getClass());
 
     private final ActiveObjects ao;
 
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StoryServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StoryServiceImpl.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StoryServiceImpl.java	(revision )
@@ -166,7 +166,7 @@
     private void deleteStory(Story story) {
 
         // delete story reports
-        StoryReport[] storyTestReports = story.getStoryHtmlReports();
+        StoryReport[] storyTestReports = story.getStoryReports();
         for (StoryReport storyTestReport : storyTestReports) {
             storyReportDao.delete(storyTestReport);
         }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/TabularFieldInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/TabularFieldInfo.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/TabularFieldInfo.java	(revision )
@@ -5,12 +5,6 @@
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.List;
 
-/**
- * DTO for tabular parameter fields.
- *
- * @author stasyukd
- * @since 6.0.0-SNAPSHOT
- */
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
 public class TabularFieldInfo {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/JiraStory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/JiraStory.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/JiraStory.java	(revision )
@@ -4,9 +4,6 @@
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlRootElement;
 
-/**
- * @author Maryna Stasyuk
- */
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
 public class JiraStory {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(revision )
@@ -11,22 +11,10 @@
 })(function (CodeMirror) {
     "use strict";
 
-    var keywords = [
-        {text: "Meta:", stateField: "allowMeta", stateTokenType: "meta-title"},
-        {text: "Narrative:", stateField: "allowNarrative", stateTokenType: "narrative-title"},
-        {text: "Scenario:", stateField: "allowScenario", stateTokenType: "scenario-keyword"},
-        {text: "Given ", stateField: "allowSteps", stateTokenType: "step-keyword"},
-        {text: "When ", stateField: "allowSteps", stateTokenType: "step-keyword"},
-        {text: "Then ", stateField: "allowSteps", stateTokenType: "step-keyword"},
-        {text: "And ", stateField: "allowAndStep", stateTokenType: "step-keyword-and"},
-    ];
-
-    // fetch step hints
     var stepDocs = null;
     AJS.$(function () {
         var storyService = new StoryService();
         var projectKey = new PageUtils().getProjectKey();
-//        console.log("projectKey - " + projectKey);
         storyService.fetchStepDocs(projectKey, function (foundStepDocs) {
             stepDocs = foundStepDocs;
         });
@@ -34,60 +22,234 @@
 
     CodeMirror.registerHelper("hint", "jbehave", function (editor, options) {
 
-        console.log("########################## in autocomplete");
-
         options.completeSingle = false;
         options.closeOnUnfocus = false;
-
         var wordPattern = /[\w$]+/;
         var cur = editor.getCursor();
-
         var globalFromCh = 0;
         var globalToCh = cur.ch;
-
         var curLine = editor.getLine(cur.line);
-        console.log("curLine - " + curLine);
-
         var cursorPos = cur.ch;
         var currentText = curLine.slice(0, cursorPos);
-        console.log("currentText - " + currentText);
-
         var list = [];
+        var currentToken = editor.getTokenAt(cur);
+        var currentState = currentToken.state;
 
-        var token = editor.getTokenAt(cur);
-        console.log("token.string - " + token.string);
-        console.log("token.type - " + token.type);
-        var state = token.state;
+        var hint;
 
-        // hint on keywords that must be at start of line
-        for (var i = 0; i < keywords.length; i++) {
-            var keyword = keywords[i]
-            if ((state[keyword.stateField]
-                || token.type == keyword.stateTokenType)
-                && (cursorPos == 0 || keyword.text.indexOf(currentText) == 0)) {
-                list.push(keyword.text);
+        /**
+         * Meta
+         */
+        hint = "Meta:";
+        if (currentState.allowMeta && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-meta-title'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
-            }
+        }
+
+        /**
+         * Meta field - @
+         */
+        hint = "@";
+        if (currentState.allowMetaField && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-meta-field'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
         }
 
+        /**
+         * Meta field - skip
+         */
+        hint = "@skip";
+        if (currentState.allowMetaField && cursorPos == 1 && hint.indexOf(currentText) == 0) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-meta-field'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Meta field - ignored
+         */
+        hint = "@ignored true";
+        if (currentState.allowMetaField && cursorPos == 1 && hint.indexOf(currentText) == 0) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-meta-field'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Meta field - author
+         */
+        hint = "@author ";
+        if (currentState.allowMetaField && cursorPos == 1 && hint.indexOf(currentText) == 0) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-meta-field'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Meta field - themes
+         */
+        hint = "@themes ";
+        if (currentState.allowMetaField && cursorPos == 1 && hint.indexOf(currentText) == 0) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-meta-field'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Narrative title
+         */
+        hint = "Narrative:";
+        if (currentState.allowNarrative && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-narrative-title'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Narrative - In order to
+         */
+        hint = "In order to ";
+        if (currentState.allowNarrativeInOrderTo && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-narrative-field-keyword'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Narrative - As a
+         */
+        hint = "As a ";
+        if (currentState.allowNarrativeAsA && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-narrative-field-keyword'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Narrative - I want to
+         */
+        hint = "I want to ";
+        if (currentState.allowNarrativeIWantTo && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-narrative-field-keyword'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Scenario:
+         */
+        hint = "Scenario:";
+        if (currentState.allowScenario && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-scenario-keyword'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Given
+         */
+        hint = "Given ";
+        if (currentState.allowSteps && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-step-keyword'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * When
+         */
+        hint = "When ";
+        if (currentState.allowSteps && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-step-keyword'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Then
+         */
+        hint = "Then ";
+        if (currentState.allowSteps && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-step-keyword'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * And
+         */
+        hint = "And ";
+        if (currentState.allowAndStep && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-step-keyword'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
         var doc = editor.getDoc();
         var cursor = editor.getCursor();
         var doc = editor.getDoc();
         var lineHandle = doc.getLineHandle(cursor.line);
-
         var lineTextSoFar = lineHandle.text.substring(0, cursor.ch);
-
         var lineTextTrimmed = lineTextSoFar.replace(/\s+$/g, '');
-
-        var stepKeyword = state.currentStepKeyword;
-
+        var stepKeyword = currentState.currentStepKeyword;
         if (lineTextTrimmed.length > 0 && stepKeyword != null) {
-            // hint on steps
+
+            /**
+             * hint on steps
+             */
             for (var k = 0; k < stepDocs.length; k++) {
                 var stepDoc = stepDocs[k];
 
                 if (stepDoc.startingWord == stepKeyword) {
 
-                    var stepStartingKeyword = state.stepStartingKeyword;
+                    var stepStartingKeyword = currentState.stepStartingKeyword;
 
                     var stepPatternWithKeyword = stepStartingKeyword + stepDoc.pattern;
                     if (stepPatternWithKeyword.substr(0, lineTextSoFar.length) == lineTextSoFar) {
@@ -100,14 +262,14 @@
                         }
                         var pattern = stepDoc.pattern;
                         var regExpPattern = new RegExp("(\\$[^\\s]*)", "g");
-                        pattern = pattern.replace(regExpPattern, "<span class='cm-step-body matched-step step-parameter'>$1</span>");
+                        pattern = pattern.replace(regExpPattern, "<span class='cm-jb-story-step-body matched-step step-parameter'>$1</span>");
                         stepHint.markedPattern = pattern;
                         stepHint.stepStartingKeyword = stepStartingKeyword;
                         stepHint.stepDoc = stepDoc;
                         stepHint.render = function (element, data, self) {
                             element.innerHTML =
-                                "<span class='cm-step-keyword matched-step'>" + self.stepStartingKeyword + "</span>"
+                                "<span class='cm-jb-story-step-keyword matched-step'>" + self.stepStartingKeyword + "</span>"
-                                    + self.markedPattern;
+                                + self.markedPattern;
                         };
                         list.push(stepHint);
                     }
@@ -168,7 +330,7 @@
                                 var isFirstTableLine = true;
                                 var actualFirstTableLine = null;
                                 var previousLineNum = cursor.line - 1;
-                                while(previousLineNum >= 0) {
+                                while (previousLineNum >= 0) {
                                     var previousLine = editor.getLineHandle(previousLineNum);
                                     var previousLineText = previousLine.text;
                                     if (previousLineText.length == 0 || previousLineText.trim().length == 0) {
@@ -193,7 +355,7 @@
                                             // do the hint on field name
                                             var stepHint = new Object();
                                             stepHint.text = tabularFieldName;
-                                            stepHint.html = "<span class='cm-step-body matched-step step-parameter'>" + tabularFieldName + "</span>";
+                                            stepHint.html = "<span class='cm-jb-story-step-body matched-step step-parameter'>" + tabularFieldName + "</span>";
                                             stepHint.render = function (element, data, self) {
                                                 element.innerHTML = self.html;
                                             };
@@ -225,7 +387,7 @@
                                                             // do the hint on field allowed value
                                                             var stepHint = new Object();
                                                             stepHint.text = fieldAllowedValue;
-                                                            stepHint.html = "<span class='cm-step-body matched-step step-parameter'>" + fieldAllowedValue + "</span>";
+                                                            stepHint.html = "<span class='cm-jb-story-step-body matched-step step-parameter'>" + fieldAllowedValue + "</span>";
                                                             stepHint.render = function (element, data, self) {
                                                                 element.innerHTML = self.html;
                                                             };
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StepDocResource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StepDocResource.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StepDocResource.java	(revision )
@@ -7,27 +7,19 @@
 import org.bitbucket.jbehaveforjira.plugin.service.StepDocsService;
 import org.codehaus.jackson.map.DeserializationConfig;
 import org.codehaus.jackson.map.ObjectMapper;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import javax.ws.rs.*;
 import javax.ws.rs.core.MediaType;
 import java.io.IOException;
 import java.util.List;
 
-/**
- * Contains rest api methods related to processing of step docs.
- *
- * @author stasyukd
- * @since 2.0.0-SNAPSHOT
- */
 @Path("/step-doc")
 public class StepDocResource {
 
-    private Logger log = LoggerFactory.getLogger(this.getClass());
-
     private StepDocsService stepDocsSerivce;
+
     private SearchService searchService;
+
     private JiraAuthenticationContext authenticationContext;
 
     public StepDocResource(StepDocsService stepDocsSerivce, SearchService searchService,
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StoryFindResource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StoryFindResource.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StoryFindResource.java	(revision )
@@ -20,12 +20,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-/**
- * Contains rest api methods related to processing of Story objects.
- *
- * @author stasyukd
- * @since 2.0.0-SNAPSHOT
- */
 @Path("/find")
 public class StoryFindResource {
 
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/test/java/org/bitbucket/jbehaveforjira/plugin/ao/StoryServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/test/java/org/bitbucket/jbehaveforjira/plugin/ao/StoryServiceImplTest.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/test/java/org/bitbucket/jbehaveforjira/plugin/ao/StoryServiceImplTest.java	(revision )
@@ -15,10 +15,7 @@
 import org.junit.runner.RunWith;
 
 /**
- * TODO - add at least one line of java doc comment.
- *
- * @author stasyukd
- * @since 2.0.0-SNAPSHOT
+ * @author Maryna Pristrom
  */
 @Ignore
 @Jdbc(HsqlDbFileJdbcConfiguration.class)
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/JiraIssueHasStoryReportsCondition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/JiraIssueHasStoryReportsCondition.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/JiraIssueHasStoryReportsCondition.java	(revision )
@@ -12,9 +12,6 @@
 import java.util.List;
 import java.util.Map;
 
-/**
- * Created by Dmytro on 5/7/2014.
- */
 public class JiraIssueHasStoryReportsCondition implements Condition {
 
     private StoryDao storyDao;
@@ -43,7 +40,7 @@
             // check if there are reports
             Validate.isTrue(stories.size() == 1);
             Story story = stories.get(0);
-            StoryReport[] storyHtmlReports = story.getStoryHtmlReports();
+            StoryReport[] storyHtmlReports = story.getStoryReports();
             return storyHtmlReports.length != 0;
         }
     }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StoryTestResource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StoryTestResource.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/StoryTestResource.java	(revision )
@@ -17,12 +17,6 @@
 import java.io.IOException;
 import java.util.List;
 
-/**
- * Contains rest api methods related to processing of Story objects.
- *
- * @author stasyukd
- * @since 2.0.0-SNAPSHOT
- */
 @Path("/story-test")
 public class StoryTestResource {
 
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/StoryPaths.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/StoryPaths.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/StoryPaths.java	(revision )
@@ -5,9 +5,6 @@
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.List;
 
-/**
- * @author Maryna Stasyuk
- */
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
 public class StoryPaths {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StepDocsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StepDocsService.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StepDocsService.java	(revision )
@@ -5,9 +5,6 @@
 
 import java.util.List;
 
-/**
- * Created by Dmytro on 4/23/2014.
- */
 @Transactional
 public interface StepDocsService {
 
@@ -15,5 +12,4 @@
 
     List<StepDocDTO> findForProject(String projectKey);
 
-//    List<StepDocDTO> findForProject(String projectKey, StepType stepType);
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/python-hint.js
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/python-hint.js	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/python-hint.js	(date 1409146073000)
@@ -1,102 +0,0 @@
-// CodeMirror, copyright (c) by Marijn Haverbeke and others
-// Distributed under an MIT license: http://codemirror.net/LICENSE
-
-(function(mod) {
-  if (typeof exports == "object" && typeof module == "object") // CommonJS
-    mod(require("../../lib/codemirror"));
-  else if (typeof define == "function" && define.amd) // AMD
-    define(["../../lib/codemirror"], mod);
-  else // Plain browser env
-    mod(CodeMirror);
-})(function(CodeMirror) {
-  "use strict";
-
-  function forEach(arr, f) {
-    for (var i = 0, e = arr.length; i < e; ++i) f(arr[i]);
-  }
-
-  function arrayContains(arr, item) {
-    if (!Array.prototype.indexOf) {
-      var i = arr.length;
-      while (i--) {
-        if (arr[i] === item) {
-          return true;
-        }
-      }
-      return false;
-    }
-    return arr.indexOf(item) != -1;
-  }
-
-  function scriptHint(editor, _keywords, getToken) {
-    // Find the token at the cursor
-    var cur = editor.getCursor(), token = getToken(editor, cur), tprop = token;
-    // If it's not a 'word-style' token, ignore the token.
-
-    if (!/^[\w$_]*$/.test(token.string)) {
-        token = tprop = {start: cur.ch, end: cur.ch, string: "", state: token.state,
-                         className: token.string == ":" ? "python-type" : null};
-    }
-
-    if (!context) var context = [];
-    context.push(tprop);
-
-    var completionList = getCompletions(token, context);
-    completionList = completionList.sort();
-
-    return {list: completionList,
-            from: CodeMirror.Pos(cur.line, token.start),
-            to: CodeMirror.Pos(cur.line, token.end)};
-  }
-
-  function pythonHint(editor) {
-    return scriptHint(editor, pythonKeywordsU, function (e, cur) {return e.getTokenAt(cur);});
-  }
-  CodeMirror.registerHelper("hint", "python", pythonHint);
-
-  var pythonKeywords = "and del from not while as elif global or with assert else if pass yield"
-+ "break except import print class exec in raise continue finally is return def for lambda try";
-  var pythonKeywordsL = pythonKeywords.split(" ");
-  var pythonKeywordsU = pythonKeywords.toUpperCase().split(" ");
-
-  var pythonBuiltins = "abs divmod input open staticmethod all enumerate int ord str "
-+ "any eval isinstance pow sum basestring execfile issubclass print super"
-+ "bin file iter property tuple bool filter len range type"
-+ "bytearray float list raw_input unichr callable format locals reduce unicode"
-+ "chr frozenset long reload vars classmethod getattr map repr xrange"
-+ "cmp globals max reversed zip compile hasattr memoryview round __import__"
-+ "complex hash min set apply delattr help next setattr buffer"
-+ "dict hex object slice coerce dir id oct sorted intern ";
-  var pythonBuiltinsL = pythonBuiltins.split(" ").join("() ").split(" ");
-  var pythonBuiltinsU = pythonBuiltins.toUpperCase().split(" ").join("() ").split(" ");
-
-  function getCompletions(token, context) {
-    var found = [], start = token.string;
-    function maybeAdd(str) {
-      if (str.lastIndexOf(start, 0) == 0 && !arrayContains(found, str)) found.push(str);
-    }
-
-    function gatherCompletions(_obj) {
-        forEach(pythonBuiltinsL, maybeAdd);
-        forEach(pythonBuiltinsU, maybeAdd);
-        forEach(pythonKeywordsL, maybeAdd);
-        forEach(pythonKeywordsU, maybeAdd);
-    }
-
-    if (context) {
-      // If this is a property, see if it belongs to some object we can
-      // find in the current environment.
-      var obj = context.pop(), base;
-
-      if (obj.type == "variable")
-          base = obj.string;
-      else if(obj.type == "variable-3")
-          base = ":" + obj.string;
-
-      while (base != null && context.length)
-        base = base[context.pop().string];
-      if (base != null) gatherCompletions(base);
-    }
-    return found;
-  }
-});
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/GroovyClientDownload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/GroovyClientDownload.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/rest/GroovyClientDownload.java	(revision )
@@ -11,18 +11,17 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 
-/**
- * Created by Dmytro on 8/15/2014.
- */
 @Path("/groovy-client")
 public class GroovyClientDownload {
 
+    private final String baseDir = "org/bitbucket/jbehaveforjira/groovyclient/";
+
     @GET
     @Path("/story-paths-finder")
     @Produces(MediaType.APPLICATION_JSON)
     public String getStoryPathsFinder() {
 
-        String scriptPath = "groovy/GroovyStoryPathsFinder.groovy";
+        String scriptPath = baseDir + "GroovyStoryPathsFinder.groovy";
         String groovyScript = loadScript(scriptPath);
         return groovyScript;
     }
@@ -32,7 +31,7 @@
     @Produces(MediaType.APPLICATION_JSON)
     public String getStoryLoader() {
 
-        String scriptPath = "groovy/GroovyStoryLoader.groovy";
+        String scriptPath = baseDir + "GroovyStoryLoader.groovy";
         String groovyScript = loadScript(scriptPath);
         return groovyScript;
     }
@@ -42,7 +41,7 @@
     @Produces(MediaType.APPLICATION_JSON)
     public String getStepDocReporter() {
 
-        String scriptPath = "groovy/GroovyStepDocReporter.groovy";
+        String scriptPath = baseDir + "GroovyStepDocReporter.groovy";
         String groovyScript = loadScript(scriptPath);
         return groovyScript;
     }
@@ -52,7 +51,7 @@
     @Produces(MediaType.APPLICATION_JSON)
     public String getStoryReporter() {
 
-        String scriptPath = "groovy/GroovyStoryReporter.groovy";
+        String scriptPath = baseDir + "GroovyStoryReporter.groovy";
         String groovyScript = loadScript(scriptPath);
         return groovyScript;
     }
@@ -68,7 +67,6 @@
         try {
             line = br.readLine();
             while (line != null) {
-                System.out.println("line = " + line);
                 sb.append(line);
                 sb.append("\n");
                 line = br.readLine();
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/anyword-hint.js
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/anyword-hint.js	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/anyword-hint.js	(date 1409146073000)
@@ -1,42 +0,0 @@
-// CodeMirror, copyright (c) by Marijn Haverbeke and others
-// Distributed under an MIT license: http://codemirror.net/LICENSE
-
-(function(mod) {
-  if (typeof exports == "object" && typeof module == "object") // CommonJS
-    mod(require("../../lib/codemirror"));
-  else if (typeof define == "function" && define.amd) // AMD
-    define(["../../lib/codemirror"], mod);
-  else // Plain browser env
-    mod(CodeMirror);
-})(function(CodeMirror) {
-  "use strict";
-
-  var WORD = /[\w$]+/, RANGE = 500;
-
-  CodeMirror.registerHelper("hint", "anyword", function(editor, options) {
-    var word = options && options.word || WORD;
-    var range = options && options.range || RANGE;
-    var cur = editor.getCursor(), curLine = editor.getLine(cur.line);
-    var start = cur.ch, end = start;
-    while (end < curLine.length && word.test(curLine.charAt(end))) ++end;
-    while (start && word.test(curLine.charAt(start - 1))) --start;
-    var curWord = start != end && curLine.slice(start, end);
-
-    var list = [], seen = {};
-    var re = new RegExp(word.source, "g");
-    for (var dir = -1; dir <= 1; dir += 2) {
-      var line = cur.line, endLine = Math.min(Math.max(line + dir * range, editor.firstLine()), editor.lastLine()) + dir;
-      for (; line != endLine; line += dir) {
-        var text = editor.getLine(line), m;
-        while (m = re.exec(text)) {
-          if (line == cur.line && m[0] === curWord) continue;
-          if ((!curWord || m[0].lastIndexOf(curWord, 0) == 0) && !Object.prototype.hasOwnProperty.call(seen, m[0])) {
-            seen[m[0]] = true;
-            list.push(m[0]);
-          }
-        }
-      }
-    }
-    return {list: list, from: CodeMirror.Pos(cur.line, start), to: CodeMirror.Pos(cur.line, end)};
-  });
-});
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/actions/UpdateJBehavePreferencesAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/actions/UpdateJBehavePreferencesAction.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/actions/UpdateJBehavePreferencesAction.java	(revision )
@@ -8,13 +8,11 @@
 import com.atlassian.jira.user.ApplicationUser;
 import com.atlassian.jira.user.preferences.UserPreferencesManager;
 import com.atlassian.jira.web.action.JiraWebActionSupport;
-import com.atlassian.plugin.webresource.WebResourceManager;
 import org.ofbiz.core.entity.GenericValue;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import webwork.action.ActionContext;
 
-import java.util.HashMap;
 import java.util.Map;
 
 public class UpdateJBehavePreferencesAction extends JiraWebActionSupport {
@@ -42,29 +40,17 @@
 
     private final JiraAuthenticationContext authenticationContext;
 
-    private final WebResourceManager webResourceManager;
-
     private UserPreferencesManager preferencesManager;
 
-    private HashMap fieldValuesHolder = null;
-
     public UpdateJBehavePreferencesAction(IssueService issueService,
                                           JiraAuthenticationContext authenticationContext,
-                                          WebResourceManager webResourceManager,
                                           final UserPreferencesManager preferencesManager) {
         this.issueService = issueService;
         this.authenticationContext = authenticationContext;
-        this.webResourceManager = webResourceManager;
 
         this.preferencesManager = preferencesManager;
     }
 
-    /**
-     * The business logic of your form.
-     * Only gets called if validation passes.
-     *
-     * @return the view to display - should usually be "success"
-     */
     @RequiresXsrfCheck
     protected String doExecute() throws Exception {
 
@@ -101,12 +87,6 @@
         return returnComplete("/browse/" + this.getIssue().getKey());
     }
 
-    /**
-     * The initialization logic of the form.
-     * Validation does NOT happen before this.
-     *
-     * @return the view to display - should usually be "input"
-     */
     public String doDefault() throws Exception {
 
         ApplicationUser user = authenticationContext.getUser();
@@ -116,20 +96,13 @@
         this.autoAlignTables = preferences.getBoolean(PREFERENCE_KEY_AUTO_ALIGN_TABLES);
         this.autoInsertTabularFields = preferences.getBoolean(PREFERENCE_KEY_AUTO_INSERT_TABLES);
 
-        // Initialization logic
         return INPUT;
     }
 
-    /**
-     * Used by the decorator
-     */
     public GenericValue getProject() {
         return getIssue().getProject();
     }
 
-    /**
-     * Used by the decorator
-     */
     public Issue getIssue() {
         return getIssueObject();
     }
@@ -143,8 +116,6 @@
 
         return issueResult.getIssue();
     }
-
-    // Getter adn Setters for passing the form params
 
     public Long getId() {
         return id;
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/StoryTestReportsPayload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/StoryTestReportsPayload.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/StoryTestReportsPayload.java	(revision )
@@ -6,9 +6,6 @@
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.List;
 
-/**
- * Created by Dmytro on 4/10/2014.
- */
 @XmlRootElement(name = "stories_payload")
 @XmlAccessorType(XmlAccessType.FIELD)
 public class StoryTestReportsPayload {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/TestStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/TestStatus.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/storyreport/TestStatus.java	(revision )
@@ -1,8 +1,5 @@
 package org.bitbucket.jbehaveforjira.plugin.dto.storyreport;
 
-/**
- * @author Maryna Stasyuk
- */
 public enum TestStatus {
 
     PASSED,
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStoryReporter.groovy
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStoryReporter.groovy	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStoryReporter.groovy	(date 1409146073000)
@@ -1,725 +0,0 @@
-package groovy
-
-import com.sun.jersey.api.client.Client
-import com.sun.jersey.api.client.WebResource
-import org.apache.commons.lang.Validate
-import org.jbehave.core.i18n.LocalizedKeywords
-import org.jbehave.core.model.*
-import org.jbehave.core.reporters.HtmlOutput
-import org.jbehave.core.reporters.PrintStreamOutput
-import org.jbehave.core.reporters.StoryReporter
-import org.jbehave.core.steps.StepCreator
-
-import javax.ws.rs.core.MediaType
-import javax.xml.bind.annotation.XmlAccessType
-import javax.xml.bind.annotation.XmlAccessorType
-import javax.xml.bind.annotation.XmlRootElement
-import java.util.regex.Matcher
-import java.util.regex.Pattern
-
-/**
- * @author Maryna Stasyuk
- */
-public class GroovyStoryReporter implements StoryReporter {
-
-    public static enum TestStatus {
-
-        PASSED,
-
-        FAILED,
-
-        PENDING,
-
-        NOT_PERFORMED,
-
-        IGNORED
-
-    }
-
-    private final HtmlOutput htmlOutput;
-
-    private boolean compressFailureTrace;
-    private boolean reportFailureTrace;
-    private LocalizedKeywords keywords;
-
-    private PrintStream printStream;
-
-    private String environment;
-    private Properties outputPatterns;
-
-    private String jiraBaseUrl;
-
-    private String jiraProject;
-
-    private String addTestReportPath = "rest/story-res/1.0/story-test/add-for-path";
-
-    private String storyPath;
-
-    private Long jiraVersion;
-
-    private TestStatus status;
-
-    private int totalScenarios;
-
-    private int totalScenariosPassed;
-
-    private int totalScenariosFailed;
-
-    private int totalScenariosPending;
-
-    private int totalScenariosIgnored;
-
-    private int totalScenariosNotPerformed;
-
-    private TestStatus currentScenarioStatus;
-
-    private final List<Byte> bytesList;
-
-    public GroovyStoryReporter(String jiraBaseUrl, String jiraProject, String environment) {
-//        this(new Properties(), new LocalizedKeywords(), false, jiraBaseUrl, jiraProject, environment);
-
-        this.bytesList = new LinkedList<Byte>();
-        OutputStream outStream = new OutputStream() {
-
-            @Override
-            public void write(int b) throws IOException {
-                bytesList.add((byte) b);
-            }
-
-        };
-
-        this.printStream = new PrintStream(outStream);
-
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.jiraProject = jiraProject;
-        this.environment = environment;
-
-        this.outputPatterns = new Properties();
-        this.outputPatterns = mergeOverridenPatterns(outputPatterns);
-        this.keywords = new LocalizedKeywords();
-        this.reportFailureTrace = false;
-        this.compressFailureTrace = false;
-
-        this.htmlOutput = new CustomHtmlOutput(printStream, outputPatterns, keywords, reportFailureTrace, compressFailureTrace);
-    }
-
-//    public GroovyStoryReporter(Properties outputPatterns,
-//                             Keywords keywords, boolean reportFailureTrace,
-//                             String jiraBaseUrl, String jiraProject, String environment) {
-//        this(new BytesListPrintStream(new LinkedList<Byte>()), outputPatterns, keywords, reportFailureTrace, false,
-//                jiraBaseUrl, jiraProject, environment);
-//    }
-
-//    public GroovyStoryReporter(BytesListPrintStream printStream, Properties outputPatterns,
-//                             Keywords keywords, boolean reportFailureTrace,
-//                             boolean compressFailureTrace,
-//                             String jiraBaseUrl, String jiraProject, String environment) {
-//        super(printStream, mergeOverridenPatterns(outputPatterns), keywords, reportFailureTrace, compressFailureTrace);
-//        this.printStream = printStream;
-//        this.jiraBaseUrl = jiraBaseUrl;
-//        this.jiraProject = jiraProject;
-//        this.environment = environment;
-//    }
-
-    public void narrative(Narrative narrative) {
-        htmlOutput.narrative(narrative);
-    }
-
-    @Override
-    public void lifecyle(Lifecycle lifecycle) {
-        htmlOutput.lifecyle(lifecycle);
-    }
-
-    @Override
-    public void beforeScenario(String title) {
-
-        this.totalScenarios++;
-        this.currentScenarioStatus = TestStatus.PASSED; // assume pass initially
-
-        htmlOutput.beforeScenario(title);
-    }
-
-    @Override
-    public void scenarioMeta(Meta meta) {
-        htmlOutput.scenarioMeta(meta);
-    }
-
-    @Override
-    public void afterScenario() {
-
-        htmlOutput.afterScenario();
-
-        switch (this.currentScenarioStatus) {
-            case TestStatus.PASSED:
-                totalScenariosPassed++;
-                break;
-            case TestStatus.FAILED:
-                totalScenariosFailed++;
-                break;
-            case TestStatus.PENDING:
-                totalScenariosPending++;
-                break;
-            case TestStatus.IGNORED:
-                totalScenariosIgnored++;
-                break;
-            case TestStatus.NOT_PERFORMED:
-                totalScenariosNotPerformed++;
-                break;
-        }
-    }
-
-    @Override
-    public void givenStories(GivenStories givenStories) {
-        htmlOutput.givenStories(givenStories);
-    }
-
-    @Override
-    public void givenStories(List<String> storyPaths) {
-        htmlOutput.givenStories(storyPaths);
-    }
-
-    @Override
-    public void beforeExamples(List<String> steps, ExamplesTable table) {
-        htmlOutput.beforeExamples(steps, table);
-    }
-
-    @Override
-    public void example(Map<String, String> tableRow) {
-        htmlOutput.example(tableRow);
-    }
-
-    @Override
-    public void afterExamples() {
-        htmlOutput.afterExamples();
-    }
-
-    @Override
-    public void beforeStep(String step) {
-        htmlOutput.beforeStep(step);
-    }
-
-    @Override
-    public void scenarioNotAllowed(Scenario scenario, String filter) {
-
-        htmlOutput.scenarioNotAllowed(scenario, filter);
-        if (this.currentScenarioStatus == TestStatus.PASSED /*i.e. if it has not been set to some other status yet*/) {
-            this.currentScenarioStatus = TestStatus.IGNORED;
-        }
-    }
-
-    @Override
-    public void successful(String step) {
-
-        htmlOutput.successful(step);
-    }
-
-    @Override
-    public void ignorable(String step) {
-        htmlOutput.ignorable(step);
-    }
-
-    @Override
-    public void failed(String step, Throwable storyFailure) {
-
-        htmlOutput.failed(step, storyFailure);
-        this.currentScenarioStatus = TestStatus.FAILED;
-    }
-
-    @Override
-    public void failedOutcomes(String step, OutcomesTable table) {
-        htmlOutput.failedOutcomes(step, table);
-    }
-
-    @Override
-    public void restarted(String step, Throwable cause) {
-        htmlOutput.restarted(step, cause);
-    }
-
-    @Override
-    public void dryRun() {
-        htmlOutput.dryRun();
-    }
-
-    @Override
-    public void pendingMethods(List<String> methods) {
-        htmlOutput.pendingMethods(methods);
-    }
-
-    @Override
-    public void pending(String step) {
-
-        htmlOutput.pending(step);
-        if (this.currentScenarioStatus != TestStatus.FAILED) { // fail status has priority over pending
-            this.currentScenarioStatus = TestStatus.PENDING;
-        }
-    }
-
-    @Override
-    public void notPerformed(String step) {
-        htmlOutput.notPerformed(step);
-    }
-
-
-    @Override
-    public void storyNotAllowed(Story story, String filter) {
-        htmlOutput.storyNotAllowed(story, filter);
-    }
-
-    @Override
-    public void storyCancelled(Story story, StoryDuration storyDuration) {
-        htmlOutput.storyCancelled(story, storyDuration);
-    }
-
-    @Override
-    public void beforeStory(Story story, boolean givenStory) {
-
-        this.status = TestStatus.PASSED; // assume passed at start, and then change to other if failed/pending, etc.
-
-        storyPath = story.getPath();
-
-        if (!givenStory && !storyPath.equals("BeforeStories") && !storyPath.equals("AfterStories")) {
-            // extract version
-            String regexPattern = "(.*)\\.([0-9]*)(\\.story)";
-            Pattern p = Pattern.compile(regexPattern);
-            Matcher matcher = p.matcher(storyPath);
-            if (matcher.matches()) {
-                String versionStr = matcher.group(2);
-                jiraVersion = Long.parseLong(versionStr);
-            } else {
-                throw new IllegalArgumentException("JiraStory path must match pattern - " + regexPattern);
-            }
-        }
-
-        htmlOutput.beforeStory(story, givenStory);
-    }
-
-    @Override
-    public void afterStory(boolean givenStory) {
-
-        htmlOutput.afterStory(givenStory);
-
-        if (!givenStory && !storyPath.equals("BeforeStories") && !storyPath.equals("AfterStories")) {
-
-            // set story status
-            if (totalScenariosFailed > 0) {
-                this.status = TestStatus.FAILED;
-            } else if (totalScenariosPending > 0) {
-                this.status = TestStatus.PENDING;
-            } else if (totalScenariosIgnored == totalScenarios) {
-                this.status = TestStatus.IGNORED;
-            } else {
-                this.status = TestStatus.PASSED;
-            }
-
-            String storyReport = bytesListToString(this.bytesList);
-            sendStoryReport(storyReport);
-        }
-
-    }
-
-    private static String bytesListToString(List<Byte> writtenBytes) {
-
-        Byte[] bytes = writtenBytes.toArray(new Byte[writtenBytes.size()]);
-        byte[] bytesArray = new byte[bytes.length];
-        for (int i = 0; i < bytes.length; i++) {
-            Byte aByte = bytes[i];
-            bytesArray[i] = aByte;
-        }
-
-        String str = new String(bytesArray);
-        return str;
-    }
-
-    protected void sendStoryReport(String testReport) {
-
-        Validate.notNull(status);
-        Validate.notEmpty(testReport);
-
-        StoryReport storyHtmlReportDTO = new StoryReport(environment, storyPath, jiraVersion, status, testReport);
-
-        storyHtmlReportDTO.setTotalScenarios(totalScenarios);
-        storyHtmlReportDTO.setTotalScenariosPassed(totalScenariosPassed);
-        storyHtmlReportDTO.setTotalScenariosFailed(totalScenariosFailed);
-        storyHtmlReportDTO.setTotalScenariosPending(totalScenariosPending);
-        storyHtmlReportDTO.setTotalScenariosSkipped(totalScenariosIgnored);
-        storyHtmlReportDTO.setTotalScenariosNotPerformed(totalScenariosNotPerformed);
-
-        // remove the version part from story path
-        // extract version
-        String regexPattern = "(.*)\\.([0-9]*)(\\.story)";
-        Pattern p = Pattern.compile(regexPattern);
-        Matcher matcher = p.matcher(storyPath);
-        if (matcher.matches()) {
-            storyPath = matcher.group(1) + matcher.group(3);
-        } else {
-            throw new IllegalArgumentException("JiraStory path must match pattern - " + regexPattern);
-        }
-
-        String loginParams = "?os_username=admin&os_password=admin";
-        String postUrl = (jiraBaseUrl
-                + "/" + addTestReportPath + "/"
-//                + jiraProject + "/"
-                + storyPath
-                + loginParams);
-
-        Client client = Client.create();
-        WebResource res = client.resource(postUrl);
-
-        String response = res.accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .post(String.class, storyHtmlReportDTO);
-
-        System.out.println("response - " + response);
-    }
-
-
-    public static String markTableCorrectly(String text, CustomHtmlOutput htmlOutput) {
-
-        if (text.contains("&#9252;")) {
-
-            StringBuilder sb = new StringBuilder();
-            String[] tokens = text.split("\\&#9252;");
-
-            for (int i = 0; i < tokens.length; i++) {
-                String token = tokens[i];
-                boolean isTableStartLine = false;
-                boolean isTableEndLine = false;
-                if (token.startsWith("|")) {
-                    // table line
-                    if (i == 0 || (i != 0 && !tokens[i - 1].startsWith("|"))) {
-                        // if previous line was not a table line then open the table tag
-                        String tableStartMarker = StepCreator.PARAMETER_TABLE_START;
-                        tableStartMarker = (String) htmlOutput.escape(PrintStreamOutput.Format.HTML, tableStartMarker)[0];
-                        sb.append(tableStartMarker);
-                        sb.append(token);
-                        isTableStartLine = true;
-                    }
-                    if (i == tokens.length - 1 || !tokens[i + 1].startsWith("|")) {
-                        // if this is the last line or the next line is not a table line
-                        String beforePart = token.substring(0, token.lastIndexOf("|") + 1);
-                        sb.append(beforePart);
-                        String tableEndMarker = StepCreator.PARAMETER_TABLE_END;
-                        tableEndMarker = (String) htmlOutput.escape(PrintStreamOutput.Format.HTML, tableEndMarker)[0];
-                        sb.append(tableEndMarker);
-                        String afterPart = token.substring(token.lastIndexOf("|") + 1);
-                        sb.append(afterPart);
-                        isTableEndLine = true;
-                    }
-                    if (!isTableStartLine && !isTableEndLine) {
-                        // table line that is not first or last line in that table
-                        sb.append(token);
-                    }
-                    if (i != 0 && i != tokens.length - 1) {
-                        sb.append("\n");
-                    }
-                } else {
-                    if (i != 0) {
-                        sb.append("\n");
-                    }
-                    sb.append(token);
-                }
-            }
-
-            String result = sb.toString();
-            return result;
-
-        } else {
-            return text;
-        }
-    }
-
-    private static Properties mergeOverridenPatterns(Properties outputPatterns) {
-        Properties patterns = new CustomHTMLFormatPatterns().getPatterns();
-        Properties overridenPatterns = overridenPatterns();
-        patterns.putAll(overridenPatterns);
-        patterns.putAll(outputPatterns);
-        return patterns;
-    }
-
-    public static Properties overridenPatterns() {
-
-        Properties patterns = new Properties();
-
-        patterns.setProperty("beforeScenario", "<div class=\"scenario\">\n<div class=\"scenario-title\"><span class=\"label\">{0}</span> <span class=\"title\">{1}</span></div>\n");
-        patterns.setProperty("afterScenario", "</div>\n");
-        patterns.setProperty("afterScenarioWithFailure", "<pre class=\"failure\">{0}</pre>\n</div>\n");
-
-        patterns.setProperty("successful", "<div class=\"step successful\">{0}</div>\n");
-        patterns.setProperty("ignorable", "<div class=\"step ignorable\">{0}</div>\n");
-        patterns.setProperty("pending", "<div class=\"step pending\">{0} <span class=\"keyword pending\">({1})</span></div>\n");
-        patterns.setProperty("notPerformed", "<div class=\"step notPerformed\">{0} <span class=\"keyword notPerformed\">({1})</span></div>\n");
-        patterns.setProperty("failed", "<div class=\"step failed\">{0} <span class=\"keyword failed\">({1})</span><br/><span class=\"message failed\">{2}</span></div>\n");
-        patterns.setProperty("restarted", "<div class=\"step restarted\">{0} <span class=\"message restarted\">{1}</span></div>\n");
-
-        patterns.setProperty("pendingMethod", "");
-
-        return patterns;
-    }
-
-    /**
-     * @author Maryna Stasyuk
-     */
-    public static class CustomHTMLFormatPatterns {
-
-        public Properties getPatterns() {
-            return patterns;
-        }
-
-        private final Properties patterns;
-
-        public CustomHTMLFormatPatterns() {
-
-            patterns = new Properties();
-            patterns.setProperty("dryRun", "<div class=\"dryRun\">{0}</div>\n");
-
-            //        patterns.setProperty("beforeStory", "<div class=\"story\">\n<h1>{0}</h1>\n<div class=\"path\">{1}</div>\n");
-            patterns.setProperty("beforeStory", "<div class=\"story\">\n");
-
-            //        patterns.setProperty("beforeStory", "<div class=\"story\">\n");
-            patterns.setProperty("afterStory", "</div>\n");
-
-            patterns.setProperty("storyCancelled", "<div class=\"cancelled\">{0} ({1} {2} s)</div>\n");
-            patterns.setProperty("pendingMethod", "<div><pre class=\"pending\">{0}</pre></div>\n");
-            patterns.setProperty("metaStart", "<div class=\"meta\">\n<div class=\"keyword\">{0}</div>\n");
-            patterns.setProperty("metaProperty", "<div class=\"property\">{0}{1} {2}</div>\n");
-            patterns.setProperty("metaEnd", "</div>\n");
-            patterns.setProperty("filter", "<div class=\"filter\">{0}</div>\n");
-
-            //        patterns.setProperty("narrative", "<div class=\"narrative\"><h2>{0}</h2>\n<div class=\"element inOrderTo\"><span class=\"keyword inOrderTo\">{1}</span> {2}</div>\n<div class=\"element asA\"><span class=\"keyword asA\">{3}</span> {4}</div>\n<div class=\"element iWantTo\"><span class=\"keyword iWantTo\">{5}</span> {6}</div>\n</div>\n");
-            patterns.setProperty("narrative",
-                    "<div class=\"beforeNarrative\"><span>&nbsp;</span><span style=\"display: none;\" class=\"beforeNarrativeHint\">+<span></div>" +
-                            "<div class=\"narrative\">" +
-                            "<div class=\"label\">" +
-                            "{0}</div>\n" +
-                            "<div contentEditable=\"false\" class=\"element inOrderTo\">" +
-                            "<div style=\"display: none;\" class=\"add-icon\">+</div>" +
-                            "<span contentEditable=\"false\" class=\"keyword inOrderTo inOrderToSpan\">{1}</span> <span></span></div>\n" +
-
-                            "<div class=\"element asA\"><span class=\"keyword asA\">{3}</span> {4}</div>\n" +
-                            "<div class=\"element iWantTo\"><span class=\"keyword iWantTo\">{5}</span> {6}</div>\n" +
-                            "</div>\n"
-            );
-
-            patterns.setProperty("lifecycleStart", "<div class=\"lifecycle\"><h2>{0}</h2>");
-            patterns.setProperty("lifecycleEnd", "</div>");
-            patterns.setProperty("lifecycleBeforeStart", "<div class=\"before\"><h3>{0}</h3>");
-            patterns.setProperty("lifecycleBeforeEnd", "</div>");
-            patterns.setProperty("lifecycleAfterStart", "<div class=\"after\"><h3>{0}</h3>");
-            patterns.setProperty("lifecycleAfterEnd", "</div>");
-            patterns.setProperty("lifecycleStep", "<div class=\"step\">{0}</div>\n");
-
-            //        patterns.setProperty("beforeScenario", "<div class=\"scenario\">\n<h2>{0} {1}</h2>\n");
-            patterns.setProperty("beforeScenario", "<div class=\"scenario\">\n<div class=\"scenario-title\"><span class=\"scenario-plus aui-icon aui-icon-small aui-iconfont-add\"></span><span class=\"label\">{0}</span> <span class=\"title\">{1}</span></div>\n");
-
-            patterns.setProperty("afterScenario", "</div>\n");
-            patterns.setProperty("afterScenarioWithFailure", "<pre class=\"failure\">{0}</pre>\n</div>\n");
-            patterns.setProperty("givenStories", "<div class=\"givenStories\">{0} {1}</div>\n");
-            patterns.setProperty("givenStoriesStart", "<div class=\"givenStories\">{0}\n");
-            patterns.setProperty("givenStory", "<div class=\"givenStory\">{0} {1}</div>\n");
-            patterns.setProperty("givenStoriesEnd", "</div>\n");
-
-            patterns.setProperty("successful", "<div class=\"step successful\">{0}</div>\n");
-            patterns.setProperty("ignorable", "<div class=\"step ignorable\">{0}</div>\n");
-            patterns.setProperty("pending", "<div class=\"step pending\"><span class=\"aui-icon aui-icon-small aui-iconfont-add\"></span>{0} <span class=\"keyword pending\">({1})</span></div>\n");
-            patterns.setProperty("notPerformed", "<div class=\"step notPerformed\">{0} <span class=\"keyword notPerformed\">({1})</span></div>\n");
-            patterns.setProperty("failed", "<div class=\"step failed\">{0} <span class=\"keyword failed\">({1})</span><br/><span class=\"message failed\">{2}</span></div>\n");
-            patterns.setProperty("restarted", "<div class=\"step restarted\">{0} <span class=\"message restarted\">{1}</span></div>\n");
-
-            patterns.setProperty("outcomesTableStart", "<div class=\"outcomes\"><table>\n");
-            patterns.setProperty("outcomesTableHeadStart", "<thead>\n<tr>\n");
-            patterns.setProperty("outcomesTableHeadCell", "<th>{0}</th>");
-            patterns.setProperty("outcomesTableHeadEnd", "</tr>\n</thead>\n");
-            patterns.setProperty("outcomesTableBodyStart", "<tbody>\n");
-            patterns.setProperty("outcomesTableRowStart", "<tr class=\"{0}\">\n");
-            patterns.setProperty("outcomesTableCell", "<td>{0}</td>");
-            patterns.setProperty("outcomesTableRowEnd", "</tr>\n");
-            patterns.setProperty("outcomesTableBodyEnd", "</tbody>\n");
-            patterns.setProperty("outcomesTableEnd", "</table></div>\n");
-            patterns.setProperty("beforeExamples", "<div class=\"examples\">\n<h3>{0}</h3>\n");
-            patterns.setProperty("examplesStep", "<div class=\"step\">{0}</div>\n");
-            patterns.setProperty("afterExamples", "</div>\n");
-            patterns.setProperty("examplesTableStart", "<table>\n");
-            patterns.setProperty("examplesTableHeadStart", "<thead>\n<tr>\n");
-            patterns.setProperty("examplesTableHeadCell", "<th>{0}</th>");
-            patterns.setProperty("examplesTableHeadEnd", "</tr>\n</thead>\n");
-            patterns.setProperty("examplesTableBodyStart", "<tbody>\n");
-            patterns.setProperty("examplesTableRowStart", "<tr>\n");
-            patterns.setProperty("examplesTableCell", "<td>{0}</td>");
-            patterns.setProperty("examplesTableRowEnd", "</tr>\n");
-            patterns.setProperty("examplesTableBodyEnd", "</tbody>\n");
-            patterns.setProperty("examplesTableEnd", "</table>\n");
-            patterns.setProperty("example", "\n<h3 class=\"example\">{0} {1}</h3>\n");
-            patterns.setProperty("parameterValueStart", "<span class=\"step parameter\">");
-            patterns.setProperty("parameterValueEnd", "</span>");
-            patterns.setProperty("parameterValueNewline", "<br/>");
-        }
-    }
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    public static class StoryReport {
-
-        private String environment;
-
-        private String storyPath;
-
-        private Long storyVersion;
-
-        public TestStatus status;
-
-        private Integer totalScenarios;
-
-        private Integer totalScenariosPassed;
-
-        private Integer totalScenariosFailed;
-
-        private Integer totalScenariosPending;
-
-        private Integer totalScenariosSkipped;
-
-        private Integer totalScenariosNotPerformed;
-
-        private String htmlReport;
-
-        protected StoryReport() {
-        }
-
-        public StoryReport(String environment, String storyPath,
-                           Long storyVersion, TestStatus status, String htmlReport) {
-            this.environment = environment;
-            this.storyPath = storyPath;
-            this.storyVersion = storyVersion;
-            this.status = status;
-            this.htmlReport = htmlReport;
-        }
-
-        public String getEnvironment() {
-            return environment;
-        }
-
-        public void setEnvironment(String environment) {
-            this.environment = environment;
-        }
-
-        public String getStoryPath() {
-            return storyPath;
-        }
-
-        public void setStoryPath(String storyPath) {
-            this.storyPath = storyPath;
-        }
-
-        public Long getStoryVersion() {
-            return storyVersion;
-        }
-
-        public void setStoryVersion(Long storyVersion) {
-            this.storyVersion = storyVersion;
-        }
-
-        public TestStatus getStatus() {
-            return status;
-        }
-
-        public void setStatus(TestStatus status) {
-            this.status = status;
-        }
-
-        public String getHtmlReport() {
-            return htmlReport;
-        }
-
-        public void setHtmlReport(String htmlReport) {
-            this.htmlReport = htmlReport;
-        }
-
-        public Integer getTotalScenarios() {
-            return totalScenarios;
-        }
-
-        public void setTotalScenarios(Integer totalScenarios) {
-            this.totalScenarios = totalScenarios;
-        }
-
-        public Integer getTotalScenariosPassed() {
-            return totalScenariosPassed;
-        }
-
-        public void setTotalScenariosPassed(Integer totalScenariosPassed) {
-            this.totalScenariosPassed = totalScenariosPassed;
-        }
-
-        public Integer getTotalScenariosFailed() {
-            return totalScenariosFailed;
-        }
-
-        public void setTotalScenariosFailed(Integer totalScenariosFailed) {
-            this.totalScenariosFailed = totalScenariosFailed;
-        }
-
-        public Integer getTotalScenariosPending() {
-            return totalScenariosPending;
-        }
-
-        public void setTotalScenariosPending(Integer totalScenariosPending) {
-            this.totalScenariosPending = totalScenariosPending;
-        }
-
-        public Integer getTotalScenariosSkipped() {
-            return totalScenariosSkipped;
-        }
-
-        public void setTotalScenariosSkipped(Integer totalScenariosSkipped) {
-            this.totalScenariosSkipped = totalScenariosSkipped;
-        }
-
-        public Integer getTotalScenariosNotPerformed() {
-            return totalScenariosNotPerformed;
-        }
-
-        public void setTotalScenariosNotPerformed(Integer totalScenariosNotPerformed) {
-            this.totalScenariosNotPerformed = totalScenariosNotPerformed;
-        }
-
-        @Override
-        public String toString() {
-            return "JiraStoryHtmlReport{" +
-                    "environment='" + environment + '\'' +
-                    ", storyPath='" + storyPath + '\'' +
-                    ", storyVersion=" + storyVersion +
-                    ", status=" + status +
-                    ", totalScenarios=" + totalScenarios +
-                    ", totalScenariosPassed=" + totalScenariosPassed +
-                    ", totalScenariosFailed=" + totalScenariosFailed +
-                    ", totalScenariosPending=" + totalScenariosPending +
-                    ", totalScenariosSkipped=" + totalScenariosSkipped +
-                    ", totalScenariosNotPerformed=" + totalScenariosNotPerformed +
-                    ", htmlReport='" + htmlReport + '\'' +
-                    '}';
-        }
-
-
-    }
-
-    public static class CustomHtmlOutput extends HtmlOutput {
-
-        public CustomHtmlOutput(PrintStream printStream, Properties outputPatterns, LocalizedKeywords keywords,
-                                boolean reportFailureTrace, boolean compressFailureTrace) {
-            super(printStream, outputPatterns, keywords, reportFailureTrace, compressFailureTrace);
-        }
-
-        @Override
-        protected void print(String text) {
-            text = GroovyStoryReporter.markTableCorrectly(text, this);
-            super.print(text);
-        }
-
-        @Override
-        public Object[] escape(PrintStreamOutput.Format format, Object... args) {
-            return super.escape(format, args);
-        }
-    }
-}
-
-
-
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/jbehave_preferences.vm
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/jbehave_preferences.vm	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/jbehave_preferences.vm	(revision )
@@ -1,74 +1,60 @@
 <html>
 <head>
     <title>$action.getText('scheduler-webwork-module.schedule.issue')</title>
-    #if (${action.issueObject})
-        <meta name="decorator" content="issueaction" />
+    <meta name="decorator" content="issueaction"/>
-    #else
-        <meta name="decorator" content="message" />
-    #end
 </head>
 <body>
-    #if(${action.issueObject})
-    <form action="UpdateJBehavePreferencesAction.jspa" class="aui" id="update-jbehave-preferences" method="post">
-        <div class="form-body">
-            <div class="hidden">
-                <input name="atl_token" type="hidden" value="${action.xsrfToken}">
-            </div>
-            <h2 class="dialog-title">$action.getText('userPreferences.title')</h2>
+<form action="UpdateJBehavePreferencesAction.jspa" class="aui" id="update-jbehave-preferences" method="post">
+    <div class="form-body">
+        <div class="hidden">
+            <input name="atl_token" type="hidden" value="${action.xsrfToken}">
+        </div>
+        <h2 class="dialog-title">$action.getText('userPreferences.title')</h2>
+
-            <div class="hidden">
-                <input name="id" type="hidden" value="${action.id}">
-                <input name="returnUrl" type="hidden" value="$!{action.returnUrl}">
-            </div>
-            <fieldset class="group">
-                <div class="checkbox">
-                    <input class="checkbox"
-                           type="checkbox" name="showLineNumbers" id="showLineNumbers"
-                           #if(${action.showLineNumbers})
-                           checked="checked"
-                           #end
-                            >
-                    <label for="showLineNumbers">${action.getText('userPreferences.showLineNumbers.label')}</label>
-                </div>
-            </fieldset>
-            <fieldset class="group">
-                <div class="checkbox">
-                    <input class="checkbox" type="checkbox" name="autoAlignTables" id="autoAlignTables"
-                        #if(${action.autoAlignTables})
-                           checked="checked"
-                        #end
-                            >
-                    <label for="autoAlignTables">${action.getText('userPreferences.autoAlignTables.label')}</label>
-                </div>
-            </fieldset>
-            <fieldset class="group">
-                <div class="checkbox">
-                    <input class="checkbox" type="checkbox" name="autoInsertTabularFields" id="autoInsertTabularFields"
-                        #if(${action.autoInsertTabularFields})
-                           checked="checked"
-                        #end
-                            >
-                    <label for="autoInsertTabularFields">${action.getText('userPreferences.autoInsertTabularFields.label')}</label>
-                </div>
-            </fieldset>
-        </div>
-        <div class="buttons-container form-footer">
-            <div class="buttons">
-                <input accesskey="s" class="button" id="schedule-issue-submit"
-                       name="Update" title="Press Ctrl+Alt+s to submit this form" type="submit" value="Update">
+        <div class="hidden">
+            <input name="id" type="hidden" value="${action.id}">
+            <input name="returnUrl" type="hidden" value="$!{action.returnUrl}">
+        </div>
+        <fieldset class="group">
+            <div class="checkbox">
+                <input class="checkbox"
+                       type="checkbox" name="showLineNumbers" id="showLineNumbers"
+                    #if(${action.showLineNumbers})
+                       checked="checked"
+                    #end
+                        >
+                <label for="showLineNumbers">${action.getText('userPreferences.showLineNumbers.label')}</label>
+            </div>
+        </fieldset>
+        <fieldset class="group">
+            <div class="checkbox">
+                <input class="checkbox" type="checkbox" name="autoAlignTables" id="autoAlignTables"
+                    #if(${action.autoAlignTables})
+                       checked="checked"
+                    #end
+                        >
+                <label for="autoAlignTables">${action.getText('userPreferences.autoAlignTables.label')}</label>
+            </div>
+        </fieldset>
+        <fieldset class="group">
+            <div class="checkbox">
+                <input class="checkbox" type="checkbox" name="autoInsertTabularFields" id="autoInsertTabularFields"
+                    #if(${action.autoInsertTabularFields})
+                       checked="checked"
+                    #end
+                        >
+                <label for="autoInsertTabularFields">${action.getText('userPreferences.autoInsertTabularFields.label')}</label>
+            </div>
+        </fieldset>
+    </div>
+    <div class="buttons-container form-footer">
+        <div class="buttons">
+            <input accesskey="s" class="button" id="schedule-issue-submit"
+                   name="Update" title="Press Ctrl+Alt+s to submit this form" type="submit" value="Update">
-                <a accesskey="`" class="cancel" href="/browse/${action.issue.key}" id="schedule-issue-cancel" title="Press Ctrl+Alt+` to cancel">Cancel</a>
+            <a accesskey="`" class="cancel" href="/browse/${action.issue.key}" id="schedule-issue-cancel"
+               title="Press Ctrl+Alt+` to cancel">Cancel</a>
-            </div>
-        </div>
-    </form>
+        </div>
+    </div>
+</form>
-    #else
-    <div class="remove-me">
-        <h1>${action.getText('common.words.error')}</h1>
-        <div class="aui-message error"><span class="aui-icon icon-error"></span>
-            #foreach($message in $action.flushedErrorMessages)
-                <p>$message</p>
-            #end
-        </div>
-    </div>
-
-    #end
 </body>
 </html>
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(revision )
@@ -1,21 +1,3 @@
-// CodeMirror, copyright (c) by Marijn Haverbeke and others
-// Distributed under an MIT license: http://codemirror.net/LICENSE
-
-/*
- Gherkin mode - http://www.cukes.info/
- Report bugs/issues here: https://github.com/marijnh/CodeMirror/issues
- */
-
-// Following Objs from Brackets implementation: https://github.com/tregusti/brackets-gherkin/blob/master/main.js
-//var Quotes = {
-//  SINGLE: 1,
-//  DOUBLE: 2
-//};
-
-//var regex = {
-//  keywords: /(Feature| {2}(Scenario|In order to|As|I)| {4}(Given|When|Then|And))/
-//};
-
 (function (mod) {
     if (typeof exports == "object" && typeof module == "object") // CommonJS
         mod(require("../../lib/codemirror"));
@@ -87,7 +69,7 @@
                 // LINE COMMENT
                 if (stream.sol() && (stream.match(/!--.*/) || stream.match(/\|--.*/))) {
 //                    state.lastTokenType =  "comment";
-                    return state.lastTokenType = "comment";
+                    return state.lastTokenType = "jb-story-comment";
 
 //                    // TABLE COMMENT
 //                } else if (stream.sol() && stream.match(/\|--.*/)) {
@@ -99,12 +81,12 @@
                     state.allowDescription = false;
                     state.allowMeta = false;
                     state.allowMetaField = true;
-                    return state.lastTokenType = "meta-title line-number-line-" + state.lineNumber;
+                    return state.lastTokenType = "jb-story-meta-title";
 
                     // META field
                 } else if (state.allowMetaField && stream.sol() && stream.match(/@.*/)) {
 
-                    return state.lastTokenType = "meta-field";
+                    return state.lastTokenType = "jb-story-meta-field";
 
                     // Narrative - title
                 } else if (state.allowNarrative && stream.sol() && stream.match(/Narrative:/)) {
@@ -117,7 +99,7 @@
 
                     state.allowScenario = true;
                     state.allowSteps = false;
-                    return state.lastTokenType = "narrative-title";
+                    return state.lastTokenType = "jb-story-narrative-title";
 
                     // Narrative - In order to - keyword
                 } else if (state.allowNarrativeInOrderTo && stream.sol() && stream.match(/(In order to )/)) {
@@ -126,7 +108,7 @@
                     state.allowNarrativeAsA = true;
                     state.inNarrativeField = true;
 
-                    return state.lastTokenType = "narrative-field-keyword";
+                    return state.lastTokenType = "jb-story-narrative-field-keyword";
 
                     // Narrative - As a - keyword
                 } else if (state.allowNarrativeAsA && stream.sol() && stream.match(/(As a )/)) {
@@ -135,7 +117,7 @@
                     state.allowNarrativeIWantTo = true;
                     state.inNarrativeField = true;
 
-                    return state.lastTokenType = "narrative-field-keyword";
+                    return state.lastTokenType = "jb-story-narrative-field-keyword";
 
                     // Narrative - I want to - keyword
                 } else if (state.allowNarrativeIWantTo && stream.sol() && stream.match(/(I want to )/)) {
@@ -143,12 +125,12 @@
                     state.allowNarrativeIWantTo = false;
                     state.inNarrativeField = true;
 
-                    return state.lastTokenType = "narrative-field-keyword";
+                    return state.lastTokenType = "jb-story-narrative-field-keyword";
 
                     // Narrative - field value
                 } else if (state.inNarrativeField && stream.match(/.*/)) {
 
-                    return state.lastTokenType = "narrative-field-value";
+                    return state.lastTokenType = "jb-story-narrative-field-value";
 
                     // SCENARIO keyword
                 } else if (state.allowScenario && stream.sol() && stream.match(/(Scenario):/)) {
@@ -162,11 +144,11 @@
                     state.currentStepKeyword = null;
                     state.lastStepStartedAt = null;
 
-                    return state.lastTokenType = "scenario-keyword";
+                    return state.lastTokenType = "jb-story-scenario-keyword";
 
                     // SCENARIO title
                 } else if (state.inScenarioTitleLine && !stream.sol() && stream.match(/.*/)) {
-                    return state.lastTokenType = "scenario-title";
+                    return state.lastTokenType = "jb-story-scenario-title";
 
                     // GIVEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(Given )/)) {
@@ -192,7 +174,7 @@
 
                     doc.getLineHandle(state.lineNumber);
 
-                    return state.lastTokenType = "step-keyword given-step";
+                    return state.lastTokenType = "jb-story-step-keyword given-step";
 
                     // WHEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(When )/)) {
@@ -215,7 +197,7 @@
 
                     state.currentStepNumber++;
 
-                    return state.lastTokenType = "step-keyword when-step";
+                    return state.lastTokenType = "jb-story-step-keyword when-step";
 
                     // THEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(Then )/)) {
@@ -238,7 +220,7 @@
 
                     state.currentStepNumber++;
 
-                    return state.lastTokenType = "step-keyword then-step";
+                    return state.lastTokenType = "jb-story-step-keyword then-step";
 
                     // AND
                 } else if (state.allowAndStep && stream.sol() && stream.match(/(And )/)) {
@@ -258,12 +240,12 @@
 
                     state.currentStepNumber++;
 
-                    return state.lastTokenType = "step-keyword " + state.lastStepKeyword + "-step";
+                    return state.lastTokenType = "jb-story-step-keyword " + state.lastStepKeyword + "-step";
 
                     // Description
                 } else if (stream.sol() && state.allowDescription && stream.match(/(.*)/)) {
 
-                    return state.lastTokenType = "description-line";
+                    return state.lastTokenType = "jb-story-description-line";
 
                     // Step body
                 } else if (state.inStep && stream.match(/(.*)/)) {
@@ -322,7 +304,7 @@
 
 //                    editor.addLineClass({line: state.lineNumber-1, where: "wrap", "class": "step-body-line"});
 
-                    return state.lastTokenType = "step-body"
+                    return state.lastTokenType = "jb-story-step-body"
 //                        + "line-step-line"
 //                        + " line-step-number-" + state.stepNumber
 //                        + " line-step-line-number-" + state.lineNumber
@@ -332,7 +314,7 @@
                 } else {
                     stream.match(/(.*)/);
 //                    stream.eatWhile(/[^@"<#]/);
-                    return null;
+                    return "jb-story-invalid-token";
                 }
             }
         };
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/customfields/StoryStatusField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/customfields/StoryStatusField.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/customfields/StoryStatusField.java	(revision )
@@ -10,11 +10,8 @@
 import org.bitbucket.jbehaveforjira.plugin.dto.story.JiraStory;
 import org.bitbucket.jbehaveforjira.plugin.dto.storyreport.JiraStoryHtml;
 import org.bitbucket.jbehaveforjira.plugin.dto.storyreport.TestStatus;
-import org.bitbucket.jbehaveforjira.plugin.service.StepDocsService;
 import org.bitbucket.jbehaveforjira.plugin.service.StoryReportService;
 import org.bitbucket.jbehaveforjira.plugin.service.StoryService;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import javax.annotation.Nullable;
 import java.util.HashMap;
@@ -23,17 +20,14 @@
 
 public class StoryStatusField extends CalculatedCFType<EnvironmentTestStatuses, Object> {
 
-    private static final Logger log = LoggerFactory.getLogger(StoryStatusField.class);
-
     private final StoryService storyService;
+
     private final StoryReportService storyReportService;
-    private final StepDocsService stepDocsSerivce;
 
     public StoryStatusField(StoryService storyService,
-                            StoryReportService storyReportService, StepDocsService stepDocsSerivce) {
+                            StoryReportService storyReportService) {
         this.storyService = storyService;
         this.storyReportService = storyReportService;
-        this.stepDocsSerivce = stepDocsSerivce;
     }
 
     @Override
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StepDocDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StepDocDao.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/ao/StepDocDao.java	(revision )
@@ -3,8 +3,6 @@
 import com.atlassian.activeobjects.external.ActiveObjects;
 import net.java.ao.Query;
 import org.jbehave.core.steps.StepType;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.util.List;
 
@@ -13,8 +11,6 @@
 
 public final class StepDocDao {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
-
     private final ActiveObjects ao;
 
     public StepDocDao(ActiveObjects ao) {
@@ -44,7 +40,7 @@
         return newArrayList(result);
     }
 
-    public List<StepDoc> findAllForProject(String projectKey, StepType stepType) {
+    public List<StepDoc> findByTypeForProject(StepType stepType, String projectKey) {
         String[] params = new String[]{projectKey, stepType.name()};
         Query query = Query.select().where("PROJECT_KEY = ? AND STEP_TYPE = ?", params);
         StepDoc[] result = ao.find(StepDoc.class, query);
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/StepDocDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/StepDocDTO.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/stepdoc/StepDocDTO.java	(revision )
@@ -6,9 +6,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-/**
- * Created by Dmytro on 4/23/2014.
- */
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
 public class StepDocDTO {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStoryLoader.groovy
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStoryLoader.groovy	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStoryLoader.groovy	(date 1409146073000)
@@ -1,89 +0,0 @@
-package org.bitbucket.jbehaveforjira.groovyclient
-import com.sun.jersey.api.client.Client
-import com.sun.jersey.api.client.ClientResponse
-import com.sun.jersey.api.client.WebResource
-import org.jbehave.core.io.StoryLoader
-import org.slf4j.Logger
-import org.slf4j.LoggerFactory
-
-import javax.ws.rs.core.MediaType
-import javax.ws.rs.core.Response
-/**
- * @author Maryna Stasyuk
- */
-public class GroovyStoryLoader implements StoryLoader {
-
-    private final Logger log = LoggerFactory.getLogger(getClass());
-
-    private String jiraBaseUrl;
-
-    private String projectKey;
-
-    private String downloadedStoriesDir = "src/test/resources/jira_stories";
-
-    private String loadStoryPath = "rest/story-res/1.0/find/for-path";
-
-    public GroovyStoryLoader(String jiraBaseUrl, String projectKey) {
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.projectKey = projectKey;
-    }
-
-    @Override
-    public String loadStoryAsText(String storyPath) {
-
-        URI jiraSearchUrl = null;
-        try {
-            String fullPath = jiraBaseUrl + "/" + loadStoryPath + "/" + storyPath;
-            fullPath += "?os_username=admin&os_password=admin";
-            fullPath += "&versionInPath=true";
-            fullPath += "&asString=true";
-            log.debug("full story path is - " + fullPath);
-            jiraSearchUrl = new URI(fullPath);
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
-
-        Client client = Client.create();
-        WebResource res = client.resource(jiraSearchUrl);
-        ClientResponse response = res.type(MediaType.APPLICATION_JSON).get(ClientResponse.class);
-        log.info("response - " + response);
-
-        if (response.getStatus() == 200) {
-            String story = response.getEntity(String.class);
-            return story;
-        } else {
-            int status = response.getStatus();
-            Response.StatusType statusInfo = response.getStatusInfo();
-            throw new RuntimeException("Error occurred while trying to find Jira story paths. " +
-                    "Response status was - " + status + ", status info - " + statusInfo);
-        }
-
-    }
-
-    private void writeModelToFile(String storyPath, String storyModel) {
-
-        PrintWriter pw = null;
-        try {
-            File storiesDir = new File(downloadedStoriesDir);
-            File outFile = new File(storiesDir, storyPath);
-            outFile.getParentFile().mkdirs();
-            FileWriter fw = new FileWriter(outFile.getAbsoluteFile());
-            pw = new PrintWriter(fw);
-
-            // we need to insert jira story version as a meta tag into the story
-            // the meta section may exist - in this case we add an extra attribute
-            // if meta section doesn't exist - we create it and create one attribute containing our version
-
-            pw.print(storyModel);
-
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        } finally {
-            if (pw != null) {
-                pw.close();
-            }
-        }
-
-    }
-
-}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/jbehave-core.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/jbehave-core.css	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/jbehave-core.css	(revision )
@@ -1,22 +1,22 @@
-.story-report-tab .meta {
-    text-align: left;
-    color: #800080;
-}
+/*.story-report-tab .meta {*/
+    /*text-align: left;*/
+    /*color: #800080;*/
+/*}*/
 
-.story-report-tab .meta .keyword{
-    font-weight: bold;
-}
-.story-report-tab .narrative {
-    text-align: left;
-    color: #0404B4;
-	font-family: "Times New Roman";
-	font-size: 14px;
-	
-}
-.story-report-tab .scenario{
-text-align: left;
-    color: #298A08;
-	}
+/*.story-report-tab .meta .keyword{*/
+    /*font-weight: bold;*/
+/*}*/
+/*.story-report-tab .narrative {*/
+    /*text-align: left;*/
+    /*color: #0404B4;*/
+	/*font-family: "Times New Roman";*/
+	/*font-size: 14px;*/
+	/**/
+/*}*/
+/*.story-report-tab .scenario{*/
+/*text-align: left;*/
+    /*color: #298A08;*/
+	/*}*/
 
 
 /*#story-panel {*/
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml	(revision )
@@ -5,16 +5,13 @@
     <plugin-info>
         <description>Provides integration with JBehave BDD framework</description>
         <version>1.0.0</version>
-        <vendor name="Maryna Stasyuk" url="https://bitbucket.org/pristrom/jbehave-for-jira-java-client/wiki/Home"/>
+        <vendor name="Maryna Pristrom" url="https://bitbucket.org/pristrom/jbehave-for-jira-java-client/wiki/Home"/>
     </plugin-info>
     <!-- ==================================================================================================== -->
     <!--3rd party scripts-->
     <!-- ==================================================================================================== -->
     <web-resource name="View Issue Page 3rd Party Resources" key="jbehave-for-jira-view-issue-page-3rd-party-resources">
         <context>jira.view.issue</context>
-        <!--these custom scripts need to be loaded first as jbehave-hint has dependency on story service-->
-        <resource type="download" name="PageUtils.js" location="/js/PageUtils.js"/>
-        <resource type="download" name="StoryService.js" location="/js/StoryService.js"/>
         <!--codemirror core-->
         <resource type="download" name="codemirror.js" location="/3rdparty/codemirror-4.3/lib/codemirror.js"/>
         <resource type="download" name="codemirror.css" location="/3rdparty/codemirror-4.3/lib/codemirror.css"/>
@@ -39,6 +36,9 @@
             <transformer key="soyTransformer"/>
         </transformation>
         <!--js-->
+        <!--these custom scripts need to be loaded first as jbehave-hint has dependency on story service-->
+        <resource type="download" name="PageUtils.js" location="/js/PageUtils.js"/>
+        <resource type="download" name="StoryService.js" location="/js/StoryService.js"/>
         <resource type="download" name="StoryController.js" location="/js/StoryController.js"/>
         <resource type="download" name="StoryModel.js" location="/js/StoryModel.js"/>
         <resource type="download" name="StoryReportModel.js" location="/js/StoryReportModel.js"/>
@@ -54,17 +54,21 @@
         <resource type="download" name="story.css" location="css/story.css">
             <param name="content-type" value="text/css"/>
         </resource>
-        <resource type="download" name="edit-story.css" location="css/edit-story.css">
-            <param name="content-type" value="text/css"/>
-        </resource>
+        <!--<resource type="download" name="edit-story.css" location="css/edit-story.css">-->
+            <!--<param name="content-type" value="text/css"/>-->
+        <!--</resource>-->
         <resource type="download" name="story-report.css" location="css/story-report.css">
             <param name="content-type" value="text/css"/>
         </resource>
-        <resource type="download" name="jbehave-core.css" location="css/jbehave-core.css">
-            <param name="content-type" value="text/css"/>
-        </resource>
-        <resource type="download" name="jbehave-edit.css" location="css/jbehave-edit.css">
-            <param name="content-type" value="text/css"/>
+        <!--<resource type="download" name="jbehave-core.css" location="css/jbehave-core.css">-->
+            <!--<param name="content-type" value="text/css"/>-->
+        <!--</resource>-->
+        <!--<resource type="download" name="jbehave-edit.css" location="css/jbehave-edit.css">-->
+            <!--<param name="content-type" value="text/css"/>-->
+        <!--</resource>-->
+        <!--other-->
+        <resource type="download" name="img/" location="img">
+            <!--<param name="content-type" value="image/gif"/>-->
         </resource>
         <context>jira.view.issue</context>
     </web-resource>
Index: jbehave-for-jira/jbehave-for-jira-plugin/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/pom.xml	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/pom.xml	(revision )
@@ -85,12 +85,11 @@
         <!-- ================================================================================= -->
         <!--Other dependencies-->
         <!-- ================================================================================= -->
-        <!--<dependency>-->
-            <!--<groupId>org.bitbucket.pristrom</groupId>-->
-            <!--<artifactId>jbehave-for-jira-java-client</artifactId>-->
-            <!--<version>1.0.0-SNAPSHOT</version>-->
-            <!--<scope>provided</scope>-->
-        <!--</dependency>-->
+        <dependency>
+            <groupId>org.bitbucket.pristrom</groupId>
+            <artifactId>jbehave-for-jira-groovy-client</artifactId>
+            <version>1.0.0-SNAPSHOT</version>
+        </dependency>
         <!--<dependency>-->
             <!--<groupId>org.bitbucket.pristrom</groupId>-->
             <!--<artifactId>jbehave-for-jira-java-client-impl</artifactId>-->
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/customfields/EnvironmentTestStatuses.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/customfields/EnvironmentTestStatuses.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/customfields/EnvironmentTestStatuses.java	(revision )
@@ -5,9 +5,6 @@
 
 import java.util.*;
 
-/**
- * Created by Dmytro on 4/18/2014.
- */
 public class EnvironmentTestStatuses {
 
     private Map<String, TestStatus> statusesByEnvironment;
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/StoryDTOUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/StoryDTOUtils.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/StoryDTOUtils.java	(revision )
@@ -6,9 +6,6 @@
 import java.util.List;
 import java.util.regex.Matcher;
 
-/**
- * Created by Dmytro on 4/8/2014.
- */
 public class StoryDTOUtils {
 
     public static JiraStory toDTO(Story story) {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/preferences/UserPreferencesDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/preferences/UserPreferencesDTO.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/preferences/UserPreferencesDTO.java	(revision )
@@ -4,9 +4,6 @@
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlRootElement;
 
-/**
- * Created by Dmytro on 8/25/2014.
- */
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
 public class UserPreferencesDTO {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StepDocsServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StepDocsServiceImpl.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StepDocsServiceImpl.java	(revision )
@@ -9,9 +9,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-/**
- * Created by Dmytro on 4/23/2014.
- */
 public class StepDocsServiceImpl implements StepDocsService {
 
     private final StepDocDao stepDocDao;
@@ -25,7 +22,6 @@
 
         Validate.notEmpty(projectKey);
 
-        // replace all existing ones for the project
         List<StepDoc> allForProject = this.stepDocDao.findAllForProject(projectKey);
         for (StepDoc stepDoc : allForProject) {
             stepDocDao.delete(stepDoc);
@@ -46,12 +42,6 @@
         List<StepDoc> allForProject = this.stepDocDao.findAllForProject(projectKey);
         return toDTOs(allForProject);
     }
-
-//    @Override
-//    public List<StepDocDTO> findForProject(String projectKey, StepType stepType) {
-//        List<StepDoc> allForProject = this.stepDocDao.findAllForProject(projectKey, stepType);
-//        return toDTOs(allForProject);
-//    }
 
     private List<StepDocDTO> toDTOs(List<StepDoc> allForProject) {
         List<StepDocDTO> stepDocDTOs = new ArrayList<StepDocDTO>(allForProject.size());
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StoryReportServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StoryReportServiceImpl.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/service/StoryReportServiceImpl.java	(revision )
@@ -1,5 +1,3 @@
-            JBehaveStory story = byIssueKey.get(0);
-            JBehaveStoryReport[] storyTestReports = story.getStoryReports();
 package org.bitbucket.jbehaveforjira.plugin.service;
 
 import com.atlassian.jira.bc.issue.IssueService;
@@ -15,9 +13,6 @@
 import java.util.Collections;
 import java.util.List;
 
-/**
- * Created by Dmytro on 4/8/2014.
- */
 public class StoryReportServiceImpl implements StoryReportService {
 
     private StoryReportDao storyReportDao;
@@ -45,8 +40,7 @@
             Story story = byIssueKey.get(0);
 
             // first we delete any storyReport that exists for the same environment as in the received reportDTO
-            JBehaveStoryReport[] storyHtmlReports = story.getStoryReports();
-            StoryReport[] storyHtmlReports = story.getStoryHtmlReports();
+            StoryReport[] storyHtmlReports = story.getStoryReports();
             String reportedEnvironment = storyReportDTO.getEnvironment();
             if (storyHtmlReports.length > 0) {
                 // find one for the reportedEnvironment if exists and delete it since it will be replaced by the one received
@@ -59,7 +53,6 @@
                 }
             }
 
-            // now we createStoryReport a new report for the reported environment
             StoryReport storyHtmlReport = storyReportDao.createStoryHtmlReport();
             storyHtmlReport.setStory(story);
             StoryReportDTOUtils.fromDTOToModel(storyReportDTO, storyHtmlReport);
@@ -78,8 +71,7 @@
         } else {
             Story story = byIssueKey.get(0);
 
-            JBehaveStoryReport[] storyTestReports = story.getStoryReports();
-            StoryReport[] storyTestReports = story.getStoryHtmlReports();
+            StoryReport[] storyTestReports = story.getStoryReports();
             if (storyTestReports.length == 0) {
                 // createStoryReport a new report
                 return Collections.emptyList();
@@ -105,7 +97,7 @@
             throw new RuntimeException("More than one story was found for issue key - " + issueKey);
         } else {
             Story story = byIssueKey.get(0);
-            StoryReport[] storyTestReports = story.getStoryHtmlReports();
+            StoryReport[] storyTestReports = story.getStoryReports();
             if (storyTestReports.length != 0) {
                 for (StoryReport storyTestReport : storyTestReports) {
                     storyReportDao.delete(storyTestReport);
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/StoriesPayload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/StoriesPayload.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/dto/story/StoriesPayload.java	(revision )
@@ -7,11 +7,6 @@
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.List;
 
-/**
- * Container for lists of StoryDTO objects.
- *
- * @author stasyukd
- */
 @XmlRootElement(name = "stories_payload")
 @XmlAccessorType(XmlAccessType.FIELD)
 public class StoriesPayload {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStoryLoader.groovy
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStoryLoader.groovy	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStoryLoader.groovy	(date 1409146073000)
@@ -1,89 +0,0 @@
-package groovy
-import com.sun.jersey.api.client.Client
-import com.sun.jersey.api.client.ClientResponse
-import com.sun.jersey.api.client.WebResource
-import org.jbehave.core.io.StoryLoader
-import org.slf4j.Logger
-import org.slf4j.LoggerFactory
-
-import javax.ws.rs.core.MediaType
-import javax.ws.rs.core.Response
-/**
- * @author Maryna Stasyuk
- */
-public class GroovyStoryLoader implements StoryLoader {
-
-    private final Logger log = LoggerFactory.getLogger(getClass());
-
-    private String jiraBaseUrl;
-
-    private String projectKey;
-
-    private String downloadedStoriesDir = "src/test/resources/jira_stories";
-
-    private String loadStoryPath = "rest/story-res/1.0/find/for-path";
-
-    public GroovyStoryLoader(String jiraBaseUrl, String projectKey) {
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.projectKey = projectKey;
-    }
-
-    @Override
-    public String loadStoryAsText(String storyPath) {
-
-        URI jiraSearchUrl = null;
-        try {
-            String fullPath = jiraBaseUrl + "/" + loadStoryPath + "/" + storyPath;
-            fullPath += "?os_username=admin&os_password=admin";
-            fullPath += "&versionInPath=true";
-            fullPath += "&asString=true";
-            log.debug("full story path is - " + fullPath);
-            jiraSearchUrl = new URI(fullPath);
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
-
-        Client client = Client.create();
-        WebResource res = client.resource(jiraSearchUrl);
-        ClientResponse response = res.type(MediaType.APPLICATION_JSON).get(ClientResponse.class);
-        log.info("response - " + response);
-
-        if (response.getStatus() == 200) {
-            String story = response.getEntity(String.class);
-            return story;
-        } else {
-            int status = response.getStatus();
-            Response.StatusType statusInfo = response.getStatusInfo();
-            throw new RuntimeException("Error occurred while trying to find Jira story paths. " +
-                    "Response status was - " + status + ", status info - " + statusInfo);
-        }
-
-    }
-
-    private void writeModelToFile(String storyPath, String storyModel) {
-
-        PrintWriter pw = null;
-        try {
-            File storiesDir = new File(downloadedStoriesDir);
-            File outFile = new File(storiesDir, storyPath);
-            outFile.getParentFile().mkdirs();
-            FileWriter fw = new FileWriter(outFile.getAbsoluteFile());
-            pw = new PrintWriter(fw);
-
-            // we need to insert jira story version as a meta tag into the story
-            // the meta section may exist - in this case we add an extra attribute
-            // if meta section doesn't exist - we create it and create one attribute containing our version
-
-            pw.print(storyModel);
-
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        } finally {
-            if (pw != null) {
-                pw.close();
-            }
-        }
-
-    }
-
-}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/story.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/story.css	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/story.css	(revision )
@@ -1,268 +1,89 @@
-#story-panel-container.active {
-    width: 100%;
-    border-bottom-color: #CCC;
-    border-bottom-left-radius: 3.01667px;
-    border-bottom-right-radius: 3.01667px;
-    border-bottom-style: solid;
-    border-bottom-width: 0.833333px;
-    border-image-outset: 0 0 0 0;
-    border-image-repeat: stretch stretch;
-    border-image-slice: 100% 100% 100% 100%;
-    border-image-source: none;
-    border-image-width: 1 1 1 1;
-    border-left-color: #CCC;
-    border-left-style: solid;
-    border-left-width: 0.833333px;
-    border-right-color: #CCC;
-    border-right-style: solid;
-    border-right-width: 0.833333px;
-    border-spacing: 0px 0px;
-    border-top-color: #CCC;
-    border-top-left-radius: 3.01667px;
-    border-top-right-radius: 3.01667px;
-    border-top-style: solid;
-    border-top-width: 0.833333px;
-    box-shadow: #E8E8E8 0px 1px 3px 0px inset;
-    box-sizing: border-box;
-    /*color: #333;*/
-    cursor: text;
-    /*font-family: Arial,sans-serif;*/
-    /*font-size: 14px;*/
-    /*height: 91px;*/
-    /*line-height: 20px;*/
-    margin-bottom: 0px;
-    margin-left: 0px;
-    margin-right: 0px;
-    margin-top: 0px;
-    max-width: none;
-    overflow: hidden;
-    overflow-x: hidden;
-    overflow-y: hidden;
-    padding-bottom: 2px;
-    padding-left: 3px;
-    padding-right: 3px;
-    padding-top: 2px;
-    text-alignleftvertical-aligntopwidth: 969px;
-    -moz-border-bottom-colors: none;
-    -moz-border-left-colors: none;
-    -moz-border-right-colors: none;
-    -moz-border-top-colors: none;
-}
+/*.cm-jb-story-hint-keyword {*/
+    /*font-weight: bold;*/
+/*}*/
 
-#story-panel {
-    /*margin: 2px;*/
-    font-family: "Lucida Grande", "Arial", "Helvetica", "Verdana", sans-serif;
-    font-size: 1em;
-    /*font-size: 13px;*/
-    color: #555;
-    text-align: left;
-    padding-top: 0px;
-    padding-right: 0px;
-    padding-bottom: 10px;
-    padding-left: 0px;
-    background-color: #fff;
+.cm-jb-story-comment {
+    font-style: italic;
+    color: #808080;
 }
 
-#story-panel .story-container {
-    margin-top: 10px;
-    margin-left: 12px;
+.cm-jb-story-invalid-token {
+    background: url(img/underline.gif) bottom repeat-x;
 }
 
-#story-panel .story {
-    text-align: left;
-    margin-left: 10px;
+.cm-jb-story-description-line {
+    /*color: dimgrey;*/
+    /*color: rgb(255, 192, 0);*/
+    /*color: #eea236;*/
+    color: #d04437;
+    /*font-weight: bold;*/
 }
 
-#story-panel .element {
-    padding-left: 10px;
+.cm-jb-story-meta-title {
+    color: #770088;
+    font-weight: bold;
 }
 
-#story-panel .path, .givenStories {
-    font-weight: bolder;
-    font-size: 16px;
-    opacity: 0.85;
-    margin-bottom: 10px;
-    padding-top: 5px;
-    padding-right: 10px;
+.cm-jb-story-meta-field {
+    color: #770088;
 }
 
-#story-panel .path, .givenStories {
-    font-weight: bolder;
-    font-size: 16px;
-    opacity: 0.85;
-    margin-bottom: 10px;
-    padding-top: 5px;
-    padding-right: 10px;
-}
-
-#story-panel .narrative {
-    text-align: left;
-    color: blue;
-}
-
-.narrative .label {
-    font-size: 1.5em;
+.cm-jb-story-narrative-title {
+    color: #0000cc;
     font-weight: bold;
-    padding-bottom: 5px;
 }
 
-#story-panel span.inOrderTo, span.asA, span.iWantTo {
+.cm-jb-story-narrative-field-keyword {
+    color: #0000cc;
     font-weight: bold;
 }
 
-#story-panel .scenario {
-    text-align: left;
-    padding-left: 1px;
+.cm-jb-story-narrative-field-value {
+    color: #0000cc;
 }
 
-#story-panel .scenario .scenario-title {
-    background-color: #fff;
-    border-color: #ffcd13;
-    /*margin-bottom: 10px;*/
-    padding-top: 10px;
-    /*padding-right: 10px;*/
-    padding-bottom: 5px;
-    /*padding-left: 10px;*/
-    display: block;
-    font-size: 1.5em;
-    font-weight: bold;
-}
-
-#story-panel .step {
-    padding-left: 10px;
-}
-
-#story-panel .successful {
+.cm-jb-story-scenario-keyword {
     color: green;
-}
-
-#story-panel .step .parameter {
-    color: purple;
-    padding-left: 0px;
-    text-weight: bold;
-}
-
-#story-panel .parameter table {
-    border: 1px solid;
-    margin: 5px;
-}
-
-#story-panel .step.failed {
-    color: red;
-}
-
-#story-panel .outcomes table {
-    border: 1px solid;
-    margin-top: 12px;
-    margin-left: 12px;
-}
-
-#story-panel .outcomes table th, td {
-    text-align: center;
-    padding-left: 5px;
-    padding-right: 5px;
-    /*border-left: 1px solid;*/
-}
-
-#story-panel .outcomes table th {
     font-weight: bold;
 }
 
-#story-panel .outcomes table tr.notVerified {
-    color: red;
-}
-
-#story-panel .outcomes table tr.verified {
+.cm-jb-story-scenario-title {
     color: green;
+    /*font-weight: bold;*/
 }
 
-#story-panel .outcomes {
-    padding-bottom: 20px;
-}
-
-#story-panel .selected-story-container-button {
-    color: #3B73AF;
+.cm-jb-story-step-keyword {
+    color: #aa5500;
     font-weight: bold;
+    font-style: italic;
 }
 
-#storyMessageContainer {
-    margin-top: 10px;
-    padding-left: 10px;
+.cm-jb-story-step-keyword.matched-step {
+    font-style: normal;
 }
 
-#autoCompleteDialog {
-    /*margin-left: 10px;*/
-}
-
-#arrow-autoCompleteDialog {
-    -webkit-transform: rotate(180deg); /* Chrome & Safari */
-    -moz-transform: rotate(180deg); /* Firefox */
-    -ms-transform: rotate(180deg); /* IE 9+ */
-    -o-transform: rotate(180deg); /* Opera */
-    transform: rotate(180deg); /* CSS3 */
-    filter: progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678, sizingMethod='auto expand'); /* IE 7-8 */
-}
-
-#arrow-autoCompleteDialog {
-    display: none;
-}
-
-#autoCompleteEntries {
-    padding-left: 10px;
-    padding-top: 2px;
-    padding-right: 10px;
-    padding-bottom: 2px;
-}
-
-.beforeNarrative {
-    position: relative;
-}
-
-.beforeNarrativeHint {
-    position: absolute;
-    top: 0px;
-    left: -5px;
-}
-
-/*.scenario .steps {*/
-/*padding-left: 10px;*/
-/*}*/
-
-/*.scenario .step {*/
-/*font-size: 20px;*/
+/*.hint-step-keyword {*/
+/*color: #aa5500;*/
 /*font-weight: bold;*/
-/*color: #555;*/
+/*font-style: normal;*/
 /*}*/
 
-/*.scenario .step .parameter {*/
-/*color: #b02015;*/
-/*}*/
-
-/*.scenario .step .keyword {*/
+/*.cm-step-body.cm-matched-step {*/
+/*font-style: normal;*/
 /*font-weight: bold;*/
+/*font-weight: bold;*/
+/*color: lightslategrey;*/
 /*}*/
 
-/*.scenario .table-parameter {*/
-/*color: #cc6600;*/
-/*border-color: #cc6600;*/
-/*border-style: solid;*/
-/*border-width: 1px;*/
-/*}*/
+.cm-jb-story-step-body {
+    font-style: italic;
+}
 
-/*.scenario .table-parameter .header {*/
-/*font-style: italic;*/
-/*border-color: #cc6600;*/
-/*border-left: solid;*/
-/*border-width: 1px;*/
-/*padding-left: 5px;*/
-/*padding-right: 5px;*/
-/*}*/
+.cm-jb-story-step-body.matched-step {
+    font-style: normal;
+}
 
-/*.scenario .table-parameter .value {*/
-/*font-style: italic;*/
-/*border-color: #cc6600;*/
-/*border-left: solid;*/
-/*border-width: 1px;*/
-/*padding-left: 5px;*/
-/*padding-right: 5px;*/
-/*}*/
+.cm-jb-story-step-body.matched-step.step-parameter {
+    font-weight: bold;
+    color: purple;
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/temp.html
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/temp.html	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/temp.html	(date 1409146073000)
@@ -1,40 +0,0 @@
-<div class="field-ignore-highlight editable-field active saving saving-description" id="description-val">
-    <form action="#" class="ajs-dirty-warning-exempt aui" id="description-form">
-        <div class="inline-edit-fields" tabindex="1">
-            <div class="field-group">
-
-
-                <div class="wiki-edit">
-                    <div class="wiki-edit-content" id="description-wiki-edit">
-                        <textarea data-issuekey="TESTING-1" data-projectkey="TESTING" wrap="virtual" rows="12"
-                                  name="description" id="description"
-                                  class="textarea long-field wiki-textfield long-field mentionable"
-                                  style="height: 91px; overflow-x: hidden; overflow-y: auto;"
-                                  disabled="disabled">asdf</textarea>
-
-                        <div class="content-inner">
-                        </div>
-                    </div>
-                </div>
-
-
-            </div>
-        </div>
-        <span class="overlay-icon throbber"></span>
-
-        <div class="save-options" tabindex="1">
-            <div class="field-tools">
-
-                <a title="preview" id="description-preview_link" href="#" class="fullscreen"><span
-                        class="aui-icon wiki-renderer-icon"></span></a>
-                <a data-helplink="local" title="Get local help about wiki markup help"
-                   href="/jira/secure/WikiRendererHelpAction.jspa?section=texteffects" id="viewHelp"
-                   class="help-lnk"><span class="aui-icon aui-icon-small aui-iconfont-help"></span></a>
-            </div>
-            <button title="Press Alt+s to submit this form" accesskey="s" class="aui-button submit" type="submit"
-                    disabled="disabled"><span class="icon icon-save">Save</span></button>
-            <button title="Press Alt+` to cancel" accesskey="`" class="aui-button cancel" type="cancel"
-                    disabled="disabled"><span class="icon icon-cancel">Cancel</span></button>
-        </div>
-    </form>
-</div>
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStoryReporter.groovy
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStoryReporter.groovy	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStoryReporter.groovy	(date 1409146073000)
@@ -1,725 +0,0 @@
-package org.bitbucket.jbehaveforjira.groovyclient
-
-import com.sun.jersey.api.client.Client
-import com.sun.jersey.api.client.WebResource
-import org.apache.commons.lang.Validate
-import org.jbehave.core.i18n.LocalizedKeywords
-import org.jbehave.core.model.*
-import org.jbehave.core.reporters.HtmlOutput
-import org.jbehave.core.reporters.PrintStreamOutput
-import org.jbehave.core.reporters.StoryReporter
-import org.jbehave.core.steps.StepCreator
-
-import javax.ws.rs.core.MediaType
-import javax.xml.bind.annotation.XmlAccessType
-import javax.xml.bind.annotation.XmlAccessorType
-import javax.xml.bind.annotation.XmlRootElement
-import java.util.regex.Matcher
-import java.util.regex.Pattern
-
-/**
- * @author Maryna Stasyuk
- */
-public class GroovyStoryReporter implements StoryReporter {
-
-    public static enum TestStatus {
-
-        PASSED,
-
-        FAILED,
-
-        PENDING,
-
-        NOT_PERFORMED,
-
-        IGNORED
-
-    }
-
-    private final HtmlOutput htmlOutput;
-
-    private boolean compressFailureTrace;
-    private boolean reportFailureTrace;
-    private LocalizedKeywords keywords;
-
-    private PrintStream printStream;
-
-    private String environment;
-    private Properties outputPatterns;
-
-    private String jiraBaseUrl;
-
-    private String jiraProject;
-
-    private String addTestReportPath = "rest/story-res/1.0/story-test/add-for-path";
-
-    private String storyPath;
-
-    private Long jiraVersion;
-
-    private TestStatus status;
-
-    private int totalScenarios;
-
-    private int totalScenariosPassed;
-
-    private int totalScenariosFailed;
-
-    private int totalScenariosPending;
-
-    private int totalScenariosIgnored;
-
-    private int totalScenariosNotPerformed;
-
-    private TestStatus currentScenarioStatus;
-
-    private final List<Byte> bytesList;
-
-    public GroovyStoryReporter(String jiraBaseUrl, String jiraProject, String environment) {
-//        this(new Properties(), new LocalizedKeywords(), false, jiraBaseUrl, jiraProject, environment);
-
-        this.bytesList = new LinkedList<Byte>();
-        OutputStream outStream = new OutputStream() {
-
-            @Override
-            public void write(int b) throws IOException {
-                bytesList.add((byte) b);
-            }
-
-        };
-
-        this.printStream = new PrintStream(outStream);
-
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.jiraProject = jiraProject;
-        this.environment = environment;
-
-        this.outputPatterns = new Properties();
-        this.outputPatterns = mergeOverridenPatterns(outputPatterns);
-        this.keywords = new LocalizedKeywords();
-        this.reportFailureTrace = false;
-        this.compressFailureTrace = false;
-
-        this.htmlOutput = new CustomHtmlOutput(printStream, outputPatterns, keywords, reportFailureTrace, compressFailureTrace);
-    }
-
-//    public GroovyStoryReporter(Properties outputPatterns,
-//                             Keywords keywords, boolean reportFailureTrace,
-//                             String jiraBaseUrl, String jiraProject, String environment) {
-//        this(new BytesListPrintStream(new LinkedList<Byte>()), outputPatterns, keywords, reportFailureTrace, false,
-//                jiraBaseUrl, jiraProject, environment);
-//    }
-
-//    public GroovyStoryReporter(BytesListPrintStream printStream, Properties outputPatterns,
-//                             Keywords keywords, boolean reportFailureTrace,
-//                             boolean compressFailureTrace,
-//                             String jiraBaseUrl, String jiraProject, String environment) {
-//        super(printStream, mergeOverridenPatterns(outputPatterns), keywords, reportFailureTrace, compressFailureTrace);
-//        this.printStream = printStream;
-//        this.jiraBaseUrl = jiraBaseUrl;
-//        this.jiraProject = jiraProject;
-//        this.environment = environment;
-//    }
-
-    public void narrative(Narrative narrative) {
-        htmlOutput.narrative(narrative);
-    }
-
-    @Override
-    public void lifecyle(Lifecycle lifecycle) {
-        htmlOutput.lifecyle(lifecycle);
-    }
-
-    @Override
-    public void beforeScenario(String title) {
-
-        this.totalScenarios++;
-        this.currentScenarioStatus = TestStatus.PASSED; // assume pass initially
-
-        htmlOutput.beforeScenario(title);
-    }
-
-    @Override
-    public void scenarioMeta(Meta meta) {
-        htmlOutput.scenarioMeta(meta);
-    }
-
-    @Override
-    public void afterScenario() {
-
-        htmlOutput.afterScenario();
-
-        switch (this.currentScenarioStatus) {
-            case PASSED:
-                totalScenariosPassed++;
-                break;
-            case FAILED:
-                totalScenariosFailed++;
-                break;
-            case PENDING:
-                totalScenariosPending++;
-                break;
-            case IGNORED:
-                totalScenariosIgnored++;
-                break;
-            case NOT_PERFORMED:
-                totalScenariosNotPerformed++;
-                break;
-        }
-    }
-
-    @Override
-    public void givenStories(GivenStories givenStories) {
-        htmlOutput.givenStories(givenStories);
-    }
-
-    @Override
-    public void givenStories(List<String> storyPaths) {
-        htmlOutput.givenStories(storyPaths);
-    }
-
-    @Override
-    public void beforeExamples(List<String> steps, ExamplesTable table) {
-        htmlOutput.beforeExamples(steps, table);
-    }
-
-    @Override
-    public void example(Map<String, String> tableRow) {
-        htmlOutput.example(tableRow);
-    }
-
-    @Override
-    public void afterExamples() {
-        htmlOutput.afterExamples();
-    }
-
-    @Override
-    public void beforeStep(String step) {
-        htmlOutput.beforeStep(step);
-    }
-
-    @Override
-    public void scenarioNotAllowed(Scenario scenario, String filter) {
-
-        htmlOutput.scenarioNotAllowed(scenario, filter);
-        if (this.currentScenarioStatus == TestStatus.PASSED /*i.e. if it has not been set to some other status yet*/) {
-            this.currentScenarioStatus = TestStatus.IGNORED;
-        }
-    }
-
-    @Override
-    public void successful(String step) {
-
-        htmlOutput.successful(step);
-    }
-
-    @Override
-    public void ignorable(String step) {
-        htmlOutput.ignorable(step);
-    }
-
-    @Override
-    public void failed(String step, Throwable storyFailure) {
-
-        htmlOutput.failed(step, storyFailure);
-        this.currentScenarioStatus = TestStatus.FAILED;
-    }
-
-    @Override
-    public void failedOutcomes(String step, OutcomesTable table) {
-        htmlOutput.failedOutcomes(step, table);
-    }
-
-    @Override
-    public void restarted(String step, Throwable cause) {
-        htmlOutput.restarted(step, cause);
-    }
-
-    @Override
-    public void dryRun() {
-        htmlOutput.dryRun();
-    }
-
-    @Override
-    public void pendingMethods(List<String> methods) {
-        htmlOutput.pendingMethods(methods);
-    }
-
-    @Override
-    public void pending(String step) {
-
-        htmlOutput.pending(step);
-        if (this.currentScenarioStatus != TestStatus.FAILED) { // fail status has priority over pending
-            this.currentScenarioStatus = TestStatus.PENDING;
-        }
-    }
-
-    @Override
-    public void notPerformed(String step) {
-        htmlOutput.notPerformed(step);
-    }
-
-
-    @Override
-    public void storyNotAllowed(Story story, String filter) {
-        htmlOutput.storyNotAllowed(story, filter);
-    }
-
-    @Override
-    public void storyCancelled(Story story, StoryDuration storyDuration) {
-        htmlOutput.storyCancelled(story, storyDuration);
-    }
-
-    @Override
-    public void beforeStory(Story story, boolean givenStory) {
-
-        this.status = TestStatus.PASSED; // assume passed at start, and then change to other if failed/pending, etc.
-
-        storyPath = story.getPath();
-
-        if (!givenStory && !storyPath.equals("BeforeStories") && !storyPath.equals("AfterStories")) {
-            // extract version
-            String regexPattern = "(.*)\\.([0-9]*)(\\.story)";
-            Pattern p = Pattern.compile(regexPattern);
-            Matcher matcher = p.matcher(storyPath);
-            if (matcher.matches()) {
-                String versionStr = matcher.group(2);
-                jiraVersion = Long.parseLong(versionStr);
-            } else {
-                throw new IllegalArgumentException("JiraStory path must match pattern - " + regexPattern);
-            }
-        }
-
-        htmlOutput.beforeStory(story, givenStory);
-    }
-
-    @Override
-    public void afterStory(boolean givenStory) {
-
-        htmlOutput.afterStory(givenStory);
-
-        if (!givenStory && !storyPath.equals("BeforeStories") && !storyPath.equals("AfterStories")) {
-
-            // set story status
-            if (totalScenariosFailed > 0) {
-                this.status = TestStatus.FAILED;
-            } else if (totalScenariosPending > 0) {
-                this.status = TestStatus.PENDING;
-            } else if (totalScenariosIgnored == totalScenarios) {
-                this.status = TestStatus.IGNORED;
-            } else {
-                this.status = TestStatus.PASSED;
-            }
-
-            String storyReport = bytesListToString(this.bytesList);
-            sendStoryReport(storyReport);
-        }
-
-    }
-
-    private static String bytesListToString(List<Byte> writtenBytes) {
-
-        Byte[] bytes = writtenBytes.toArray(new Byte[writtenBytes.size()]);
-        byte[] bytesArray = new byte[bytes.length];
-        for (int i = 0; i < bytes.length; i++) {
-            Byte aByte = bytes[i];
-            bytesArray[i] = aByte;
-        }
-
-        String str = new String(bytesArray);
-        return str;
-    }
-
-    protected void sendStoryReport(String testReport) {
-
-        Validate.notNull(status);
-        Validate.notEmpty(testReport);
-
-        StoryReport storyHtmlReportDTO = new StoryReport(environment, storyPath, jiraVersion, status, testReport);
-
-        storyHtmlReportDTO.setTotalScenarios(totalScenarios);
-        storyHtmlReportDTO.setTotalScenariosPassed(totalScenariosPassed);
-        storyHtmlReportDTO.setTotalScenariosFailed(totalScenariosFailed);
-        storyHtmlReportDTO.setTotalScenariosPending(totalScenariosPending);
-        storyHtmlReportDTO.setTotalScenariosSkipped(totalScenariosIgnored);
-        storyHtmlReportDTO.setTotalScenariosNotPerformed(totalScenariosNotPerformed);
-
-        // remove the version part from story path
-        // extract version
-        String regexPattern = "(.*)\\.([0-9]*)(\\.story)";
-        Pattern p = Pattern.compile(regexPattern);
-        Matcher matcher = p.matcher(storyPath);
-        if (matcher.matches()) {
-            storyPath = matcher.group(1) + matcher.group(3);
-        } else {
-            throw new IllegalArgumentException("JiraStory path must match pattern - " + regexPattern);
-        }
-
-        String loginParams = "?os_username=admin&os_password=admin";
-        String postUrl = (jiraBaseUrl
-                + "/" + addTestReportPath + "/"
-//                + jiraProject + "/"
-                + storyPath
-                + loginParams);
-
-        Client client = Client.create();
-        WebResource res = client.resource(postUrl);
-
-        String response = res.accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .post(String.class, storyHtmlReportDTO);
-
-        System.out.println("response - " + response);
-    }
-
-
-    private static String markTableCorrectly(String text, CustomHtmlOutput htmlOutput) {
-
-        if (text.contains("&#9252;")) {
-
-            StringBuilder sb = new StringBuilder();
-            String[] tokens = text.split("\\&#9252;");
-
-            for (int i = 0; i < tokens.length; i++) {
-                String token = tokens[i];
-                boolean isTableStartLine = false;
-                boolean isTableEndLine = false;
-                if (token.startsWith("|")) {
-                    // table line
-                    if (i == 0 || (i != 0 && !tokens[i - 1].startsWith("|"))) {
-                        // if previous line was not a table line then open the table tag
-                        String tableStartMarker = StepCreator.PARAMETER_TABLE_START;
-                        tableStartMarker = (String) htmlOutput.escape(PrintStreamOutput.Format.HTML, tableStartMarker)[0];
-                        sb.append(tableStartMarker);
-                        sb.append(token);
-                        isTableStartLine = true;
-                    }
-                    if (i == tokens.length - 1 || !tokens[i + 1].startsWith("|")) {
-                        // if this is the last line or the next line is not a table line
-                        String beforePart = token.substring(0, token.lastIndexOf("|") + 1);
-                        sb.append(beforePart);
-                        String tableEndMarker = StepCreator.PARAMETER_TABLE_END;
-                        tableEndMarker = (String) htmlOutput.escape(PrintStreamOutput.Format.HTML, tableEndMarker)[0];
-                        sb.append(tableEndMarker);
-                        String afterPart = token.substring(token.lastIndexOf("|") + 1);
-                        sb.append(afterPart);
-                        isTableEndLine = true;
-                    }
-                    if (!isTableStartLine && !isTableEndLine) {
-                        // table line that is not first or last line in that table
-                        sb.append(token);
-                    }
-                    if (i != 0 && i != tokens.length - 1) {
-                        sb.append("\n");
-                    }
-                } else {
-                    if (i != 0) {
-                        sb.append("\n");
-                    }
-                    sb.append(token);
-                }
-            }
-
-            String result = sb.toString();
-            return result;
-
-        } else {
-            return text;
-        }
-    }
-
-    private static Properties mergeOverridenPatterns(Properties outputPatterns) {
-        Properties patterns = new CustomHTMLFormatPatterns().getPatterns();
-        Properties overridenPatterns = overridenPatterns();
-        patterns.putAll(overridenPatterns);
-        patterns.putAll(outputPatterns);
-        return patterns;
-    }
-
-    public static Properties overridenPatterns() {
-
-        Properties patterns = new Properties();
-
-        patterns.setProperty("beforeScenario", "<div class=\"scenario\">\n<div class=\"scenario-title\"><span class=\"label\">{0}</span> <span class=\"title\">{1}</span></div>\n");
-        patterns.setProperty("afterScenario", "</div>\n");
-        patterns.setProperty("afterScenarioWithFailure", "<pre class=\"failure\">{0}</pre>\n</div>\n");
-
-        patterns.setProperty("successful", "<div class=\"step successful\">{0}</div>\n");
-        patterns.setProperty("ignorable", "<div class=\"step ignorable\">{0}</div>\n");
-        patterns.setProperty("pending", "<div class=\"step pending\">{0} <span class=\"keyword pending\">({1})</span></div>\n");
-        patterns.setProperty("notPerformed", "<div class=\"step notPerformed\">{0} <span class=\"keyword notPerformed\">({1})</span></div>\n");
-        patterns.setProperty("failed", "<div class=\"step failed\">{0} <span class=\"keyword failed\">({1})</span><br/><span class=\"message failed\">{2}</span></div>\n");
-        patterns.setProperty("restarted", "<div class=\"step restarted\">{0} <span class=\"message restarted\">{1}</span></div>\n");
-
-        patterns.setProperty("pendingMethod", "");
-
-        return patterns;
-    }
-
-    /**
-     * @author Maryna Stasyuk
-     */
-    public static class CustomHTMLFormatPatterns {
-
-        public Properties getPatterns() {
-            return patterns;
-        }
-
-        private final Properties patterns;
-
-        public CustomHTMLFormatPatterns() {
-
-            patterns = new Properties();
-            patterns.setProperty("dryRun", "<div class=\"dryRun\">{0}</div>\n");
-
-            //        patterns.setProperty("beforeStory", "<div class=\"story\">\n<h1>{0}</h1>\n<div class=\"path\">{1}</div>\n");
-            patterns.setProperty("beforeStory", "<div class=\"story\">\n");
-
-            //        patterns.setProperty("beforeStory", "<div class=\"story\">\n");
-            patterns.setProperty("afterStory", "</div>\n");
-
-            patterns.setProperty("storyCancelled", "<div class=\"cancelled\">{0} ({1} {2} s)</div>\n");
-            patterns.setProperty("pendingMethod", "<div><pre class=\"pending\">{0}</pre></div>\n");
-            patterns.setProperty("metaStart", "<div class=\"meta\">\n<div class=\"keyword\">{0}</div>\n");
-            patterns.setProperty("metaProperty", "<div class=\"property\">{0}{1} {2}</div>\n");
-            patterns.setProperty("metaEnd", "</div>\n");
-            patterns.setProperty("filter", "<div class=\"filter\">{0}</div>\n");
-
-            //        patterns.setProperty("narrative", "<div class=\"narrative\"><h2>{0}</h2>\n<div class=\"element inOrderTo\"><span class=\"keyword inOrderTo\">{1}</span> {2}</div>\n<div class=\"element asA\"><span class=\"keyword asA\">{3}</span> {4}</div>\n<div class=\"element iWantTo\"><span class=\"keyword iWantTo\">{5}</span> {6}</div>\n</div>\n");
-            patterns.setProperty("narrative",
-                    "<div class=\"beforeNarrative\"><span>&nbsp;</span><span style=\"display: none;\" class=\"beforeNarrativeHint\">+<span></div>" +
-                            "<div class=\"narrative\">" +
-                            "<div class=\"label\">" +
-                            "{0}</div>\n" +
-                            "<div contentEditable=\"false\" class=\"element inOrderTo\">" +
-                            "<div style=\"display: none;\" class=\"add-icon\">+</div>" +
-                            "<span contentEditable=\"false\" class=\"keyword inOrderTo inOrderToSpan\">{1}</span> <span></span></div>\n" +
-
-                            "<div class=\"element asA\"><span class=\"keyword asA\">{3}</span> {4}</div>\n" +
-                            "<div class=\"element iWantTo\"><span class=\"keyword iWantTo\">{5}</span> {6}</div>\n" +
-                            "</div>\n"
-            );
-
-            patterns.setProperty("lifecycleStart", "<div class=\"lifecycle\"><h2>{0}</h2>");
-            patterns.setProperty("lifecycleEnd", "</div>");
-            patterns.setProperty("lifecycleBeforeStart", "<div class=\"before\"><h3>{0}</h3>");
-            patterns.setProperty("lifecycleBeforeEnd", "</div>");
-            patterns.setProperty("lifecycleAfterStart", "<div class=\"after\"><h3>{0}</h3>");
-            patterns.setProperty("lifecycleAfterEnd", "</div>");
-            patterns.setProperty("lifecycleStep", "<div class=\"step\">{0}</div>\n");
-
-            //        patterns.setProperty("beforeScenario", "<div class=\"scenario\">\n<h2>{0} {1}</h2>\n");
-            patterns.setProperty("beforeScenario", "<div class=\"scenario\">\n<div class=\"scenario-title\"><span class=\"scenario-plus aui-icon aui-icon-small aui-iconfont-add\"></span><span class=\"label\">{0}</span> <span class=\"title\">{1}</span></div>\n");
-
-            patterns.setProperty("afterScenario", "</div>\n");
-            patterns.setProperty("afterScenarioWithFailure", "<pre class=\"failure\">{0}</pre>\n</div>\n");
-            patterns.setProperty("givenStories", "<div class=\"givenStories\">{0} {1}</div>\n");
-            patterns.setProperty("givenStoriesStart", "<div class=\"givenStories\">{0}\n");
-            patterns.setProperty("givenStory", "<div class=\"givenStory\">{0} {1}</div>\n");
-            patterns.setProperty("givenStoriesEnd", "</div>\n");
-
-            patterns.setProperty("successful", "<div class=\"step successful\">{0}</div>\n");
-            patterns.setProperty("ignorable", "<div class=\"step ignorable\">{0}</div>\n");
-            patterns.setProperty("pending", "<div class=\"step pending\"><span class=\"aui-icon aui-icon-small aui-iconfont-add\"></span>{0} <span class=\"keyword pending\">({1})</span></div>\n");
-            patterns.setProperty("notPerformed", "<div class=\"step notPerformed\">{0} <span class=\"keyword notPerformed\">({1})</span></div>\n");
-            patterns.setProperty("failed", "<div class=\"step failed\">{0} <span class=\"keyword failed\">({1})</span><br/><span class=\"message failed\">{2}</span></div>\n");
-            patterns.setProperty("restarted", "<div class=\"step restarted\">{0} <span class=\"message restarted\">{1}</span></div>\n");
-
-            patterns.setProperty("outcomesTableStart", "<div class=\"outcomes\"><table>\n");
-            patterns.setProperty("outcomesTableHeadStart", "<thead>\n<tr>\n");
-            patterns.setProperty("outcomesTableHeadCell", "<th>{0}</th>");
-            patterns.setProperty("outcomesTableHeadEnd", "</tr>\n</thead>\n");
-            patterns.setProperty("outcomesTableBodyStart", "<tbody>\n");
-            patterns.setProperty("outcomesTableRowStart", "<tr class=\"{0}\">\n");
-            patterns.setProperty("outcomesTableCell", "<td>{0}</td>");
-            patterns.setProperty("outcomesTableRowEnd", "</tr>\n");
-            patterns.setProperty("outcomesTableBodyEnd", "</tbody>\n");
-            patterns.setProperty("outcomesTableEnd", "</table></div>\n");
-            patterns.setProperty("beforeExamples", "<div class=\"examples\">\n<h3>{0}</h3>\n");
-            patterns.setProperty("examplesStep", "<div class=\"step\">{0}</div>\n");
-            patterns.setProperty("afterExamples", "</div>\n");
-            patterns.setProperty("examplesTableStart", "<table>\n");
-            patterns.setProperty("examplesTableHeadStart", "<thead>\n<tr>\n");
-            patterns.setProperty("examplesTableHeadCell", "<th>{0}</th>");
-            patterns.setProperty("examplesTableHeadEnd", "</tr>\n</thead>\n");
-            patterns.setProperty("examplesTableBodyStart", "<tbody>\n");
-            patterns.setProperty("examplesTableRowStart", "<tr>\n");
-            patterns.setProperty("examplesTableCell", "<td>{0}</td>");
-            patterns.setProperty("examplesTableRowEnd", "</tr>\n");
-            patterns.setProperty("examplesTableBodyEnd", "</tbody>\n");
-            patterns.setProperty("examplesTableEnd", "</table>\n");
-            patterns.setProperty("example", "\n<h3 class=\"example\">{0} {1}</h3>\n");
-            patterns.setProperty("parameterValueStart", "<span class=\"step parameter\">");
-            patterns.setProperty("parameterValueEnd", "</span>");
-            patterns.setProperty("parameterValueNewline", "<br/>");
-        }
-    }
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    public static class StoryReport {
-
-        private String environment;
-
-        private String storyPath;
-
-        private Long storyVersion;
-
-        public TestStatus status;
-
-        private Integer totalScenarios;
-
-        private Integer totalScenariosPassed;
-
-        private Integer totalScenariosFailed;
-
-        private Integer totalScenariosPending;
-
-        private Integer totalScenariosSkipped;
-
-        private Integer totalScenariosNotPerformed;
-
-        private String htmlReport;
-
-        protected StoryReport() {
-        }
-
-        public StoryReport(String environment, String storyPath,
-                           Long storyVersion, TestStatus status, String htmlReport) {
-            this.environment = environment;
-            this.storyPath = storyPath;
-            this.storyVersion = storyVersion;
-            this.status = status;
-            this.htmlReport = htmlReport;
-        }
-
-        public String getEnvironment() {
-            return environment;
-        }
-
-        public void setEnvironment(String environment) {
-            this.environment = environment;
-        }
-
-        public String getStoryPath() {
-            return storyPath;
-        }
-
-        public void setStoryPath(String storyPath) {
-            this.storyPath = storyPath;
-        }
-
-        public Long getStoryVersion() {
-            return storyVersion;
-        }
-
-        public void setStoryVersion(Long storyVersion) {
-            this.storyVersion = storyVersion;
-        }
-
-        public TestStatus getStatus() {
-            return status;
-        }
-
-        public void setStatus(TestStatus status) {
-            this.status = status;
-        }
-
-        public String getHtmlReport() {
-            return htmlReport;
-        }
-
-        public void setHtmlReport(String htmlReport) {
-            this.htmlReport = htmlReport;
-        }
-
-        public Integer getTotalScenarios() {
-            return totalScenarios;
-        }
-
-        public void setTotalScenarios(Integer totalScenarios) {
-            this.totalScenarios = totalScenarios;
-        }
-
-        public Integer getTotalScenariosPassed() {
-            return totalScenariosPassed;
-        }
-
-        public void setTotalScenariosPassed(Integer totalScenariosPassed) {
-            this.totalScenariosPassed = totalScenariosPassed;
-        }
-
-        public Integer getTotalScenariosFailed() {
-            return totalScenariosFailed;
-        }
-
-        public void setTotalScenariosFailed(Integer totalScenariosFailed) {
-            this.totalScenariosFailed = totalScenariosFailed;
-        }
-
-        public Integer getTotalScenariosPending() {
-            return totalScenariosPending;
-        }
-
-        public void setTotalScenariosPending(Integer totalScenariosPending) {
-            this.totalScenariosPending = totalScenariosPending;
-        }
-
-        public Integer getTotalScenariosSkipped() {
-            return totalScenariosSkipped;
-        }
-
-        public void setTotalScenariosSkipped(Integer totalScenariosSkipped) {
-            this.totalScenariosSkipped = totalScenariosSkipped;
-        }
-
-        public Integer getTotalScenariosNotPerformed() {
-            return totalScenariosNotPerformed;
-        }
-
-        public void setTotalScenariosNotPerformed(Integer totalScenariosNotPerformed) {
-            this.totalScenariosNotPerformed = totalScenariosNotPerformed;
-        }
-
-        @Override
-        public String toString() {
-            return "JiraStoryHtmlReport{" +
-                    "environment='" + environment + '\'' +
-                    ", storyPath='" + storyPath + '\'' +
-                    ", storyVersion=" + storyVersion +
-                    ", status=" + status +
-                    ", totalScenarios=" + totalScenarios +
-                    ", totalScenariosPassed=" + totalScenariosPassed +
-                    ", totalScenariosFailed=" + totalScenariosFailed +
-                    ", totalScenariosPending=" + totalScenariosPending +
-                    ", totalScenariosSkipped=" + totalScenariosSkipped +
-                    ", totalScenariosNotPerformed=" + totalScenariosNotPerformed +
-                    ", htmlReport='" + htmlReport + '\'' +
-                    '}';
-        }
-
-
-    }
-
-    public static class CustomHtmlOutput extends HtmlOutput {
-
-        public CustomHtmlOutput(PrintStream printStream, Properties outputPatterns, LocalizedKeywords keywords,
-                                boolean reportFailureTrace, boolean compressFailureTrace) {
-            super(printStream, outputPatterns, keywords, reportFailureTrace, compressFailureTrace);
-        }
-
-        @Override
-        protected void print(String text) {
-            text = GroovyStoryReporter.markTableCorrectly(text, this);
-            super.print(text);
-        }
-
-        @Override
-        protected Object[] escape(PrintStreamOutput.Format format, Object... args) {
-            return super.escape(format, args);
-        }
-    }
-}
-
-
-
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/edit-story.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/edit-story.css	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/edit-story.css	(revision )
@@ -1,13 +1,13 @@
-#editorSettingsContainer {
+/*#editorSettingsContainer {*/
     /*border: solid #002240 thin;*/
     /*width: 30px;*/
-    float:right;
-    width: 5%;
+    /*float:right;*/
+    /*width: 5%;*/
     /*height: 45px;*/
     /*max-height: 45px;*/
     /*margin-left: 5px;*/
-    display:inline-block;
-}
+    /*display:inline-block;*/
+/*}*/
 
 #storyEditAreaContainer {
     padding-top: 10px;
@@ -21,16 +21,16 @@
     display:inline-block;
 }
 
-.edit-operation-link {
-    font-weight: bold;
-}
+/*.edit-operation-link {*/
+    /*font-weight: bold;*/
+/*}*/
 
-.firstDiv {
-    display: inline;
+/*.firstDiv {*/
+    /*display: inline;*/
     /*border-style: solid;*/
     /*border-width: 1px;*/
     /*border-color: green;*/
-}
+/*}*/
 
 .save-story-button-spinner {
     /*border-style: solid;*/
@@ -40,7 +40,7 @@
     display: inline;
 }
 
-#storyEditArea.active {
+/*#storyEditArea.active {*/
     /*border: 1px solid grey;*/
     /*border-bottom-left-radius: 2px;*/
     /*border-bottom-right-radius: 2px;*/
@@ -51,143 +51,143 @@
     /*border-bottom-color: rgb(51, 51, 51);*/
     /*border-left-color: rgb(51, 51, 51);*/
 
-    border-radius: 3px;
+    /*border-radius: 3px;*/
     /*border-bottom-left-radius: 3px;*/
     /*border-bottom-right-radius: 3px;*/
     /*border-top-left-radius: 1px;*/
     /*border-top-right-radius: 1px;*/
 
-    border-style: solid;
+    /*border-style: solid;*/
     /*border-left-style: solid;*/
     /*border-top-style: solid;*/
     /*border-bottom-style: solid;*/
     /*border-right-style: solid;*/
 
-    border-width: 1px;
+    /*border-width: 1px;*/
     /*border-top-width: 1px;*/
     /*border-bottom-width: 1px;*/
     /*border-left-width: 1px;*/
     /*border-right-width: 1px;*/
 
-    border-color: rgb(204, 204, 204);
+    /*border-color: rgb(204, 204, 204);*/
     /*border-left-color: rgb(204, 204, 204);*/
     /*border-right-color: rgb(204, 204, 204);*/
     /*border-top-color: rgb(204, 204, 204);*/
     /*border-bottom-color: rgb(204, 204, 204);*/
 
-    border-collapse: separate;
-    border-image-outset: 0px;
-    border-image-repeat: stretch;
-    border-image-slice: 100%;
-    border-image-source: none;
-    border-image-width: 1;
+    /*border-collapse: separate;*/
+    /*border-image-outset: 0px;*/
+    /*border-image-repeat: stretch;*/
+    /*border-image-slice: 100%;*/
+    /*border-image-source: none;*/
+    /*border-image-width: 1;*/
 
-    bottom: auto;
-    box-shadow: rgb(232, 232, 232) 0px 1px 3px 0px inset;
-    box-sizing: border-box;
-}
+    /*bottom: auto;*/
+    /*box-shadow: rgb(232, 232, 232) 0px 1px 3px 0px inset;*/
+    /*box-sizing: border-box;*/
+/*}*/
 
 
-#editStoryButtons {
-    margin-top: 20px;
-    margin-left: 0px;
-}
+/*#editStoryButtons {*/
+    /*margin-top: 20px;*/
+    /*margin-left: 0px;*/
+/*}*/
 
-.story-editor-field {
-    border: none;
-    resize: none;
-    overflow: hidden;
-}
+/*.story-editor-field {*/
+    /*border: none;*/
+    /*resize: none;*/
+    /*overflow: hidden;*/
+/*}*/
 
-.story-editor-field.focused {
-    border: solid 1px #00cc00;
-}
+/*.story-editor-field.focused {*/
+    /*border: solid 1px #00cc00;*/
+/*}*/
 
-.story-description .story-editor-field {
+/*.story-description .story-editor-field {*/
     /*border: none;*/
-    color: forestgreen;
-    width: 100%;
+    /*color: forestgreen;*/
+    /*width: 100%;*/
     /*resize: none;*/
-}
+/*}*/
 
-.narrative .story-editor-field {
+/*.narrative .story-editor-field {*/
     /*border: none;*/
-    color: #00F;
-    width: 100%;
-    font-family: "Lucida Grande", "Arial", "Helvetica", "Verdana", sans-serif;
-    font-size: 1em;
-    white-space: nowrap;
-}
+    /*color: #00F;*/
+    /*width: 100%;*/
+    /*font-family: "Lucida Grande", "Arial", "Helvetica", "Verdana", sans-serif;*/
+    /*font-size: 1em;*/
+    /*white-space: nowrap;*/
+/*}*/
 
-#richStoryEditContent {
-    margin-top: 20px;
-    margin-left: 20px;
-}
+/*#richStoryEditContent {*/
+    /*margin-top: 20px;*/
+    /*margin-left: 20px;*/
+/*}*/
 
-.insert-element-div {
-    position: relative;
-    margin-top: 0px;
-    margin-bottom: 0px;
+/*.insert-element-div {*/
+    /*position: relative;*/
+    /*margin-top: 0px;*/
+    /*margin-bottom: 0px;*/
     /*border: 1px solid #008000;*/
 
-}
+/*}*/
 
-.insert-element-trigger-div {
-    position: absolute;
-    top: 0px;
-    left: -23px;
-    width: 100%;
+/*.insert-element-trigger-div {*/
+    /*position: absolute;*/
+    /*top: 0px;*/
+    /*left: -23px;*/
+    /*width: 100%;*/
     /*border: 1px solid #006699;*/
-}
+/*}*/
 
-.insert-element-link-div {
+/*.insert-element-link-div {*/
     /*border: solid 1px purple;*/
-}
+/*}*/
 
-.insert-element-link {
+/*.insert-element-link {*/
     /*position: absolute;*/
     /*top: 0px;*/
     /*left: 0px;*/
-    margin-left: 3px;
-}
+    /*margin-left: 3px;*/
+/*}*/
 
-.insert-element-link {
-    color: #00cc00;
-}
+/*.insert-element-link {*/
+    /*color: #00cc00;*/
+/*}*/
 
 /*.aui-button.aui-button-link.insert-element-link, .aui-button.aui-button-link.insert-element-link:visited {*/
 /*color: #ff0000;*/
 /*}*/
 
-.insert-element-link:focus, .insert-element-link:active .insert-element-link:visited {
-    color: #00cc00;
-}
+/*.insert-element-link:focus, .insert-element-link:active .insert-element-link:visited {*/
+    /*color: #00cc00;*/
+/*}*/
 
-.story-element-container {
-    position: relative;
+/*.story-element-container {*/
+    /*position: relative;*/
     /*border: solid 1px #815b3a;*/
-}
+/*}*/
 
-.element-operations-container {
-    position: absolute;
-    top: 0px;
-    left: 0px;
-    border: solid 1px yellow;
-}
+/*.element-operations-container {*/
+    /*position: absolute;*/
+    /*top: 0px;*/
+    /*left: 0px;*/
+    /*border: solid 1px yellow;*/
+/*}*/
 
-.element-content-container {
-    margin-left: 23px;
-}
+/*.element-content-container {*/
+    /*margin-left: 23px;*/
+/*}*/
 
-.remove-element-link {
-    color: red;
-}
+/*.remove-element-link {*/
+    /*color: red;*/
+/*}*/
 
-.remove-element-link:focus, .remove-element-link:active .remove-element-link:visited {
-    color: red;
-}
+/*.remove-element-link:focus, .remove-element-link:active .remove-element-link:visited {*/
+    /*color: red;*/
+/*}*/
 
-.story-element-field-short {
+/*.story-element-field-short {*/
     /*width: 30%;*/
-}
+/*}*/
 
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStoryPathsFinder.groovy
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStoryPathsFinder.groovy	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStoryPathsFinder.groovy	(date 1409146073000)
@@ -1,95 +0,0 @@
-package org.bitbucket.jbehaveforjira.groovyclient
-
-import com.sun.jersey.api.client.Client
-import com.sun.jersey.api.client.ClientResponse
-import com.sun.jersey.api.client.WebResource
-import org.apache.commons.lang.Validate
-import org.bitbucket.jbehaveforjira.javaclient.StoryPathsFinder
-import org.slf4j.Logger
-import org.slf4j.LoggerFactory
-
-import javax.ws.rs.core.MediaType
-import javax.ws.rs.core.Response
-import javax.xml.bind.annotation.XmlAccessType
-import javax.xml.bind.annotation.XmlAccessorType
-import javax.xml.bind.annotation.XmlRootElement
-
-/**
- * @author Maryna Stasyuk
- */
-public class GroovyStoryPathsFinder implements StoryPathsFinder {
-
-    private final Logger log = LoggerFactory.getLogger(getClass());
-
-    private String jiraBaseUrl;
-
-    private String projectKey;
-
-    public GroovyStoryPathsFinder(String jiraBaseUrl, String projectKey) {
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.projectKey = projectKey;
-        Validate.notEmpty(projectKey);
-    }
-
-    public List<String> findPaths() {
-        return this.findPaths(Collections.EMPTY_LIST, Collections.EMPTY_LIST);
-    }
-
-    public List<String> findPaths(List<String> includes, List<String> excludes) {
-
-        List<String> paths = new ArrayList<String>();
-
-        URI jiraSearchUrl = null;
-        try {
-            String fullPath = jiraBaseUrl + "/rest/story-res/1.0/find/story-paths/" + projectKey;
-            fullPath += "?os_username=admin&os_password=admin";
-            jiraSearchUrl = new URI(fullPath);
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
-
-        Client client = Client.create();
-        WebResource res = client.resource(jiraSearchUrl);
-        res.type(MediaType.APPLICATION_JSON);
-//        res.type(MediaType.TEXT_PLAIN);
-        ClientResponse response = res.get(ClientResponse.class);
-        log.info("response - " + response);
-        if (response.getStatus() == 200) {
-
-            int length = response.getLength();
-            MediaType type = response.getType();
-            StoryPaths storyPaths = response.getEntity(StoryPaths.class);
-
-            if (storyPaths.getPaths() != null && !storyPaths.getPaths().isEmpty()) {
-                paths = storyPaths.getPaths();
-            }
-
-        } else {
-            int status = response.getStatus();
-            Response.StatusType statusInfo = response.getStatusInfo();
-            throw new RuntimeException("Error occurred while trying to find Jira story paths. " +
-                    "Response status was - " + status + ", status info - " + statusInfo);
-        }
-
-        return paths;
-    }
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    public static class StoryPaths {
-
-        private List<String> paths;
-
-        public List<String> getPaths() {
-            return paths;
-        }
-
-        public void setPaths(List<String> paths) {
-            this.paths = paths;
-        }
-    }
-
-}
-
-
-
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryService.js	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryService.js	(revision )
@@ -2,7 +2,7 @@
 
     this.debugOn = true;
 
-    var pathBase = "/jira/rest/story-res/1.0/";
+    var pathBase = "/jira/rest/jbehave-for-jira/1.0/";
 
     // story paths
     var pathSave = pathBase + "crud/save/";
@@ -209,7 +209,7 @@
         this.debug("> fetchStepDocs");
         this.debug("projectKey - " + projectKey);
 
-        var pathBase = "/jira/rest/story-res/1.0/";
+        var pathBase = "/jira/rest/jbehave-for-jira/1.0/";
         var pathStepDocs = pathBase + "step-doc/for-project/" + projectKey;
         this.debug("pathStepDocs - " + pathStepDocs);
 
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/soy/TemplatesShowStory.soy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/soy/TemplatesShowStory.soy	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/soy/TemplatesShowStory.soy	(revision )
@@ -5,27 +5,7 @@
  */
 {template .renderStoryPanel}
 <div id="storyContainer">
-//    <div id="storyEditorHeader">
-        <div id="storyMsgBar"></div>
+    <div id="storyMsgBar"></div>
-//        <div id="editorSettingsContainer">
-//              <a id="storyEditorSettingsTrigger" href="#storyEditorSettings" aria-owns="storyEditorSettings" aria-haspopup="true"
-//                class="aui-button aui-button-link aui-dropdown2-trigger aui-dropdown2-trigger-arrowless aui-style-default">
-//                <span class="aui-icon aui-icon-small aui-iconfont-configure aui-dropdown2-trigger-arrowless">Configure</span>
-//                </a>
-//              <!-- Simple Dropdown - dropdown -->
-//              <div id="storyEditorSettings" class="aui-dropdown2 aui-style-default">
-//                  <ul class="aui-list-truncate">
-//                    <li><a id="showLineNumbersTrigger"
-//                        class="aui-dropdown2-checkbox interactive">show line numbers</a></li>
-//                      <li><a id="autoAlignTableParamsTrigger"
-//                        class="aui-dropdown2-checkbox interactive">auto align tables</a></li>
-//                      <li><a id="autoInsertTabularParametersTrigger"
-//                        class="aui-dropdown2-checkbox interactive">auto insert tabular parameters</a></li>
-//                  </ul>
-//              </div><!-- .aui-dropdown2 -->
-//        </div>
-//    </div>
-
     <div id="storyEditAreaContainer">
         <textarea id="storyTextArea"
             rows="10"
@@ -40,19 +20,9 @@
 {template .renderSaveCancelMsg}
 <div id="storyEditedMsgContainer">
     <span>Story has been modified! <span
-        class="edit-operation-link"><a href="#" onclick="storyController.saveStory(event)">Save</a></span> or <span
-        class="edit-operation-link"><a href="#" onclick="storyController.cancelEdit(event)">Cancel</a></span></span>
+        class="edit-operation-link"><a href="#" onclick="storyController.saveStoryHandler(event)">Save</a></span> or <span
+        class="edit-operation-link"><a href="#" onclick="storyController.cancelEditHandler(event)">Cancel</a></span></span>
 </div>
-//    <table>
-//        <tr>
-//            <td style="width: 100%;">
-//                Story has been modified
-//            </td>
-//            <td style="width: auto;">
-//                Save or Cancel
-//            </td>
-//        </tr>
-//    </table>
 {/template}
 
 /**
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/jbehave-edit.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/jbehave-edit.css	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/jbehave-edit.css	(revision )
@@ -1,52 +1,52 @@
-.cm-description-line {
-    color: dimgrey;
-}
+/*.cm-description-line {*/
+    /*color: dimgrey;*/
+/*}*/
 
-.cm-meta-title {
-    color: #770088;
-    font-weight: bold;
-}
+/*.cm-meta-title {*/
+    /*color: #770088;*/
+    /*font-weight: bold;*/
+/*}*/
 
-.cm-meta-field {
-    color: #770088;
-}
+/*.cm-meta-field {*/
+    /*color: #770088;*/
+/*}*/
 
-.cm-narrative-title {
-    color: #0000cc;
-    font-weight: bold;
-    font-size: 16px;
-}
+/*.cm-narrative-title {*/
+    /*color: #0000cc;*/
+    /*font-weight: bold;*/
+    /*font-size: 16px;*/
+/*}*/
 
-.cm-narrative-field-keyword {
-    color: #0000cc;
-    font-weight: bold;
-    font-size: 14px;
-}
+/*.cm-narrative-field-keyword {*/
+    /*color: #0000cc;*/
+    /*font-weight: bold;*/
+    /*font-size: 14px;*/
+/*}*/
 
-.cm-narrative-field-value {
-    color: #0000cc;
-    font-size: 14px;
-}
+/*.cm-narrative-field-value {*/
+    /*color: #0000cc;*/
+    /*font-size: 14px;*/
+/*}*/
 
-.cm-scenario-keyword {
-    color: green;
-    font-weight: bold;
-}
+/*.cm-scenario-keyword {*/
+    /*color: green;*/
+    /*font-weight: bold;*/
+/*}*/
 
-.cm-scenario-title {
-    color: green;
+/*.cm-scenario-title {*/
+    /*color: green;*/
     /*font-weight: bold;*/
-}
+/*}*/
 
-.cm-step-keyword {
-    color: #aa5500;
-    font-weight: bold;
-    font-style: italic;
-}
+/*.cm-step-keyword {*/
+    /*color: #aa5500;*/
+    /*font-weight: bold;*/
+    /*font-style: italic;*/
+/*}*/
 
-.cm-step-keyword.matched-step {
-    font-style: normal;
-}
+/*.cm-step-keyword.matched-step {*/
+    /*font-style: normal;*/
+/*}*/
 
 /*.hint-step-keyword {*/
     /*color: #aa5500;*/
@@ -61,18 +61,18 @@
     /*color: lightslategrey;*/
 /*}*/
 
-.cm-step-body {
-    font-style: italic;
-}
+/*.cm-step-body {*/
+    /*font-style: italic;*/
+/*}*/
 
-.cm-step-body.matched-step {
-    font-style: normal;
-}
+/*.cm-step-body.matched-step {*/
+    /*font-style: normal;*/
+/*}*/
 
-.cm-step-body.matched-step.step-parameter {
-    font-weight: bold;
-    color: purple;
-}
+/*.cm-step-body.matched-step.step-parameter {*/
+    /*font-weight: bold;*/
+    /*color: purple;*/
+/*}*/
 
 /*.hint-step-parameter {*/
     /*font-weight: bold;*/
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStepDocReporter.groovy
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStepDocReporter.groovy	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStepDocReporter.groovy	(date 1409146073000)
@@ -1,171 +0,0 @@
-package groovy
-import com.sun.jersey.api.client.Client
-import com.sun.jersey.api.client.WebResource
-import org.jbehave.core.model.StepPattern
-import org.jbehave.core.parsers.RegexPrefixCapturingPatternParser
-import org.jbehave.core.parsers.StepMatcher
-import org.jbehave.core.reporters.StepdocReporter
-import org.jbehave.core.steps.StepType
-import org.jbehave.core.steps.Stepdoc
-
-import javax.ws.rs.core.MediaType
-import javax.xml.bind.annotation.XmlAccessType
-import javax.xml.bind.annotation.XmlAccessorType
-import javax.xml.bind.annotation.XmlRootElement
-/**
- * @author Maryna Stasyuk
- */
-public class GroovyStepDocReporter implements StepdocReporter {
-
-    private final String jiraBaseUrl;
-
-    private final String jiraProject;
-
-    private String createStepDocsPath = "rest/story-res/1.0/step-doc/add";
-
-    private RegexPrefixCapturingPatternParser patternParser;
-
-    public GroovyStepDocReporter(String jiraBaseUrl, String jiraProject) {
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.jiraProject = jiraProject;
-        patternParser = new RegexPrefixCapturingPatternParser();
-    }
-
-    @Override
-    public void stepdocs(List<Stepdoc> stepdocs, List<Object> stepsInstances) {
-
-        List<StepDocDTO> stepDocDTOs = new ArrayList<StepDocDTO>(stepdocs.size());
-
-        for (Stepdoc stepdoc : stepdocs) {
-
-            String pattern = stepdoc.getPattern();
-            StepType stepType = stepdoc.getStepType();
-            String startingWord = stepdoc.getStartingWord();
-
-            stepdoc.getMethod();
-
-            StepMatcher stepMatcher = patternParser.parseStep(stepType, pattern);
-            StepPattern stepPattern = stepMatcher.pattern();
-            String resolvedPattern = stepPattern.resolved();
-            StepDocDTO stepDocDTO = new StepDocDTO(startingWord, pattern, resolvedPattern);
-            stepDocDTOs.add(stepDocDTO);
-        }
-
-        StepDocsPayload stepDocsPayload = new StepDocsPayload(stepDocDTOs);
-        uploadToJira(stepDocsPayload);
-    }
-
-    private void uploadToJira(StepDocsPayload stepDocsPayload) {
-
-        String loginParams = "?os_username=admin&os_password=admin";
-        String postUrl = (jiraBaseUrl
-                + "/" + createStepDocsPath + "/"
-                + jiraProject
-                + loginParams);
-
-        Client client = Client.create();
-        WebResource res = client.resource(postUrl);
-
-        String response = res.accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .post(String.class, stepDocsPayload);
-
-        System.out.println("response - " + response);
-
-    }
-
-    @Override
-    public void stepdocsMatching(String stepAsString, List<Stepdoc> matching, List<Object> stepsIntances) {
-        // ignored
-    }
-
-
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    public static class StepDocDTO {
-
-        private String startingWord;
-        private String pattern;
-        private String resolvedPattern;
-        private String groupedRegExpPattern;
-        private List<Integer> parameterGroups = new ArrayList<Integer>();
-
-        protected StepDocDTO() {
-        }
-
-        public StepDocDTO(String startingWord, String pattern, String resolvedPattern) {
-            this(startingWord, pattern, resolvedPattern, null, null);
-        }
-
-        public StepDocDTO(String startingWord, String pattern, String resolvedPattern, String groupedRegExpPattern, List<Integer> parameterGroups) {
-            this.startingWord = startingWord;
-            this.pattern = pattern;
-            this.resolvedPattern = resolvedPattern;
-            this.groupedRegExpPattern = groupedRegExpPattern;
-            this.parameterGroups = parameterGroups;
-        }
-
-
-        public String getStartingWord() {
-            return startingWord;
-        }
-
-        public String getPattern() {
-            return pattern;
-        }
-
-        public String getResolvedPattern() {
-            return resolvedPattern;
-        }
-
-        public String getGroupedRegExpPattern() {
-            return groupedRegExpPattern;
-        }
-
-        public List<Integer> getParameterGroups() {
-            return parameterGroups;
-        }
-
-        public void setGroupedRegExpPattern(String groupedRegExpPattern) {
-            this.groupedRegExpPattern = groupedRegExpPattern;
-        }
-
-        public void setParameterGroups(List<Integer> parameterGroups) {
-            this.parameterGroups = parameterGroups;
-        }
-
-        @Override
-        public String toString() {
-            return "StepDocDTO{" +
-                    "startingWord='" + startingWord + '\'' +
-                    ", pattern='" + pattern + '\'' +
-                    ", resolvedPattern='" + resolvedPattern + '\'' +
-                    ", groupedRegExpPattern='" + groupedRegExpPattern + '\'' +
-                    ", parameterGroups=" + parameterGroups +
-                    '}';
-        }
-    }
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    public static class StepDocsPayload {
-
-        private List<StepDocDTO> stepDocs;
-
-        protected StepDocsPayload() {
-        }
-
-        public StepDocsPayload(List<StepDocDTO> stepDocs) {
-            this.stepDocs = stepDocs;
-        }
-
-        public List<StepDocDTO> getStepDocs() {
-            return stepDocs;
-        }
-    }
-}
-
-
-
-
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStepDocReporter.groovy
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStepDocReporter.groovy	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/org/bitbucket/jbehaveforjira.groovyclient/GroovyStepDocReporter.groovy	(date 1409146073000)
@@ -1,391 +0,0 @@
-package org.bitbucket.jbehaveforjira.groovyclient
-import com.sun.jersey.api.client.Client
-import org.apache.commons.lang.Validate
-import org.codehaus.jackson.map.ObjectMapper
-import org.jbehave.core.annotations.AsParameters
-import org.jbehave.core.annotations.Parameter
-import org.jbehave.core.model.StepPattern
-import org.jbehave.core.parsers.RegexPrefixCapturingPatternParser
-import org.jbehave.core.parsers.StepMatcher
-import org.jbehave.core.parsers.StepPatternParser
-import org.jbehave.core.reporters.StepdocReporter
-import org.jbehave.core.steps.StepType
-import org.jbehave.core.steps.Stepdoc
-
-import javax.ws.rs.core.MediaType
-import javax.xml.bind.annotation.XmlAccessType
-import javax.xml.bind.annotation.XmlAccessorType
-import javax.xml.bind.annotation.XmlRootElement
-import java.lang.annotation.Annotation
-import java.lang.reflect.Field
-import java.lang.reflect.Method
-import java.lang.reflect.ParameterizedType
-import java.lang.reflect.Type
-import java.util.regex.Matcher
-import java.util.regex.Pattern
-/**
- * @author Maryna Stasyuk
- */
-public class GroovyStepDocReporter implements StepdocReporter {
-
-    private final String reportStepDocUrl;
-
-    private final StepPatternParser patternParser;
-
-    public GroovyStepDocReporter(String jiraBaseUrl, String jiraProject, String jiraUserName, String jiraPassword) {
-        this(jiraBaseUrl, jiraProject, jiraUserName, jiraPassword, new RegexPrefixCapturingPatternParser());
-    }
-
-    public GroovyStepDocReporter(String jiraBaseUrl, String jiraProject, String jiraUserName, String jiraPassword, StepPatternParser stepPatternParser) {
-        this.reportStepDocUrl = jiraBaseUrl + "/rest/story-res/1.0/step-doc/add/" + jiraProject
-                + "?os_username=" + jiraUserName
-                + "&os_password=" + jiraPassword;
-        this.patternParser = stepPatternParser;
-    }
-
-    @Override
-    public void stepdocs(List<Stepdoc> stepdocs, List<Object> stepsInstances) {
-
-        List<StepDocDTO> stepDocDTOs = new ArrayList<StepDocDTO>(stepdocs.size());
-
-        for (Stepdoc stepdoc : stepdocs) {
-
-            StepDocDTO stepDocDTO = new StepDocDTO();
-
-            String pattern = stepdoc.getPattern();
-            stepDocDTO.pattern = pattern;
-
-            StepType stepType = stepdoc.getStepType();
-
-            String startingWord = stepdoc.getStartingWord();
-            stepDocDTO.startingWord = startingWord;
-
-            Object stepsInstance = stepdoc.getStepsInstance();
-            Class<?> stepsClass = stepsInstance.getClass();
-            String stepClassName = stepsClass.getName();
-            stepDocDTO.stepClassName = stepClassName;
-
-            String methodSignature = stepdoc.getMethodSignature();
-            stepDocDTO.stepMethodSignature = methodSignature;
-
-            StepMatcher stepMatcher = patternParser.parseStep(stepType, pattern);
-            StepPattern stepPattern = stepMatcher.pattern();
-            String resolvedPattern = stepPattern.resolved();
-            stepDocDTO.resolvedPattern = resolvedPattern;
-            setGroupedPatternOnStepDoc(stepDocDTO);
-
-            Method method = stepdoc.getMethod();
-            Type[] genericParameterTypes = method.getGenericParameterTypes();
-            List<ParameterInfo> parameterInfos = new ArrayList<ParameterInfo>(genericParameterTypes.length);
-
-            for (Type genericParameterType : genericParameterTypes) {
-                ParameterInfo parameterInfo = new ParameterInfo();
-                if (genericParameterType instanceof ParameterizedType) {
-                    ParameterizedType parameterizedType = (ParameterizedType) genericParameterType;
-                    Class<?> rawType = (Class<?>) parameterizedType.getRawType();
-                    if (rawType.getName().equals(List.class.getName())) {
-                        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
-                        if (actualTypeArguments.length == 1) {
-                            Type actualTypeArgument = actualTypeArguments[0];
-                            if (actualTypeArgument instanceof Class<?>) {
-                                Class<?> classType = (Class<?>) actualTypeArgument;
-                                populateParameterInfo(parameterInfo, classType);
-                                parameterInfo.isListType = true;
-                            }
-                        } else {
-                            // if there are more type arguments, we ignore such cases
-                        }
-                    } else {
-                        // we ignore any other generic parameter types
-                    }
-                } else if (genericParameterType instanceof Class) {
-                    Class classType = (Class) genericParameterType;
-                    populateParameterInfo(parameterInfo, classType);
-                } else {
-                    // we do not provide any meta information in this case
-                }
-                parameterInfos.add(parameterInfo);
-            }
-            stepDocDTO.parameterInfos = parameterInfos;
-
-            if (parameterInfos.size() != stepDocDTO.parameterGroups.size()) {
-                throw new IllegalStateException("Number of resolved parameters doesn't match number of gather parameter infos");
-            }
-
-            List<Integer> parameterGroups = stepDocDTO.parameterGroups;
-            if (!parameterGroups.isEmpty()) {
-
-                // set parameter boundaries in pattern
-                String groupedRegExpPattern = stepDocDTO.groupedRegExpPattern;
-                Validate.notNull(groupedRegExpPattern);
-                Pattern groupedPattern = Pattern.compile(groupedRegExpPattern, Pattern.DOTALL);
-                Matcher matcher = groupedPattern.matcher(stepdoc.getPattern());
-                boolean matches = matcher.matches();
-                Validate.isTrue(matches, "Error - pattern should have matched");
-                List<Integer> parameterBoundaries = new ArrayList<Integer>(parameterGroups.size() * 2);
-                for (Integer parameterGroup : parameterGroups) {
-                    int groupStart = matcher.start(parameterGroup);
-                    parameterBoundaries.add(groupStart);
-                    int groupEnd = matcher.end(parameterGroup);
-                    parameterBoundaries.add(groupEnd);
-                }
-                stepDocDTO.paramBoundInPattern = parameterBoundaries;
-
-                // set extended pattern
-                int totalGroups = matcher.groupCount();
-                StringBuilder sb = new StringBuilder();
-                int paramGroupIndex = 0;
-                for (int i = 0; i < totalGroups; i++) {
-                    int groupNumber = i + 1;
-                    String groupText = matcher.group(groupNumber);
-                    if (parameterGroups.contains(groupNumber)) {
-                        // group is a parameter, check its parameter info
-                        ParameterInfo parameterInfo = parameterInfos.get(paramGroupIndex);
-                        Validate.notNull(parameterInfo);
-                        List<TabularFieldInfo> tabularFieldInfos = parameterInfo.tabularFieldInfos;
-                        if (tabularFieldInfos != null && !tabularFieldInfos.isEmpty()) {
-                            // replace the parameter name with parameter field names in tabular format
-                            int totalPipes = 0;
-                            sb.append("\n");
-                            sb.append("|");
-                            totalPipes++;
-                            for (TabularFieldInfo tabularFieldInfo : tabularFieldInfos) {
-                                sb.append(tabularFieldInfo.fieldName);
-                                sb.append("|");
-                                totalPipes++;
-                            }
-                            sb.append("\n");
-                            // we add another line which contains same number of pipes as an empty values row, ready for user to fil in
-                            for (int j = 0; j < totalPipes; j++) {
-                                sb.append("|");
-                            }
-                            sb.append("\n");
-                        } else {
-                            sb.append(groupText);
-                        }
-                        paramGroupIndex++;
-                    } else {
-                        sb.append(groupText);
-                    }
-                }
-                String extendedPattern = sb.toString();
-                stepDocDTO.extendedPattern = extendedPattern;
-
-                // set extended pattern parameter boundaries
-                matcher = groupedPattern.matcher(extendedPattern);
-                matches = matcher.matches();
-                Validate.isTrue(matches, "Error - extended pattern should have matched");
-                List<Integer> extendedParameterBoundaries = new ArrayList<Integer>(parameterGroups.size() * 2);
-                for (Integer parameterGroup : parameterGroups) {
-                    int groupStart = matcher.start(parameterGroup);
-                    extendedParameterBoundaries.add(groupStart);
-                    int groupEnd = matcher.end(parameterGroup);
-                    extendedParameterBoundaries.add(groupEnd);
-                }
-                stepDocDTO.paramBoundInExtendPattern = extendedParameterBoundaries;
-
-            }
-
-            stepDocDTOs.add(stepDocDTO);
-        }
-
-        StepDocsPayload stepDocsPayload = new StepDocsPayload();
-        stepDocsPayload.stepDocs = stepDocDTOs;
-        uploadToJira(stepDocsPayload);
-    }
-
-    private void populateParameterInfo(ParameterInfo parameterInfo, Class classType) {
-
-        String parameterType = classType.getName();
-        parameterInfo.parameterType = parameterType;
-        String simpleName = classType.getSimpleName();
-        parameterInfo.simpleParameterType = simpleName;
-        Annotation asParamAnnotation = classType.getAnnotation(AsParameters.class);
-
-        if (asParamAnnotation != null) {
-
-            List<TabularFieldInfo> tabularFieldInfos = new ArrayList<TabularFieldInfo>();
-
-            // parameter can be represented as a table
-            parameterInfo.isListType = true;
-            Field[] declaredFields = classType.getDeclaredFields();
-
-            for (Field declaredField : declaredFields) {
-
-                TabularFieldInfo tabularFieldInfo = new TabularFieldInfo();
-
-                // field name
-                Parameter fieldAnnotation = declaredField.getAnnotation(Parameter.class);
-                String fieldName;
-                if (fieldAnnotation != null) {
-                    fieldName = fieldAnnotation.name();
-                } else {
-                    fieldName = declaredField.getName();
-                }
-                tabularFieldInfo.fieldName = fieldName;
-
-                // allowed field values, i.e. in case of enum
-                Class<?> fieldType = declaredField.getType();
-                Object[] enumConstants = fieldType.getEnumConstants();
-                if (enumConstants != null && enumConstants.length > 0) {
-                    List<String> allowedValues = new ArrayList<String>();
-                    Class<? extends Enum> enumFieldType = (Class<? extends Enum>) fieldType;
-                    for (Object enumConstant : enumConstants) {
-                        Enum enumField = (Enum) enumConstant;
-                        String enumName = enumField.name();
-                        allowedValues.add(enumName);
-                    }
-
-                    tabularFieldInfo.allowedValues = allowedValues;
-                }
-
-                tabularFieldInfos.add(tabularFieldInfo);
-            }
-
-            parameterInfo.tabularFieldInfos = tabularFieldInfos;
-
-        } else {
-            // not a table type, but still may be a list type
-        }
-    }
-
-    private void uploadToJira(StepDocsPayload stepDocsPayload) {
-
-        ObjectMapper mapper = new ObjectMapper();
-        String payloadAsString;
-        try {
-            payloadAsString = mapper.writeValueAsString(stepDocsPayload);
-        } catch (IOException e) {
-            throw new RuntimeException("Error occurred while trying to serialize object of type - "
-                    + StepDocsPayload.class.getName() + " to json.", e);
-        }
-
-        Client client = Client.create();
-        String response = client.resource(this.reportStepDocUrl)
-                .accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .post(String.class, payloadAsString);
-
-        if (!response.startsWith("success")) {
-            throw new RuntimeException("Failed to upload step doc! Server returned error message - " + response);
-        }
-    }
-
-    @Override
-    public void stepdocsMatching(String stepAsString, List<Stepdoc> matching, List<Object> stepsIntances) {
-        // ignored
-    }
-
-    private void setGroupedPatternOnStepDoc(StepDocDTO stepDocDTO) {
-
-        String resolvedPattern = stepDocDTO.resolvedPattern;
-        StringBuilder groupedPatternBuilder = new StringBuilder();
-        List<Integer> parameterGroups = new ArrayList<Integer>();
-
-        int pos = 0;
-        int groupCount = 0;
-        int indexOfOpenBrace = resolvedPattern.indexOf("(");
-        while (indexOfOpenBrace != -1) {
-
-            // we want to group everything before that opening brace
-            groupedPatternBuilder.append("(");
-            groupedPatternBuilder.append(resolvedPattern.substring(pos, indexOfOpenBrace));
-            groupedPatternBuilder.append(")");
-            groupCount++;
-
-            int indexOfCloseBrace = resolvedPattern.indexOf(")", indexOfOpenBrace);
-            Validate.isTrue(indexOfCloseBrace != -1);
-            pos = indexOfCloseBrace + 1;
-            groupedPatternBuilder.append(resolvedPattern.substring(indexOfOpenBrace, pos));
-            groupCount++;
-            parameterGroups.add(groupCount);
-
-            if (pos >= resolvedPattern.length()) {
-                // we have reached the end of the pattern
-                break;
-            } else {
-                indexOfOpenBrace = resolvedPattern.indexOf("(", pos);
-                if (indexOfOpenBrace != -1) {
-                    // we simply iterate again
-                    continue;
-                } else {
-                    // there are no more parameter groups so we simply append any string into last group
-                    groupedPatternBuilder.append("(");
-                    groupedPatternBuilder.append(resolvedPattern.substring(pos));
-                    groupedPatternBuilder.append(")");
-                    groupCount++;
-                }
-            }
-        }
-
-        String groupedPattern = groupedPatternBuilder.toString();
-        if (groupedPattern.isEmpty()) {
-            // reg exp pattern did not contain any groups
-            groupedPattern = "(" + resolvedPattern + ")";
-        }
-        stepDocDTO.groupedRegExpPattern = groupedPattern;
-        stepDocDTO.parameterGroups = parameterGroups;
-    }
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    private class TabularFieldInfo {
-
-        public String fieldName;
-
-        public List<String> allowedValues;
-    }
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    private class ParameterInfo {
-
-        public String parameterType;
-
-        public String simpleParameterType;
-
-        public boolean isListType;
-
-        public List<String> allowedValues;
-
-        public List<TabularFieldInfo> tabularFieldInfos;
-    }
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    private class StepDocDTO {
-
-        public String startingWord;
-
-        public String pattern;
-
-        public List<Integer> paramBoundInPattern;
-
-        public String extendedPattern;
-
-        public List<Integer> paramBoundInExtendPattern;
-
-        public String resolvedPattern;
-
-        public String groupedRegExpPattern;
-
-        public String stepClassName;
-
-        public String stepMethodSignature;
-
-        public List<Integer> parameterGroups = new ArrayList<Integer>();
-
-        public List<ParameterInfo> parameterInfos = new ArrayList<ParameterInfo>();
-    }
-
-    @XmlRootElement
-    @XmlAccessorType(XmlAccessType.FIELD)
-    private static class StepDocsPayload {
-
-        public List<StepDocDTO> stepDocs;
-    }
-}
-
-
-
-
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStoryPathsFinder.groovy
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStoryPathsFinder.groovy	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/groovy/GroovyStoryPathsFinder.groovy	(date 1409146073000)
@@ -1,91 +0,0 @@
-package groovy
-import com.sun.jersey.api.client.Client
-import com.sun.jersey.api.client.ClientResponse
-import com.sun.jersey.api.client.WebResource
-import org.apache.commons.lang.Validate
-import org.bitbucket.jbehaveforjira.javaclient.StoryPathsFinder
-import org.slf4j.Logger
-import org.slf4j.LoggerFactory
-
-import javax.ws.rs.core.MediaType
-import javax.ws.rs.core.Response
-import javax.xml.bind.annotation.XmlAccessType
-import javax.xml.bind.annotation.XmlAccessorType
-import javax.xml.bind.annotation.XmlRootElement
-/**
- * @author Maryna Stasyuk
- */
-public class GroovyStoryPathFinder implements StoryPathsFinder {
-
-    private final Logger log = LoggerFactory.getLogger(getClass());
-
-    private String jiraBaseUrl;
-
-    private String projectKey;
-
-    public GroovyStoryPathFinder(String jiraBaseUrl, String projectKey) {
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.projectKey = projectKey;
-        Validate.notEmpty(jiraBaseUrl);
-        Validate.notEmpty(projectKey);
-    }
-
-    public List<String> findPaths() {
-        return this.findPaths(Collections.EMPTY_LIST, Collections.EMPTY_LIST);
-    }
-
-    public List<String> findPaths(List<String> includes, List<String> excludes) {
-
-        List<String> paths = new ArrayList<String>();
-
-        URI jiraSearchUrl = null;
-        try {
-            String fullPath = jiraBaseUrl + "/rest/story-res/1.0/find/story-paths/" + projectKey;
-            fullPath += "?os_username=admin&os_password=admin";
-            jiraSearchUrl = new URI(fullPath);
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
-
-        Client client = Client.create();
-        WebResource res = client.resource(jiraSearchUrl);
-        res.type(MediaType.APPLICATION_JSON);
-//        res.type(MediaType.TEXT_PLAIN);
-        ClientResponse response = res.get(ClientResponse.class);
-        log.info("response - " + response);
-        if (response.getStatus() == 200) {
-
-            int length = response.getLength();
-            MediaType type = response.getType();
-            StoryPaths storyPaths = response.getEntity(StoryPaths.class);
-
-            if (storyPaths.getPaths() != null && !storyPaths.getPaths().isEmpty()) {
-                paths = storyPaths.getPaths();
-            }
-
-        } else {
-            int status = response.getStatus();
-            Response.StatusType statusInfo = response.getStatusInfo();
-            throw new RuntimeException("Error occurred while trying to find Jira story paths. " +
-                    "Response status was - " + status + ", status info - " + statusInfo);
-        }
-
-        return paths;
-    }
-
-}
-
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-class StoryPaths {
-
-    private List<String> paths;
-
-    public List<String> getPaths() {
-        return paths;
-    }
-
-    public void setPaths(List<String> paths) {
-        this.paths = paths;
-    }
-}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/contextproviders/StoryReportsPanelContextProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/contextproviders/StoryReportsPanelContextProvider.java	(date 1409146073000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/contextproviders/StoryReportsPanelContextProvider.java	(revision )
@@ -7,9 +7,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-/**
- * Created by Dmytro on 5/5/2014.
- */
 public class StoryReportsPanelContextProvider extends AbstractJiraContextProvider {
 
     @Override
