Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/PageUtils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/PageUtils.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/PageUtils.js	(revision Local version)
@@ -1,31 +0,0 @@
-function PageUtils() {
-
-    this.debugOn = false;
-
-    this.debug = function (msg) {
-        if (this.debugOn) {
-            console.log("[DEBUG StoryController] " + msg);
-        }
-    }
-
-    this.init = function () {
-
-        if (this.debugOn) {
-            console.log("initializing PageUtils");
-        }
-    }
-
-    this.getIssueKey = function () {
-        return AJS.$.trim(AJS.$("#key-val").text());
-    };
-
-
-    // Function for getting the project key of the Issue being edited.
-    this.getProjectKey = function () {
-        var issueKey = this.getIssueKey();
-        if (issueKey) {
-            return issueKey.match("[A-Z]*")[0];
-        }
-    };
-
-}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryReportModel.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryReportModel.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryReportModel.js	(revision Shelved version)
@@ -1,14 +1,14 @@
-function StoryReportModel() {
-
-    this.environment = "";
-    this.storyPath = "";
-    this.storyVersion = "";
-    this.status = "";
-    this.totalScenarios = "";
-    this.totalScenariosPassed = "";
-    this.totalScenariosFailed = "";
-    this.totalScenariosPending = "";
-    this.totalScenariosSkipped = "";
-    this.totalScenariosNotPerformed = "";
-    this.htmlReport = "";
-}
\ No newline at end of file
+//function StoryReportModel() {
+//
+//    this.environment = "";
+//    this.storyPath = "";
+//    this.storyVersion = "";
+//    this.status = "";
+//    this.totalScenarios = "";
+//    this.totalScenariosPassed = "";
+//    this.totalScenariosFailed = "";
+//    this.totalScenariosPending = "";
+//    this.totalScenariosSkipped = "";
+//    this.totalScenariosNotPerformed = "";
+//    this.htmlReport = "";
+//}
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(revision Shelved version)
@@ -25,36 +25,52 @@
 
                     lineNumber: -1,
                     stepNumber: 0,
+                    currentStepNumber: 0,
 
+                    inDescription: false,
                     allowDescription: true,
 
+                    inMeta: false,
                     allowMeta: true,
                     allowMetaField: false,
 
+                    inNarrative: false,
                     allowNarrative: true,
                     allowNarrativeInOrderTo: false,
                     allowNarrativeAsA: false,
                     allowNarrativeIWantTo: false,
 
+                    inLifecycle: false,
+                    allowLifecycle: false,
+
+                    inLifecycleBefore: false,
+                    allowLifecycleBefore: false,
+
+                    inLifecycleAfter: false,
+                    allowLifecycleAfter: false,
+
+                    inLifecycleOutcome: false,
+                    allowLifecycleOutcome: false,
+
+                    inScenario: false,
                     allowScenario: false,
+
+                    inStep: false,
                     allowSteps: false,
+                    allowAndStep: false,
 
-                    tableHeaderLine: false,
-                    inMultilineString: false,
-                    inMultilineTable: false,
+                    inExamples: false,
+                    allowExamples: false,
 
                     lastStepKeyword: null,
                     currentStepKeyword: null,
                     lastStepStartedAt: null,
-
-                    currentStepNumber: 0,
-
                     stepStartingKeyword: null,
                     stepBody: null,
 
                     lastTokenType: null,
 
-                    inStep: false
+                    current: null
 
                 };
             },
@@ -64,12 +80,13 @@
                     state.lineNumber++;
                     state.inScenarioTitleLine = false;
                     state.inNarrativeField = false;
+                    state.inLifecycleOutcome = false;
                 }
 
                 // LINE COMMENT
                 if (stream.sol() && (stream.match(/!--.*/) || stream.match(/\|--.*/))) {
 //                    state.lastTokenType =  "comment";
-                    return state.lastTokenType = "jb-story-comment";
+                    state.lastTokenType = "jb-story-comment";
 
 //                    // TABLE COMMENT
 //                } else if (stream.sol() && stream.match(/\|--.*/)) {
@@ -78,29 +95,36 @@
                     // META title
                 } else if (state.allowMeta && stream.sol() && stream.match(/(Meta):/)) {
 
+                    state.inMeta = true;
+                    state.inDescription = false;
+
                     state.allowDescription = false;
                     state.allowMeta = false;
                     state.allowMetaField = true;
-                    return state.lastTokenType = "jb-story-meta-title";
 
+                    state.lastTokenType = "jb-story-meta-title";
+
                     // META field
                 } else if (state.allowMetaField && stream.sol() && stream.match(/@.*/)) {
 
-                    return state.lastTokenType = "jb-story-meta-field";
+                    state.lastTokenType = "jb-story-meta-field";
 
                     // Narrative - title
                 } else if (state.allowNarrative && stream.sol() && stream.match(/Narrative:/)) {
 
+                    state.inDescription = false;
+                    state.inNarrative = true;
+
                     state.allowDescription = false;
                     state.allowMeta = false;
                     state.allowMetaField = false;
                     state.allowNarrative = false;
                     state.allowNarrativeInOrderTo = true;
 
-                    state.allowScenario = true;
                     state.allowSteps = false;
-                    return state.lastTokenType = "jb-story-narrative-title";
 
+                    state.lastTokenType = "jb-story-narrative-title";
+
                     // Narrative - In order to - keyword
                 } else if (state.allowNarrativeInOrderTo && stream.sol() && stream.match(/(In order to )/)) {
 
@@ -108,7 +132,7 @@
                     state.allowNarrativeAsA = true;
                     state.inNarrativeField = true;
 
-                    return state.lastTokenType = "jb-story-narrative-field-keyword";
+                    state.lastTokenType = "jb-story-narrative-field-keyword";
 
                     // Narrative - As a - keyword
                 } else if (state.allowNarrativeAsA && stream.sol() && stream.match(/(As a )/)) {
@@ -117,7 +141,7 @@
                     state.allowNarrativeIWantTo = true;
                     state.inNarrativeField = true;
 
-                    return state.lastTokenType = "jb-story-narrative-field-keyword";
+                    state.lastTokenType = "jb-story-narrative-field-keyword";
 
                     // Narrative - I want to - keyword
                 } else if (state.allowNarrativeIWantTo && stream.sol() && stream.match(/(I want to )/)) {
@@ -125,31 +149,111 @@
                     state.allowNarrativeIWantTo = false;
                     state.inNarrativeField = true;
 
-                    return state.lastTokenType = "jb-story-narrative-field-keyword";
+                    state.allowScenario = true;
+                    state.allowLifecycle = true;
 
+                    state.lastTokenType = "jb-story-narrative-field-keyword";
+
                     // Narrative - field value
                 } else if (state.inNarrativeField && stream.match(/.*/)) {
 
-                    return state.lastTokenType = "jb-story-narrative-field-value";
+                    state.lastTokenType = "jb-story-narrative-field-value";
 
+                    // Lifecycle
+                } else if (state.allowLifecycle && stream.sol() && stream.match(/Lifecycle:/)) {
+
+                    state.inLifecycle = true;
+
+                    state.allowLifecycle = false;
+                    state.allowLifecycleBefore = true;
+                    state.allowLifecycleAfter = true;
+
+                    state.lastTokenType = "jb-story-lifecycle";
+
+                    // Lifecycle - Before
+                } else if (state.allowLifecycleBefore && stream.sol() && stream.match(/Before:/)) {
+
+                    state.inStep = false;
+                    state.inLifecycleBefore = true;
+                    state.inLifecycleAfter = false;
+
+                    state.allowLifecycleBefore = false;
+                    state.allowSteps = true;
+                    state.allowAndStep = false;
+
+                    state.lastStepKeyword = null;
+                    state.currentStepKeyword = null;
+                    state.lastStepStartedAt = null;
+
+                    state.lastTokenType = "jb-story-lifecycle-before";
+
+                    // Lifecycle - After
+                } else if (state.allowLifecycleAfter && stream.sol() && stream.match(/After:/)) {
+
+                    state.inStep = false;
+                    state.inLifecycleBefore = false;
+                    state.inLifecycleAfter = true;
+
+                    state.allowLifecycleBefore = false;
+                    state.allowLifecycleAfter = false;
+                    state.allowLifecycleOutcome = true;
+
+                    state.allowSteps = false;
+                    state.allowAndStep = false;
+
+                    state.lastTokenType = "jb-story-lifecycle-after";
+
+                    // Lifecycle - Outcome keyword
+                } else if (state.allowLifecycleOutcome && stream.sol() && stream.match(/Outcome: /)) {
+
+                    state.inStep = false;
+                    state.inLifecycleOutcome = true;
+
+                    state.allowLifecycleOutcome = false;
+                    state.allowScenario = false;
+
+                    state.lastTokenType = "jb-story-lifecycle-outcome-keyword";
+
+                    // Lifecycle - Outcome value
+                } else if (state.inLifecycleOutcome && !stream.sol()
+                    && (stream.match(/ANY/) || stream.match(/SUCCESS/) || stream.match(/FAILURE/))) {
+
+                    state.allowSteps = true;
+
+                    state.lastStepKeyword = null;
+                    state.currentStepKeyword = null;
+                    state.lastStepStartedAt = null;
+
+                    state.lastTokenType = "jb-story-lifecycle-outcome-value";
+
                     // SCENARIO keyword
                 } else if (state.allowScenario && stream.sol() && stream.match(/(Scenario):/)) {
-                    state.allowSteps = true;
-                    state.allowDescription = false;
-                    state.inScenarioTitleLine = true;
 
                     state.inStep = false;
+                    state.inLifecycle = false;
+                    state.inLifecycleAfter = false;
+                    state.inScenario = true;
+                    state.inScenarioTitleLine = true;
+
+                    state.allowLifecycle = false;
+                    state.allowLifecycleBefore = false;
+                    state.allowLifecycleAfter = false;
+                    state.allowLifecycleOutcome = false;
+                    state.allowSteps = true;
                     state.allowAndStep = false;
+                    state.allowExamples = false;
+
                     state.lastStepKeyword = null;
                     state.currentStepKeyword = null;
                     state.lastStepStartedAt = null;
 
-                    return state.lastTokenType = "jb-story-scenario-keyword";
+                    state.lastTokenType = "jb-story-scenario-keyword";
 
                     // SCENARIO title
                 } else if (state.inScenarioTitleLine && !stream.sol() && stream.match(/.*/)) {
-                    return state.lastTokenType = "jb-story-scenario-title";
 
+                    state.lastTokenType = "jb-story-scenario-title";
+
                     // GIVEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(Given )/)) {
 
@@ -159,7 +263,18 @@
                     state.currentStepKeyword = "Given";
 
                     state.stepStartingKeyword = "Given "; //TODO
+
+                    if (state.inLifecycleAfter) {
+                        state.allowSteps = false;
+                        state.allowAndStep = false;
+                        state.inLifecycleOutcome = false;
+                        state.allowLifecycleOutcome = true;
+                        state.allowScenario = true;
+                    } else {
-                    state.allowAndStep = true;
+                        state.allowAndStep = true;
+                    }
+
+
                     state.inStep = true;
                     state.stepNumber++;
                     state.stepBody = "";
@@ -170,18 +285,26 @@
 
                     state.currentStepNumber++;
 
-                    var doc = storyController.editor.getDoc();
+                    state.allowExamples = true;
 
-                    doc.getLineHandle(state.lineNumber);
+                    state.lastTokenType = "jb-story-step-keyword given-step";
 
-                    return state.lastTokenType = "jb-story-step-keyword given-step";
-
                     // WHEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(When )/)) {
 
                     state.inStep = true;
+
+                    if (state.inLifecycleAfter) {
+                        state.allowSteps = false;
+                        state.allowAndStep = false;
+                        state.inLifecycleOutcome = false;
+                        state.allowLifecycleOutcome = true;
+                        state.allowScenario = true;
+                    } else {
-                    state.allowAndStep = true;
+                        state.allowAndStep = true;
+                    }
 
+
                     if (state.currentStepKeyword != null) {
                         state.lastStepKeyword = state.currentStepKeyword;
                     }
@@ -197,8 +320,10 @@
 
                     state.currentStepNumber++;
 
-                    return state.lastTokenType = "jb-story-step-keyword when-step";
+                    state.allowExamples = true;
 
+                    state.lastTokenType = "jb-story-step-keyword when-step";
+
                     // THEN
                 } else if (state.allowSteps && stream.sol() && stream.match(/(Then )/)) {
 
@@ -209,7 +334,18 @@
 
                     state.stepStartingKeyword = "Then "; //TODO
 
+                    if (state.inLifecycleAfter) {
+                        state.allowSteps = false;
+                        state.allowAndStep = false;
+                        state.inLifecycleOutcome = false;
+                        state.allowLifecycleOutcome = true;
+                        state.allowScenario = true;
+                    } else {
-                    state.allowAndStep = true;
+                        state.allowAndStep = true;
+                    }
+
+                    state.allowExamples = true;
+
                     state.inStep = true;
                     state.stepNumber++;
                     state.stepBody = "";
@@ -220,11 +356,21 @@
 
                     state.currentStepNumber++;
 
-                    return state.lastTokenType = "jb-story-step-keyword then-step";
+                    state.lastTokenType = "jb-story-step-keyword then-step";
 
                     // AND
                 } else if (state.allowAndStep && stream.sol() && stream.match(/(And )/)) {
+
+                    if (state.inLifecycleAfter) {
+                        state.allowSteps = false;
+                        state.allowAndStep = false;
+                        state.inLifecycleOutcome = false;
+                        state.allowLifecycleOutcome = true;
+                        state.allowScenario = true;
+                    }
+
                     state.inStep = true;
+
                     state.stepNumber++;
                     state.stepBody = "";
                     state.lastStepStartedAt = state.lineNumber;
@@ -240,12 +386,25 @@
 
                     state.currentStepNumber++;
 
-                    return state.lastTokenType = "jb-story-step-keyword " + state.lastStepKeyword + "-step";
+                    state.lastTokenType = "jb-story-step-keyword " + state.lastStepKeyword + "-step";
 
+                    // Examples
+                }else if (state.allowExamples && stream.sol() && stream.match(/(Examples):/)) {
+
+                    state.inExamples = true;
+                    state.inStep = false;
+
+                    state.allowSteps = false;
+                    state.allowAndStep = false;
+                    state.allowExamples = false;
+
+                    state.lastTokenType = "jb-story-examples";
+
                     // Description
                 } else if (stream.sol() && state.allowDescription && stream.match(/(.*)/)) {
 
-                    return state.lastTokenType = "jb-story-description-line";
+                    state.inDescription = true;
+                    state.lastTokenType = "jb-story-description-line";
 
                     // Step body
                 } else if (state.inStep && stream.match(/(.*)/)) {
@@ -261,61 +420,21 @@
                     var stepBody = state.stepBody;
                     console.log("stepBody - " + stepBody);
 
-//                    // look ahead for full step body
-//                    var editor = storyController.editor;
-//                    var isCurrentStepLine = true;
-//                    var lineNumberToCheck = state.lineNumber;
-//                    var remainingStepBody = "";
-//                    while (isCurrentStepLine) {
-//                        lineToCheck++;
-//                        var lineToCheck = editor.getLineHandle(lineNumberToCheck);
-//                        if (lineToCheck == null) {
-//                            // we are at the end of the document
-//                            break;
-//                        } else {
-//                            var lineText = lineToCheck.text;
-//                            if (lineText.substr(0, "Given ".length) == "Given ") {
-//                                isCurrentStepLine = false;
-//                                break;
-//                            } else {
-//                                remainingStepBody += lineText + "\n";
-//                            }
-//                        }
-//                    }
-//
-//                    var fullStepBody = stepBody + remainingStepBody;
-//                    console.log("### fullStepBody - " + fullStepBody);
+                    state.lastTokenType = "jb-story-step-body";
 
+                    // Examples body
+                } else if (state.inExamples && stream.match(/(.*)/)) {
 
-//                    var paramStart = {line: state.lineNumber, ch: 0};
-//                    var paramEnd = {line: state.lineNumber, ch: currentLine.text.length};
-//                    var options = new Object();
-//                    options.className = "step-body-line";
-//
-//                    var marksBefore = editor.getDoc().findMarks(paramStart, paramEnd);
-//
-//                    if (marksBefore.length > 0) {
-//                        // always remove any existing marks, so that we include newly edited text in the marked range
-//                        for (var m = 0; m < marksBefore.length; m++) {
-//                            marksBefore[m].clear();
-//                        }
-//                    }
-//                    editor.getDoc().markText(paramStart, paramEnd, options);
+                    state.lastTokenType = "jb-story-examples-body";
 
-//                    editor.addLineClass({line: state.lineNumber-1, where: "wrap", "class": "step-body-line"});
-
-                    return state.lastTokenType = "jb-story-step-body"
-//                        + "line-step-line"
-//                        + " line-step-number-" + state.stepNumber
-//                        + " line-step-line-number-" + state.lineNumber
-                        ;
-
                     // Fall through
                 } else {
                     stream.match(/(.*)/);
-//                    stream.eatWhile(/[^@"<#]/);
-                    return "jb-story-invalid-token";
+                    state.lastTokenType = "jb-story-invalid-token";
                 }
+
+                state.current = stream.current();
+                return state.lastTokenType;
             }
         };
     });
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/story.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/story.css	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/story.css	(revision Shelved version)
@@ -42,6 +42,30 @@
     color: #0000cc;
 }
 
+.cm-jb-story-lifecycle {
+    color: #594300;
+    font-weight: bold;
+}
+
+.cm-jb-story-lifecycle-before {
+    color: #594300;
+    font-weight: bold;
+}
+
+.cm-jb-story-lifecycle-after {
+    color: #594300;
+    font-weight: bold;
+}
+
+.cm-jb-story-lifecycle-outcome-keyword {
+    color: #594300;
+    font-weight: bold;
+}
+
+.cm-jb-story-lifecycle-outcome-value {
+    color: #594300;
+}
+
 .cm-jb-story-scenario-keyword {
     color: green;
     font-weight: bold;
@@ -86,4 +110,32 @@
 .cm-jb-story-step-body.matched-step.step-parameter {
     font-weight: bold;
     color: purple;
+}
+
+.cm-jb-story-examples {
+    color: firebrick;
+    font-weight: bold;
+}
+
+.cm-jb-story-examples-body {
+    color: purple;
+}
+
+.savingMsgDiv {
+    display: inline;
+    border-style: solid;
+    border-width: 1px;
+    border-color: green;
+}
+
+.save-story-button-spinner {
+    /*border-style: solid;*/
+    /*border-width: 1px;*/
+    /*border-color: red;*/
+    /*float: left;*/
+    display: inline;
+}
+
+#storyMsgBar {
+    margin-bottom: 10px;
-}
+}
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryView.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryView.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryView.js	(revision Shelved version)
@@ -1,703 +1,703 @@
-function StoryView(storyController) {
-
-    this.debugOn = true;
-
-    this.autoCompleteEntries = AutoCompleteEntryModel[0];
-
-    this.storyEditHandler = new StoryEditHandler();
-    this.storyEditHandler.init();
-
-    this.debug = function (msg) {
-        if (this.debugOn) {
-            console.log("[DEBUG StoryView] " + msg);
-        }
-    }
-
-    this.init = function () {
-
-        this.debug("> StoryView.init");
-
-        // update button menu links
-        AJS.$("#add-jbehave-story-link").click(
-            function (event) {
-                event.preventDefault();
-                storyView.debug("> add-jbehave-story-link clicked");
-                storyController.addStory();
-                storyView.debug("# add-jbehave-story-link clicked");
-            }
-        );
-        AJS.$("#edit-jbehave-story-link").click(
-            function (event) {
-                event.preventDefault();
-                storyView.debug("> edit-jbehave-story-link clicked");
-                storyController.editStoryHandler();
-                storyView.debug("# edit-jbehave-story-link clicked");
-            }
-        )
-        AJS.$("#delete-jbehave-story-link").click(
-            function (event) {
-                event.preventDefault();
-                storyView.debug("> delete-jbehave-story-link clicked");
-                storyController.deleteStory();
-                storyView.debug("# delete-jbehave-story-link clicked");
-            }
-        );
-        AJS.$("#clear-jbehave-story-tests-link").click(
-            function (event) {
-                event.preventDefault();
-                storyView.debug("> clear-jbehave-story-tests-link clicked");
-                storyController.clearStoryTests();
-                storyView.debug("# clear-jbehave-story-tests-link clicked");
-            }
-        );
-
-        AJS.$("#story-panel").html(execspec.viewissuepage.storytoolbar.renderStoryToolbar());
-
-
-//        this.editor = null;
-
-
-//        AJS.$("#testMouseOver").mouseover(function() {
-//            storyView.debug("Mouse over event fired!");
-//        });
-
-//        YUI().use('editor-base', function (Y) {
+//function StoryView(storyController) {
 //
-//            var content = execspec.viewissuepage.showstory.renderEditStoryArea2();
-////            var extraCss = execspec.viewissuepage.editstory.renderExtraCss();
+//    this.debugOn = true;
 //
-//            var editor = new Y.EditorBase({
-//                content: content
-////                extracss: extraCss
-//            });
-//            storyView.editor = editor;
+//    this.autoCompleteEntries = AutoCompleteEntryModel[0];
 //
-//            //Add the BiDi plugin
-//            editor.plug(Y.Plugin.EditorBidi);
+//    this.storyEditHandler = new StoryEditHandler();
+//    this.storyEditHandler.init();
 //
-//            Y.mix(Y.Plugin.ExecCommand.COMMANDS, {
-//                foo: function (cmd, val) {
-//                    storyView.debug('You clicked on Foo');
-//                    var inst = this.getInstance();
-//                    inst.one('body').setStyle('backgroundColor', 'yellow');
-//                },
-//                setContent: function (cmd, val) {
-//                    storyView.debug('You clicked on setContent');
-//                    storyView.debug('cmd - ' + cmd);
-//                    storyView.debug('val - ' + val);
-//                    var inst = this.getInstance();
+//    this.debug = function (msg) {
+//        if (this.debugOn) {
+//            console.log("[DEBUG StoryView] " + msg);
+//        }
+//    }
 //
-//                    var editorNode = inst.one('.story-panel');
-//                    editorNode.setContent(val);
-////                    inst.one('#storyRichTextEditArea').html('HAHA');
+//    this.init = function () {
+//
+//        this.debug("> StoryView.init");
+//
+//        // update button menu links
+//        AJS.$("#add-jbehave-story-link").click(
+//            function (event) {
+//                event.preventDefault();
+//                storyView.debug("> add-jbehave-story-link clicked");
+//                storyController.addStory();
+//                storyView.debug("# add-jbehave-story-link clicked");
+//            }
+//        );
+//        AJS.$("#edit-jbehave-story-link").click(
+//            function (event) {
+//                event.preventDefault();
+//                storyView.debug("> edit-jbehave-story-link clicked");
+//                storyController.editStoryHandler();
+//                storyView.debug("# edit-jbehave-story-link clicked");
+//            }
+//        )
+//        AJS.$("#delete-jbehave-story-link").click(
+//            function (event) {
+//                event.preventDefault();
+//                storyView.debug("> delete-jbehave-story-link clicked");
+//                storyController.deleteStory();
+//                storyView.debug("# delete-jbehave-story-link clicked");
+//            }
+//        );
+//        AJS.$("#clear-jbehave-story-tests-link").click(
+//            function (event) {
+//                event.preventDefault();
+//                storyView.debug("> clear-jbehave-story-tests-link clicked");
+//                storyController.clearStoryTests();
+//                storyView.debug("# clear-jbehave-story-tests-link clicked");
+//            }
+//        );
+//
+//        AJS.$("#story-panel").html(execspec.viewissuepage.storytoolbar.renderStoryToolbar());
+//
+//
+////        this.editor = null;
+//
+//
+////        AJS.$("#testMouseOver").mouseover(function() {
+////            storyView.debug("Mouse over event fired!");
+////        });
+//
+////        YUI().use('editor-base', function (Y) {
+////
+////            var content = execspec.viewissuepage.showstory.renderEditStoryArea2();
+//////            var extraCss = execspec.viewissuepage.editstory.renderExtraCss();
+////
+////            var editor = new Y.EditorBase({
+////                content: content
+//////                extracss: extraCss
+////            });
+////            storyView.editor = editor;
+////
+////            //Add the BiDi plugin
+////            editor.plug(Y.Plugin.EditorBidi);
+////
+////            Y.mix(Y.Plugin.ExecCommand.COMMANDS, {
+////                foo: function (cmd, val) {
+////                    storyView.debug('You clicked on Foo');
+////                    var inst = this.getInstance();
 ////                    inst.one('body').setStyle('backgroundColor', 'yellow');
+////                },
+////                setContent: function (cmd, val) {
+////                    storyView.debug('You clicked on setContent');
+////                    storyView.debug('cmd - ' + cmd);
+////                    storyView.debug('val - ' + val);
+////                    var inst = this.getInstance();
+////
+////                    var editorNode = inst.one('.story-panel');
+////                    editorNode.setContent(val);
+//////                    inst.one('#storyRichTextEditArea').html('HAHA');
+//////                    inst.one('body').setStyle('backgroundColor', 'yellow');
+////
+//////                    AJS.$(".narrative").mouseover(function() {
+//////                        storyView.debug('mouseOver event from JQuery fired');
+//////                    });
+////
+////                    inst.one('.inOrderTo').on('mouseover', function () {
+////                        storyView.debug("mouse over fired on .inOrderTo");
+//////                        inst.one('.scenario-plus').show();
+////                        inst.one('.add-icon').show();
+////
+////                    });
+////                    inst.one('.inOrderTo').on('mouseleave', function () {
+////                        storyView.debug("mouse leave fired on .inOrderTo");
+////                        var attr = inst.one('.inOrderTo').get("contentEditable");
+////                        storyView.debug("attr - " + attr);
+////                        inst.one('.add-icon').hide();
+////                    });
+////
+////                    inst.one('.inOrderToSpan').on('focus', function () {
+////                        storyView.debug("on focus fired on .inOrderToSpan");
+////                    });
+////
+////                }
+////            });
+////
+////            Y.each(Y.Frame.DOM_EVENTS, function (v, k) {
+////                editor.on('dom:' + k, function (e) {
+////                    var tag = e.frameTarget.get('tagName').toLowerCase();
+////                    storyView.debug('Event: ' + e.type + ' on element (' + tag + ')');
+////                });
+////            });
+////
+////            //Focusing the Editor when the frame is ready..
+////            editor.on('frame:ready', function () {
+////                this.focus();
+//////                var height = AJS.$("iframe").contents().height() + 40;
+//////                storyView.debug("setting editor height to - " + height);
+//////                AJS.$("#storyEditContainer").height(height);
+////            });
+////
+////            //Rendering the Editor.
+////            editor.render('#storyEditContainer');
+////
+////        });
 //
-////                    AJS.$(".narrative").mouseover(function() {
-////                        storyView.debug('mouseOver event from JQuery fired');
+////        var storyEditArea = execspec.viewissuepage.showstory.renderEditStoryArea2();
+////        AJS.$("#storyEditContainer").html(storyEditArea);
+//
+////        {
+////            // keyboard events handling
+////            storyView.isCtrDown = false;
+////
+////            AJS.$("#story-edit-text-area").keydown(function (event) {
+////                storyView.debug("keydown, event.keyCode - " + event.keyCode);
+////                if (event.keyCode == 17) {
+////                    storyView.isCtrDown = true;
+////                }
-////                    });
+////            });
+////
+////            AJS.$("#story-edit-text-area").keyup(function (event) {
+////                storyView.debug("keyup, event.keyCode - " + event.keyCode);
+////                if (event.keyCode == 17) {
+////                    storyView.isCtrDown = false;
+////                } else if (event.keyCode == 32 /*space key*/ && storyView.isCtrDown) {
+////                    storyController.showAutoCompleteHandler();
+////                    storyView.isCtrDown = false;
+////                }
+////            });
+////        }
 //
-//                    inst.one('.inOrderTo').on('mouseover', function () {
-//                        storyView.debug("mouse over fired on .inOrderTo");
-////                        inst.one('.scenario-plus').show();
-//                        inst.one('.add-icon').show();
+//        // prepare auto complete area
+////        var storyPanelWidth = AJS.$("#story-panel").width();
+////
+////        this.autoCompleteDialog = AJS.InlineDialog(AJS.$("#story-edit-text-area"),
+////            "autoCompleteDialog",
+////            function (content, trigger, showPopup) {
+////
+////                storyView.debug("> StoryView.autoCompleteDialog.contentProvider");
+////                var autoCompleteHtml = storyView.fetchAutoCompleteContent();
+////                content
+//////                    .css({"padding-left": "10px", "padding-top": "2px", "padding-right": "10px", "padding-bottom": "2px"})
+////                    .html(autoCompleteHtml);
+////                showPopup();
+////                storyView.debug("# StoryView.autoCompleteDialog.contentProvider");
+////                return false;
+////            },
+////            {
+////                noBind: true,
+////                cacheContent: false,
+////                displayShadow: false,
+////                width: AJS.$("#story-panel").width() - 90,
+//////                width: AJS.$("#story-edit-text-area").css("width") + 75,
+////                container: AJS.$("#autoCompleteContainer1"),
+//////                arrowOffsetX: 100,
+//////                arrowOffsetY: 100,
+//////                persistent: true,
+//////                gravity: 'n',
+//////                initCallback: function () {
+////////                    alert("Hello World");
+//////                    AJS.$("#arrow-autoCompleteDialog").removeClass("aui-bottom-arrow");
+//////                },
+////                calculatePositions: function getPosition(popup, targetPosition, mousePosition, opts) {
+////                    return {
+////                        displayAbove: true,
+////                        popupCss: {
+//////                            left: mousePosition.x,
+//////                            top: mousePosition.y + 20,
+//////                            right: mousePosition.y + 100
+////                            left: 10,
+////                            top: storyView.getAutoCompleteYPos(),
+////                            right: 100
+////                        },
+////                        arrowCss: {
+////                            left: 20,
+////                            top: -16
+////                        }
+////                    }
+////                }
+////            }
+////        );
 //
-//                    });
-//                    inst.one('.inOrderTo').on('mouseleave', function () {
-//                        storyView.debug("mouse leave fired on .inOrderTo");
-//                        var attr = inst.one('.inOrderTo').get("contentEditable");
-//                        storyView.debug("attr - " + attr);
-//                        inst.one('.add-icon').hide();
-//                    });
+//        storyView.debug("# StoryView.init");
+//    }
 //
-//                    inst.one('.inOrderToSpan').on('focus', function () {
-//                        storyView.debug("on focus fired on .inOrderToSpan");
-//                    });
+//    this.showAddStory = function () {
 //
+//        storyView.debug("> showAddStory");
+//
+//        var buttonsForAddStory = execspec.viewissuepage.storytoolbar.renderButtonsForAddStory();
+//        AJS.$("#storyButtons").html(buttonsForAddStory);
+//
+//        storyView.debug("# showAddStory");
-//                }
+//    }
-//            });
 //
-//            Y.each(Y.Frame.DOM_EVENTS, function (v, k) {
-//                editor.on('dom:' + k, function (e) {
-//                    var tag = e.frameTarget.get('tagName').toLowerCase();
-//                    storyView.debug('Event: ' + e.type + ' on element (' + tag + ')');
-//                });
-//            });
+//    this.editStory = function (story) {
 //
-//            //Focusing the Editor when the frame is ready..
-//            editor.on('frame:ready', function () {
-//                this.focus();
-////                var height = AJS.$("iframe").contents().height() + 40;
-////                storyView.debug("setting editor height to - " + height);
-////                AJS.$("#storyEditContainer").height(height);
-//            });
+//        this.debug("> editStory");
 //
-//            //Rendering the Editor.
-//            editor.render('#storyEditContainer');
+//        this.debug("story:\n" + JSON.stringify(story, null, "\t"));
 //
-//        });
-
-//        var storyEditArea = execspec.viewissuepage.showstory.renderEditStoryArea2();
-//        AJS.$("#storyEditContainer").html(storyEditArea);
-
-//        {
-//            // keyboard events handling
-//            storyView.isCtrDown = false;
+////        var buttonsForStory = execspec.viewissuepage.storytoolbar.renderButtonsForStory(story);
+////        AJS.$("#storyButtons").html(buttonsForStory);
 //
-//            AJS.$("#story-edit-text-area").keydown(function (event) {
-//                storyView.debug("keydown, event.keyCode - " + event.keyCode);
-//                if (event.keyCode == 17) {
-//                    storyView.isCtrDown = true;
+//        var editContainerContent = execspec.viewissuepage.editstory.renderEditStoryContainer();
+//        AJS.$("#storyEditContainer").html(editContainerContent);
+//
+//        // set content for rich editor as well as raw editor
+//        var templateObj = new Object();
+//        templateObj.story = story;
+//        var richEditStoryContent = execspec.viewissuepage.editstory.rich.renderRichEditStoryContent(templateObj);
+//        AJS.$("#richEditStoryContainer").html(richEditStoryContent);
+//        editButtonHandler.assignRichEditorHandlers(story);
+//
+//        // set raw editor content
+//        var rawEditStoryContent = execspec.viewissuepage.editstory.rawEditorContent(templateObj);
+//        AJS.$("#rawEditStoryContainer").html(rawEditStoryContent);
+//
+//
+////        AJS.$("#richTextEditorButton").click();
+//        AJS.$("#rawTextEditorButton").click();
+//
+//        this.updateStoryTabButton("edit", null);
+//
+////        AJS.$("#editStoryButton").attr("aria-pressed", "true");
+////        AJS.$("#storyContainer").hide();
+////        AJS.$("#storyEditContainer").show();
+//
+//        CodeMirror.commands.autocomplete = function(cm) {
+////            cm.showHint({hint: CodeMirror.hint.anyword});
+//            cm.showHint({hint: CodeMirror.hint.jbehave});
-//                }
+//        }
+//        var editor = CodeMirror.fromTextArea(document.getElementById("rawStoryEditor"), {
+////            lineNumbers: true,
+//            mode: "jbehave",
+//            extraKeys: {"Ctrl-Space": "autocomplete"}
-//            });
+//        });
 //
-//            AJS.$("#story-edit-text-area").keyup(function (event) {
-//                storyView.debug("keyup, event.keyCode - " + event.keyCode);
-//                if (event.keyCode == 17) {
-//                    storyView.isCtrDown = false;
-//                } else if (event.keyCode == 32 /*space key*/ && storyView.isCtrDown) {
-//                    storyController.showAutoCompleteHandler();
-//                    storyView.isCtrDown = false;
+//        this.debug("# editStory");
-//                }
+//    }
-//            });
+//
+//
+//
+//    this.fetchAutoCompleteContent = function () {
+//
+//        storyView.debug("> StoryView.fetchAutoCompleteContent");
+//
+//        var templateObject = new Object();
+//        templateObject.entries = this.autoCompleteEntries;
+//        var autoCompleteHtml = execspec.viewissuepage.showstory.renderAutoComplete(templateObject);
+//
+////        var autoCompleteHtml = "<ul class='autoCompleteEntries'>";
+////        for (var i = 0; i < this.autoCompleteEntries.length; i++) {
+////            var entry = this.autoCompleteEntries[i];
+////            autoCompleteHtml += "<li class='autoCompleteEntry'>";
+////            autoCompleteHtml += entry.suggestion;
+////            autoCompleteHtml += "</li>";
+////        }
+////        autoCompleteHtml += "</ul>";
+//
+//        storyView.debug("autoCompleteHtml - " + autoCompleteHtml);
+//        storyView.debug("# StoryView.fetchAutoCompleteContent");
+//
+//        return autoCompleteHtml;
-//        }
+//    }
-
-        // prepare auto complete area
-//        var storyPanelWidth = AJS.$("#story-panel").width();
 //
-//        this.autoCompleteDialog = AJS.InlineDialog(AJS.$("#story-edit-text-area"),
-//            "autoCompleteDialog",
-//            function (content, trigger, showPopup) {
+//    this.getAutoCompleteYPos = function () {
 //
-//                storyView.debug("> StoryView.autoCompleteDialog.contentProvider");
-//                var autoCompleteHtml = storyView.fetchAutoCompleteContent();
-//                content
-////                    .css({"padding-left": "10px", "padding-top": "2px", "padding-right": "10px", "padding-bottom": "2px"})
-//                    .html(autoCompleteHtml);
-//                showPopup();
-//                storyView.debug("# StoryView.autoCompleteDialog.contentProvider");
-//                return false;
-//            },
-//            {
-//                noBind: true,
-//                cacheContent: false,
-//                displayShadow: false,
-//                width: AJS.$("#story-panel").width() - 90,
-////                width: AJS.$("#story-edit-text-area").css("width") + 75,
-//                container: AJS.$("#autoCompleteContainer1"),
-////                arrowOffsetX: 100,
-////                arrowOffsetY: 100,
-////                persistent: true,
-////                gravity: 'n',
-////                initCallback: function () {
-//////                    alert("Hello World");
-////                    AJS.$("#arrow-autoCompleteDialog").removeClass("aui-bottom-arrow");
-////                },
-//                calculatePositions: function getPosition(popup, targetPosition, mousePosition, opts) {
-//                    return {
-//                        displayAbove: true,
-//                        popupCss: {
-////                            left: mousePosition.x,
-////                            top: mousePosition.y + 20,
-////                            right: mousePosition.y + 100
-//                            left: 10,
-//                            top: storyView.getAutoCompleteYPos(),
-//                            right: 100
-//                        },
-//                        arrowCss: {
-//                            left: 20,
-//                            top: -16
+//        storyView.debug("> StoryView.getAutoCompleteYPos");
+//
+//        var storyInputAsString = storyView.getStoryInputAsString();
+//        var caretPosition = storyView.getStoryInputCaretPosition();
+//        storyView.debug("caretPosition - " + caretPosition);
+//        var substring = storyInputAsString.substr(0, caretPosition);
+//        storyView.debug("substring - " + substring);
+//        var lines = substring.split("\n");
+//        var lineNumber = lines.length;
+//        storyView.debug("lineNumber - " + lineNumber);
+//
+//        var scrollTop = AJS.$("#story-edit-text-area").prop("scrollTop");
+//        storyView.debug("scrollTop - " + scrollTop);
+//
+////        var position = 8; // with the arrow present
+//        var position = 2; // without the arrow present
+//        position += (lineNumber * 6) + lineNumber * (parseInt(AJS.$("#story-edit-text-area").css('font-size')));
+//        if (scrollTop != undefined && scrollTop > 0) {
+//            position = position - scrollTop;
-//                        }
+//        }
+//
+//        storyView.debug("position - " + position);
+//        storyView.debug("# StoryView.getAutoCompleteYPos");
+//
+//        return  position;
-//                    }
+//    }
+//
+//    this.getStoryInputAsString = function () {
+//
+//        storyView.debug("> StoryView.getStoryInputAsString");
+//
+//        var asString = AJS.$("#story-edit-text-area").val();
+//        storyView.debug("asString - " + asString);
+//        return asString;
+//
+//        storyView.debug("# StoryView.getStoryInputAsString");
-//                }
+//    }
+//
+//    this.getStoryInputCaretPosition = function () {
+//        var caretPos = AJS.$("#story-edit-text-area").caret();
+//        return caretPos;
-//            }
+//    }
+//
+//    this.updateSelectedButton = function (clickedElementId) {
+//        storyView.debug("> StoryView.updateSelectedButton");
+//        AJS.$(".story-container-button").removeClass("selected-story-container-button");
+//        AJS.$("#" + clickedElementId).addClass("selected-story-container-button");
+//        storyView.debug("# StoryView.updateSelectedButton");
+//    }
+//
+//    this.removeStory = function () {
+//        AJS.$("#storyButtons").html("");
+//        AJS.$("#storyReportButtons").html("");
+//        AJS.$("#storyViewContainer").html("");
+//    }
+//
+//    this.showStoryButton = function (story) {
+//
+//        storyView.debug("> StoryView.showStoryButton");
+//
+//        // add the story button link
+//        var storyButtonHtml = execspec.viewissuepage.showstory.renderStoryButton(story);
+//        AJS.$("#storyButtons").html(storyButtonHtml);
+//        // set story button onClick handler
+//        AJS.$("#show-story-button").click(
+//            function (event) {
+//                event.preventDefault();
+//                storyController.showStoryHandler();
+//            }
 //        );
-
-        storyView.debug("# StoryView.init");
-    }
-
-    this.showAddStory = function () {
-
-        storyView.debug("> showAddStory");
-
-        var buttonsForAddStory = execspec.viewissuepage.storytoolbar.renderButtonsForAddStory();
-        AJS.$("#storyButtons").html(buttonsForAddStory);
-
-        storyView.debug("# showAddStory");
-    }
-
-    this.editStory = function (story) {
-
-        this.debug("> editStory");
-
-        this.debug("story:\n" + JSON.stringify(story, null, "\t"));
-
-//        var buttonsForStory = execspec.viewissuepage.storytoolbar.renderButtonsForStory(story);
-//        AJS.$("#storyButtons").html(buttonsForStory);
-
-        var editContainerContent = execspec.viewissuepage.editstory.renderEditStoryContainer();
-        AJS.$("#storyEditContainer").html(editContainerContent);
-
-        // set content for rich editor as well as raw editor
-        var templateObj = new Object();
-        templateObj.story = story;
-        var richEditStoryContent = execspec.viewissuepage.editstory.rich.renderRichEditStoryContent(templateObj);
-        AJS.$("#richEditStoryContainer").html(richEditStoryContent);
-        editButtonHandler.assignRichEditorHandlers(story);
-
-        // set raw editor content
-        var rawEditStoryContent = execspec.viewissuepage.editstory.rawEditorContent(templateObj);
-        AJS.$("#rawEditStoryContainer").html(rawEditStoryContent);
-
-
-//        AJS.$("#richTextEditorButton").click();
-        AJS.$("#rawTextEditorButton").click();
-
-        this.updateStoryTabButton("edit", null);
-
-//        AJS.$("#editStoryButton").attr("aria-pressed", "true");
-//        AJS.$("#storyContainer").hide();
-//        AJS.$("#storyEditContainer").show();
-
-        CodeMirror.commands.autocomplete = function(cm) {
-//            cm.showHint({hint: CodeMirror.hint.anyword});
-            cm.showHint({hint: CodeMirror.hint.jbehave});
-        }
-        var editor = CodeMirror.fromTextArea(document.getElementById("rawStoryEditor"), {
-//            lineNumbers: true,
-            mode: "jbehave",
-            extraKeys: {"Ctrl-Space": "autocomplete"}
-        });
-
-        this.debug("# editStory");
-    }
-
-
-
-    this.fetchAutoCompleteContent = function () {
-
-        storyView.debug("> StoryView.fetchAutoCompleteContent");
-
-        var templateObject = new Object();
-        templateObject.entries = this.autoCompleteEntries;
-        var autoCompleteHtml = execspec.viewissuepage.showstory.renderAutoComplete(templateObject);
-
-//        var autoCompleteHtml = "<ul class='autoCompleteEntries'>";
-//        for (var i = 0; i < this.autoCompleteEntries.length; i++) {
-//            var entry = this.autoCompleteEntries[i];
-//            autoCompleteHtml += "<li class='autoCompleteEntry'>";
-//            autoCompleteHtml += entry.suggestion;
-//            autoCompleteHtml += "</li>";
+//
+//        storyView.debug("# StoryView.showStoryButton");
-//        }
+//    }
-//        autoCompleteHtml += "</ul>";
-
-        storyView.debug("autoCompleteHtml - " + autoCompleteHtml);
-        storyView.debug("# StoryView.fetchAutoCompleteContent");
-
-        return autoCompleteHtml;
-    }
-
-    this.getAutoCompleteYPos = function () {
-
-        storyView.debug("> StoryView.getAutoCompleteYPos");
-
-        var storyInputAsString = storyView.getStoryInputAsString();
-        var caretPosition = storyView.getStoryInputCaretPosition();
-        storyView.debug("caretPosition - " + caretPosition);
-        var substring = storyInputAsString.substr(0, caretPosition);
-        storyView.debug("substring - " + substring);
-        var lines = substring.split("\n");
-        var lineNumber = lines.length;
-        storyView.debug("lineNumber - " + lineNumber);
-
-        var scrollTop = AJS.$("#story-edit-text-area").prop("scrollTop");
-        storyView.debug("scrollTop - " + scrollTop);
-
-//        var position = 8; // with the arrow present
-        var position = 2; // without the arrow present
-        position += (lineNumber * 6) + lineNumber * (parseInt(AJS.$("#story-edit-text-area").css('font-size')));
-        if (scrollTop != undefined && scrollTop > 0) {
-            position = position - scrollTop;
-        }
-
-        storyView.debug("position - " + position);
-        storyView.debug("# StoryView.getAutoCompleteYPos");
-
-        return  position;
-    }
-
-    this.getStoryInputAsString = function () {
-
-        storyView.debug("> StoryView.getStoryInputAsString");
-
-        var asString = AJS.$("#story-edit-text-area").val();
-        storyView.debug("asString - " + asString);
-        return asString;
-
-        storyView.debug("# StoryView.getStoryInputAsString");
-    }
-
-    this.getStoryInputCaretPosition = function () {
-        var caretPos = AJS.$("#story-edit-text-area").caret();
-        return caretPos;
-    }
-
-    this.updateSelectedButton = function (clickedElementId) {
-        storyView.debug("> StoryView.updateSelectedButton");
-        AJS.$(".story-container-button").removeClass("selected-story-container-button");
-        AJS.$("#" + clickedElementId).addClass("selected-story-container-button");
-        storyView.debug("# StoryView.updateSelectedButton");
-    }
-
-    this.removeStory = function () {
-        AJS.$("#storyButtons").html("");
-        AJS.$("#storyReportButtons").html("");
-        AJS.$("#storyViewContainer").html("");
-    }
-
-    this.showStoryButton = function (story) {
-
-        storyView.debug("> StoryView.showStoryButton");
-
-        // add the story button link
-        var storyButtonHtml = execspec.viewissuepage.showstory.renderStoryButton(story);
-        AJS.$("#storyButtons").html(storyButtonHtml);
-        // set story button onClick handler
-        AJS.$("#show-story-button").click(
-            function (event) {
-                event.preventDefault();
-                storyController.showStoryHandler();
-            }
-        );
-
-        storyView.debug("# StoryView.showStoryButton");
-    }
-
-    this.showStoryButtons = function(storyPayload) {
-
-        storyView.debug("> showStoryButtons");
-
-        var buttonsForStory = execspec.viewissuepage.storytoolbar.renderButtonsForStory(storyPayload);
-        AJS.$("#storyButtons").html(buttonsForStory);
-
-        var buttonsForTestReports = execspec.viewissuepage.storytoolbar.renderButtonsForTestReports(storyPayload);
-        AJS.$("#storyTestReportButtons").html(buttonsForTestReports);
-
-        storyView.debug("# showStoryButtons");
-    }
-
-//    this.showStoryReportButtons = function (story) {
 //
-//        storyView.debug("> showStoryReportButtons");
+//    this.showStoryButtons = function(storyPayload) {
 //
-//        var buttonsForTestReports = execspec.viewissuepage.storytoolbar.renderButtonsForTestReports(story);
+//        storyView.debug("> showStoryButtons");
+//
+//        var buttonsForStory = execspec.viewissuepage.storytoolbar.renderButtonsForStory(storyPayload);
+//        AJS.$("#storyButtons").html(buttonsForStory);
+//
+//        var buttonsForTestReports = execspec.viewissuepage.storytoolbar.renderButtonsForTestReports(storyPayload);
 //        AJS.$("#storyTestReportButtons").html(buttonsForTestReports);
 //
-//        storyView.debug("# showStoryReportButtons");
+//        storyView.debug("# showStoryButtons");
+//    }
 //
+////    this.showStoryReportButtons = function (story) {
+////
+////        storyView.debug("> showStoryReportButtons");
+////
+////        var buttonsForTestReports = execspec.viewissuepage.storytoolbar.renderButtonsForTestReports(story);
+////        AJS.$("#storyTestReportButtons").html(buttonsForTestReports);
+////
+////        storyView.debug("# showStoryReportButtons");
+////
+////    }
+//
+//    this.showStoryReport = function (storyReport, currentStoryVersion) {
+//
+//        storyView.debug("> showStoryReport");
+//        storyView.debug("currentStoryVersion - " + currentStoryVersion);
+//        storyView.debug("storyReport:\n" + JSON.stringify(storyReport, null, "\t"));
+//
+//        var templateObj = new Object();
+//        templateObj.storyReport = storyReport;
+//        templateObj.storyVersion = currentStoryVersion;
+//        var reportHtml = execspec.viewissuepage.showstoryreports.renderStoryReport(templateObj);
+//        AJS.$("#storyReportContainer").html(reportHtml);
+//
+//        this.updateStoryTabButton("report", storyReport.environment);
+//
+//        storyView.debug("# showStoryReport");
 //    }
-
-    this.showStoryReport = function (storyReport, currentStoryVersion) {
-
-        storyView.debug("> showStoryReport");
-        storyView.debug("currentStoryVersion - " + currentStoryVersion);
-        storyView.debug("storyReport:\n" + JSON.stringify(storyReport, null, "\t"));
-
-        var templateObj = new Object();
-        templateObj.storyReport = storyReport;
-        templateObj.storyVersion = currentStoryVersion;
-        var reportHtml = execspec.viewissuepage.showstoryreports.renderStoryReport(templateObj);
-        AJS.$("#storyReportContainer").html(reportHtml);
-
-        this.updateStoryTabButton("report", storyReport.environment);
-
-        storyView.debug("# showStoryReport");
-    }
-
-    this.showStory = function (story) {
-
-        storyView.debug("> showStory");
-
-        var templateObj = new Object();
-        templateObj.story = story;
-        var storyHtml = execspec.viewissuepage.showstory.renderStoryAsString(templateObj);
-
-        AJS.$("#storyContainer").html(storyHtml);
-
-        this.updateStoryTabButton("view", null);
-
-        storyView.debug("# showStory");
-    }
-
-    this.updateStoryTabButton = function (mode, reportForEnv) {
-
-        if (mode == "view") {
-
-            AJS.$(".story-report-button").attr("aria-pressed", "false");
-            AJS.$("#storyReportContainer").hide();
-
-            AJS.$("#editStoryButton").attr("aria-pressed", "false");
-            AJS.$("#storyEditContainer").hide();
-
-            AJS.$("#showStoryButton").attr("aria-pressed", "true");
-            AJS.$("#storyContainer").show();
-
-        } else if (mode == "edit") {
-
-            AJS.$(".story-report-button").attr("aria-pressed", "false");
-            AJS.$("#storyReportContainer").hide();
-
-            AJS.$("#editStoryButton").attr("aria-pressed", "true");
-            AJS.$("#storyEditContainer").show();
-
-            AJS.$("#showStoryButton").attr("aria-pressed", "false");
-            AJS.$("#storyContainer").hide();
-
-        } else if (mode == "report") {
-
-            AJS.$("#editStoryButton").attr("aria-pressed", "false");
-            AJS.$("#storyEditContainer").hide();
-
-            AJS.$("#showStoryButton").attr("aria-pressed", "false");
-            AJS.$("#storyContainer").hide();
-
-            AJS.$(".story-report-button").each(
-                function (index, element) {
-                    var buttonReportEnv = AJS.$(element).attr("environment");
-                    if (buttonReportEnv == reportForEnv) {
-                        AJS.$(element).attr("aria-pressed", "true");
-                    } else {
-                        AJS.$(element).attr("aria-pressed", "false");
-                    }
-                }
-            );
-//            AJS.$(".story-report-button").attr("aria-pressed", "false");
-
-            AJS.$("#storyReportContainer").show();
-
-        } else {
-            console.error("Unsupported mode - " + mode);
-        }
-    }
-
-//    this.showStory = function (story, editMode) {
 //
-//        storyView.debug("> StoryView.showStory");
-//        storyView.debug("story.asString - " + story.asString);
-//        storyView.debug("editMode - " + editMode);
+//    this.showStory = function (story) {
 //
-//        if (editMode != undefined && editMode == true) {
+//        storyView.debug("> showStory");
 //
-//            var lines = story.asString.split("\n");
-//            var lineCount = lines.length;
-//            var storyAsString = story.asString;
-//            var storyAsHTML = story.asHTML;
+//        var templateObj = new Object();
+//        templateObj.story = story;
+//        var storyHtml = execspec.viewissuepage.showstory.renderStoryAsString(templateObj);
 //
-//            // hide story and story reports view
-//            AJS.$("#storyContainer").hide();
+//        AJS.$("#storyContainer").html(storyHtml);
+//
+//        this.updateStoryTabButton("view", null);
+//
+//        storyView.debug("# showStory");
+//    }
+//
+//    this.updateStoryTabButton = function (mode, reportForEnv) {
+//
+//        if (mode == "view") {
+//
+//            AJS.$(".story-report-button").attr("aria-pressed", "false");
 //            AJS.$("#storyReportContainer").hide();
 //
-//            // show edit area
-////            AJS.$("#story-edit-text-area").val(storyAsString);
-////            AJS.$("#story-edit-text-area").attr("rows", lineCount);
+//            AJS.$("#editStoryButton").attr("aria-pressed", "false");
+//            AJS.$("#storyEditContainer").hide();
 //
+//            AJS.$("#showStoryButton").attr("aria-pressed", "true");
+//            AJS.$("#storyContainer").show();
 //
-////            AJS.$("#storyRichTextEditArea").html(storyAsString);
-////            var editorContainer = this.editor.one('storyRichTextEditArea');
-////            editorContainer.html(storyAsString);
-//            this.editor.execCommand("setContent", storyAsHTML);
+//        } else if (mode == "edit") {
 //
-//            var height = AJS.$("iframe").contents().height() + 40;
-//            storyView.debug("setting editor height to - " + height);
-//            AJS.$("#storyEditContainer").height(height);
+//            AJS.$(".story-report-button").attr("aria-pressed", "false");
+//            AJS.$("#storyReportContainer").hide();
 //
+//            AJS.$("#editStoryButton").attr("aria-pressed", "true");
 //            AJS.$("#storyEditContainer").show();
 //
-//            var height = AJS.$("iframe").contents().height() + 40;
-//            storyView.debug("setting editor height to - " + height);
-//            AJS.$("#storyEditContainer").height(height);
+//            AJS.$("#showStoryButton").attr("aria-pressed", "false");
+//            AJS.$("#storyContainer").hide();
 //
-//            AJS.$("#testMouseOver").mouseover(function () {
-//                storyView.debug("Mouse over event fired on test container!");
-//            });
-
-//            AJS.$("#inOrderTo").mouseover(function() {
-//                storyView.debug("Mouse over event fired on inOrderTo!");
-//            });
-
-//            AJS.$("#story-edit-text-area").keyup(function (event) {
+//        } else if (mode == "report") {
 //
-//                storyView.debug("keyup, event.keyCode - " + event.keyCode);
-//                var caretPos = AJS.$("#story-edit-text-area").caret();
-//                storyView.debug("caretPos - " + caretPos);
+//            AJS.$("#editStoryButton").attr("aria-pressed", "false");
+//            AJS.$("#storyEditContainer").hide();
 //
+//            AJS.$("#showStoryButton").attr("aria-pressed", "false");
+//            AJS.$("#storyContainer").hide();
 //
-//                if (event.keyCode == 17) {
-//                    storyView.debug("control key pressed");
-////                    AJS.InlineDialog(AJS.$("#popupLink"), 1,
+//            AJS.$(".story-report-button").each(
+//                function (index, element) {
+//                    var buttonReportEnv = AJS.$(element).attr("environment");
+//                    if (buttonReportEnv == reportForEnv) {
+//                        AJS.$(element).attr("aria-pressed", "true");
+//                    } else {
+//                        AJS.$(element).attr("aria-pressed", "false");
+//                    }
+//                }
+//            );
+////            AJS.$(".story-report-button").attr("aria-pressed", "false");
+//
+//            AJS.$("#storyReportContainer").show();
+//
+//        } else {
+//            console.error("Unsupported mode - " + mode);
+//        }
+//    }
+//
+////    this.showStory = function (story, editMode) {
+////
+////        storyView.debug("> StoryView.showStory");
+////        storyView.debug("story.asString - " + story.asString);
+////        storyView.debug("editMode - " + editMode);
+////
+////        if (editMode != undefined && editMode == true) {
+////
+////            var lines = story.asString.split("\n");
+////            var lineCount = lines.length;
+////            var storyAsString = story.asString;
+////            var storyAsHTML = story.asHTML;
+////
+////            // hide story and story reports view
+////            AJS.$("#storyContainer").hide();
+////            AJS.$("#storyReportContainer").hide();
+////
+////            // show edit area
+//////            AJS.$("#story-edit-text-area").val(storyAsString);
+//////            AJS.$("#story-edit-text-area").attr("rows", lineCount);
+////
+////
+//////            AJS.$("#storyRichTextEditArea").html(storyAsString);
+//////            var editorContainer = this.editor.one('storyRichTextEditArea');
+//////            editorContainer.html(storyAsString);
+////            this.editor.execCommand("setContent", storyAsHTML);
+////
+////            var height = AJS.$("iframe").contents().height() + 40;
+////            storyView.debug("setting editor height to - " + height);
+////            AJS.$("#storyEditContainer").height(height);
+////
+////            AJS.$("#storyEditContainer").show();
+////
+////            var height = AJS.$("iframe").contents().height() + 40;
+////            storyView.debug("setting editor height to - " + height);
+////            AJS.$("#storyEditContainer").height(height);
+////
+////            AJS.$("#testMouseOver").mouseover(function () {
+////                storyView.debug("Mouse over event fired on test container!");
+////            });
+//
+////            AJS.$("#inOrderTo").mouseover(function() {
+////                storyView.debug("Mouse over event fired on inOrderTo!");
+////            });
+//
+////            AJS.$("#story-edit-text-area").keyup(function (event) {
+////
+////                storyView.debug("keyup, event.keyCode - " + event.keyCode);
+////                var caretPos = AJS.$("#story-edit-text-area").caret();
+////                storyView.debug("caretPos - " + caretPos);
+////
+////
+////                if (event.keyCode == 17) {
+////                    storyView.debug("control key pressed");
+//////                    AJS.InlineDialog(AJS.$("#popupLink"), 1,
+//////                        function(content, trigger, showPopup) {
+//////                            content.css({"padding":"20px"}).html('<h2>Inline dialog</h2><p>The inline dialog is a wrapper for secondary content/controls to be displayed on user request. Consider this component as displayed in context to the triggering control with the dialog overlaying the page content.</p><button class="aui-button">Done</button></form>');
+//////                            showPopup();
+//////                            return false;
+//////                        }
+//////                    );
+////                    var dialog = AJS.InlineDialog(AJS.$("#story-edit-text-area"),
+////                        "myDialog",
-////                        function(content, trigger, showPopup) {
+////                        function (content, trigger, showPopup) {
-////                            content.css({"padding":"20px"}).html('<h2>Inline dialog</h2><p>The inline dialog is a wrapper for secondary content/controls to be displayed on user request. Consider this component as displayed in context to the triggering control with the dialog overlaying the page content.</p><button class="aui-button">Done</button></form>');
+////                            content.css({"padding": "20px"}).html('<h2>Inline dialog</h2><p>Content.</p>');
 ////                            showPopup();
 ////                            return false;
+////                        },
+////                        {
+////                            noBind: true
 ////                        }
 ////                    );
-//                    var dialog = AJS.InlineDialog(AJS.$("#story-edit-text-area"),
-//                        "myDialog",
-//                        function (content, trigger, showPopup) {
-//                            content.css({"padding": "20px"}).html('<h2>Inline dialog</h2><p>Content.</p>');
-//                            showPopup();
-//                            return false;
-//                        },
-//                        {
-//                            noBind: true
-//                        }
-//                    );
-//                    dialog.show();
+////                    dialog.show();
+////
+////                }
+////
+//////                var newY = AJS.$("#story-edit-text-area").textAreaHelper('caretPos').top
+//////                    + (parseInt(AJS.$("#story-edit-text-area").css('font-size'), 10) * 1.5);
+//////                var newX = AJS.$("#story-edit-text-area").textAreaHelper('caretPos').left;
+//////                var posString = "left+" + newX + "px top+" + newY + "px";
+//////                storyView.debug("posString - " + posString);
+//////                AJS.$("#story-edit-text-area").autocomplete("option", "position", {
+//////                    my: "left top",
+//////                    at: posString
+//////                });
+////            });
 //
-//                }
+//    // add the auto complete
+////            AJS.$("#story-edit-text-area").autocomplete({
+////                autoFocus: true,
+////                position: {
+////                    my: "left top",
+////                    at: "left+100px top+100px"
+////                },
+////                source: [ "c++", "java", "php", "coldfusion", "javascript", "asp", "ruby" ]
+////            });
 //
-////                var newY = AJS.$("#story-edit-text-area").textAreaHelper('caretPos').top
-////                    + (parseInt(AJS.$("#story-edit-text-area").css('font-size'), 10) * 1.5);
-////                var newX = AJS.$("#story-edit-text-area").textAreaHelper('caretPos').left;
-////                var posString = "left+" + newX + "px top+" + newY + "px";
-////                storyView.debug("posString - " + posString);
-////                AJS.$("#story-edit-text-area").autocomplete("option", "position", {
+////            AJS.$("#story-edit-text-area").autocomplete("option", "position", {
-////                    my: "left top",
+////                my: "left top",
-////                    at: posString
+////                at: "left+" + 100 + "px top+" + 100 + "px"
-////                });
+////            });
-//            });
-
-    // add the auto complete
-//            AJS.$("#story-edit-text-area").autocomplete({
-//                autoFocus: true,
-//                position: {
-//                    my: "left top",
-//                    at: "left+100px top+100px"
-//                },
-//                source: [ "c++", "java", "php", "coldfusion", "javascript", "asp", "ruby" ]
-//            });
-
-//            AJS.$("#story-edit-text-area").autocomplete("option", "position", {
-//                my: "left top",
-//                at: "left+" + 100 + "px top+" + 100 + "px"
-//            });
-
-//        } else {
 //
-//            AJS.$("#storyReportContainer").hide();
-//            AJS.$("#storyEditContainer").hide();
+////        } else {
+////
+////            AJS.$("#storyReportContainer").hide();
+////            AJS.$("#storyEditContainer").hide();
+////
+//////            AJS.$("#storyContainer").html(story.asHTML);
+////            var templateObject = new Object();
+////            templateObject.story = story;
+////            templateObject.story.asJson = JSON.stringify(story);
+////            var editStoryContent = execspec.viewissuepage.editstory.renderEditStory(templateObject);
+////            AJS.$("#storyContainer").html(editStoryContent);
+////
+////            AJS.$("#storyContainer").show();
+////
+////            AJS.$(".beforeNarrative").mouseover(function () {
+////                storyView.debug("mouse over on - beforeNarrative")
+////                AJS.$(".beforeNarrativeHint").show();
+////            });
+////
+////            AJS.$(".beforeNarrative").mouseout(function () {
+////                storyView.debug("mouse out on - beforeNarrative")
+////                AJS.$(".beforeNarrativeHint").hide();
+////            });
+////
+////        }
+////
+////        this.updateSelectedButton("show-story-button");
+////
+////        storyView.debug("# StoryView.showStory");
+////    }
 //
-////            AJS.$("#storyContainer").html(story.asHTML);
-//            var templateObject = new Object();
-//            templateObject.story = story;
-//            templateObject.story.asJson = JSON.stringify(story);
-//            var editStoryContent = execspec.viewissuepage.editstory.renderEditStory(templateObject);
-//            AJS.$("#storyContainer").html(editStoryContent);
+////    this.showStoryReportButtons = function (story) {
+////
+////        storyView.debug("> StoryView.showStoryReportButtons");
+////
+////        var storyVersion = story.version;
+////        storyView.debug("storyVersion - " + storyVersion);
+////
+////        // add the story reports
+////        var storyReportButtons = execspec.viewissuepage.showstory.renderStoryReportButtons(story);
+////        AJS.$("#storyReportButtons").html(storyReportButtons);
+////        // set the story report button onClick handlers
+////        var storyReports = story.storyReports;
+////        for (var i = 0; i < storyReports.length; i++) {
+////            var storyReport = storyReports[i];
+////            var linkId = "show-story-report-" + storyReport.environment;
+////            AJS.$("#" + linkId).click(
+////                function (event) {
+////
+////                    storyView.debug("> show story report button clicked");
+////                    event.preventDefault();
+////
+////                    var attributes = event.target.attributes;
+////                    var environmentNode = attributes["environment"];
+////                    var environment = environmentNode.nodeValue;
+////                    storyController.showStoryReport(environment);
+////
+////                    storyView.debug("# show story report button clicked");
+////                }
+////            );
+////        }
+////
+////        storyView.debug("# StoryView.showStoryReportButtons");
+////    }
 //
-//            AJS.$("#storyContainer").show();
+////    this.showStoryReport = function (storyReport, storyVersion) {
+////
+////        storyView.debug("> StoryView.showStoryReport");
+////        storyView.debug("storyReport.environment - " + storyReport.environment);
+////
+////        var reportToShowTemplateModel = new Object();
+////        reportToShowTemplateModel.storyReport = storyReport;
+////        var storyReportHTML = execspec.viewissuepage.showstory.renderStoryReport(reportToShowTemplateModel);
+////        AJS.$("#storyReportContainer").html(storyReportHTML);
+////
+////        if (storyVersion > storyReport.storyVersion) {
+////            AJS.messages.generic("#reportMessageContainer", {
+////                title: "Story has been modified since last run",
+////                closeable: false
+////            });
+////        }
+////
+////        AJS.$("#storyContainer").hide();
+////        AJS.$("#storyEditContainer").hide();
+////        AJS.$("#storyReportContainer").show();
+////
+////        this.updateSelectedButton("show-story-report-" + storyReport.environment);
+////        storyView.debug("# StoryView.showStoryReport");
+////    }
 //
-//            AJS.$(".beforeNarrative").mouseover(function () {
-//                storyView.debug("mouse over on - beforeNarrative")
-//                AJS.$(".beforeNarrativeHint").show();
-//            });
+//    this.showAutoComplete = function (entries) {
 //
-//            AJS.$(".beforeNarrative").mouseout(function () {
-//                storyView.debug("mouse out on - beforeNarrative")
-//                AJS.$(".beforeNarrativeHint").hide();
-//            });
+//        storyView.debug("> StoryView.showAutoComplete");
+//        storyView.debug("entries - " + entries);
 //
-//        }
+//        this.autoCompleteEntries = entries;
 //
-//        this.updateSelectedButton("show-story-button");
+//        this.autoCompleteDialog.refresh();
+////        AJS.$("#arrow-autoCompleteDialog").removeClass("aui-bottom-arrow");
+////        AJS.$("#arrow-autoCompleteDialog").addClass("aui-css-arrow");
+//        this.autoCompleteDialog.show();
+////        AJS.$("#arrow-autoCompleteDialog").removeClass("aui-bottom-arrow");
+////        AJS.$("#arrow-autoCompleteDialog").addClass("aui-css-arrow");
+////        AJS.$("#arrow-autoCompleteDialog").addClass("aui-top-arrow");
+////        AJS.$("#arrow-autoCompleteDialog").rotate(90);
 //
-//        storyView.debug("# StoryView.showStory");
-//    }
-
-//    this.showStoryReportButtons = function (story) {
 //
-//        storyView.debug("> StoryView.showStoryReportButtons");
+//        var autoCompleteHtml = storyView.autoCompleteDialog.html();
+//        storyView.debug("autoCompleteHtml - " + autoCompleteHtml);
 //
-//        var storyVersion = story.version;
-//        storyView.debug("storyVersion - " + storyVersion);
+////        AJS.$("#autoCompleteHtml").html(autoCompleteHtml);
+////        AJS.$("#arrow-autoCompleteDialog")
 //
-//        // add the story reports
-//        var storyReportButtons = execspec.viewissuepage.showstory.renderStoryReportButtons(story);
-//        AJS.$("#storyReportButtons").html(storyReportButtons);
-//        // set the story report button onClick handlers
-//        var storyReports = story.storyReports;
-//        for (var i = 0; i < storyReports.length; i++) {
-//            var storyReport = storyReports[i];
-//            var linkId = "show-story-report-" + storyReport.environment;
-//            AJS.$("#" + linkId).click(
-//                function (event) {
-//
-//                    storyView.debug("> show story report button clicked");
-//                    event.preventDefault();
-//
-//                    var attributes = event.target.attributes;
-//                    var environmentNode = attributes["environment"];
-//                    var environment = environmentNode.nodeValue;
-//                    storyController.showStoryReport(environment);
-//
-//                    storyView.debug("# show story report button clicked");
+//        storyView.debug("# StoryView.showAutoComplete");
-//                }
+//    }
-//            );
-//        }
 //
-//        storyView.debug("# StoryView.showStoryReportButtons");
-//    }
+//}
-
-//    this.showStoryReport = function (storyReport, storyVersion) {
 //
-//        storyView.debug("> StoryView.showStoryReport");
-//        storyView.debug("storyReport.environment - " + storyReport.environment);
 //
-//        var reportToShowTemplateModel = new Object();
-//        reportToShowTemplateModel.storyReport = storyReport;
-//        var storyReportHTML = execspec.viewissuepage.showstory.renderStoryReport(reportToShowTemplateModel);
-//        AJS.$("#storyReportContainer").html(storyReportHTML);
 //
-//        if (storyVersion > storyReport.storyVersion) {
-//            AJS.messages.generic("#reportMessageContainer", {
-//                title: "Story has been modified since last run",
-//                closeable: false
-//            });
-//        }
-//
-//        AJS.$("#storyContainer").hide();
-//        AJS.$("#storyEditContainer").hide();
-//        AJS.$("#storyReportContainer").show();
-//
-//        this.updateSelectedButton("show-story-report-" + storyReport.environment);
-//        storyView.debug("# StoryView.showStoryReport");
-//    }
-
-    this.showAutoComplete = function (entries) {
-
-        storyView.debug("> StoryView.showAutoComplete");
-        storyView.debug("entries - " + entries);
-
-        this.autoCompleteEntries = entries;
-
-        this.autoCompleteDialog.refresh();
-//        AJS.$("#arrow-autoCompleteDialog").removeClass("aui-bottom-arrow");
-//        AJS.$("#arrow-autoCompleteDialog").addClass("aui-css-arrow");
-        this.autoCompleteDialog.show();
-//        AJS.$("#arrow-autoCompleteDialog").removeClass("aui-bottom-arrow");
-//        AJS.$("#arrow-autoCompleteDialog").addClass("aui-css-arrow");
-//        AJS.$("#arrow-autoCompleteDialog").addClass("aui-top-arrow");
-//        AJS.$("#arrow-autoCompleteDialog").rotate(90);
-
-
-        var autoCompleteHtml = storyView.autoCompleteDialog.html();
-        storyView.debug("autoCompleteHtml - " + autoCompleteHtml);
-
-//        AJS.$("#autoCompleteHtml").html(autoCompleteHtml);
-//        AJS.$("#arrow-autoCompleteDialog")
-
-        storyView.debug("# StoryView.showAutoComplete");
-    }
-
-}
-
-
-
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/edit-story.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/edit-story.css	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/edit-story.css	(revision Shelved version)
@@ -25,12 +25,12 @@
     /*font-weight: bold;*/
 /*}*/
 
-/*.firstDiv {*/
-    /*display: inline;*/
-    /*border-style: solid;*/
-    /*border-width: 1px;*/
-    /*border-color: green;*/
-/*}*/
+.savingMsgDiv {
+    display: inline;
+    border-style: solid;
+    border-width: 1px;
+    border-color: green;
+}
 
 .save-story-button-spinner {
     /*border-style: solid;*/
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryModel.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryModel.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryModel.js	(revision Shelved version)
@@ -1,6 +1,6 @@
-function StoryModel() {
-    this.projectKey = null;
-    this.issueKey = null;
-    this.version = null;
-    this.asString = null;
-}
\ No newline at end of file
+//function StoryModel() {
+//    this.projectKey = null;
+//    this.issueKey = null;
+//    this.version = null;
+//    this.asString = null;
+//}
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryController.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryController.js	(revision Shelved version)
@@ -1,50 +1,63 @@
-var storyController;
-//var storyView;
-var storyService;
-var pageUtils;
-
 function StoryController() {
 
-    this.debugOn = true;
+    var debugOn = true;
 
-    this.autoAlignTables = true;
+    var debug = function (msg) {
+        if (debugOn) {
+            console.log(msg);
+        }
+    }
 
-    storyController = this;
-    storyService = new StoryService();
-    pageUtils = new PageUtils();
+    var error = function (msg) {
+        console.error(msg);
+    }
 
-    this.debug = function (msg) {
-        if (this.debugOn) {
-            console.log("[DEBUG StoryController] " + msg);
+    var info = function (msg) {
+        console.info(msg);
-        }
+    }
-    }
 
-    this.editor = null;
-    this.currentStory = null;
-    this.storyChanged = false;
-    this.stepDocs = null;
-    this.alignTablesOnEdit = true;
+    var storyController = this;
+    var pageUtils = new PageUtils();
+    var restService = new RestService();
+    var msgBar = new MsgBar();
+    var tableAligner = new TableAligner();
+    var editorUtils = new EditorUtils();
+    var textUtils = new TextUtils();
+    var stepDocUtils = new StepDocUtils();
+    var prefs = new PreferencesModel();
+    this.buttonHandler = new ButtonHandler();
 
-    this.init = function () {
+    var editor = undefined;
+    var loadedStory = undefined;
+    var stepDocs = undefined;
 
-        storyController.debug("> init");
+    var storyChanged = false;
 
-        var storyService = new StoryService();
-        var projectKey = new PageUtils().getProjectKey();
-        storyService.fetchStepDocs(projectKey, function (foundStepDocs) {
-            storyController.stepDocs = foundStepDocs;
+    // initialization sequence
+    restService.getUserPreferences(function (fetchedPreferences) {
+        prefs = fetchedPreferences;
+        restService.fetchStepDocs(pageUtils.getProjectKey(), function (foundStepDocs) {
+            stepDocs = foundStepDocs;
+            restService.loadStory(pageUtils.getProjectKey(), pageUtils.getIssueKey(), function (fetchedStory) {
+                editor = storyController.initEditor();
+                storyController.showStory(fetchedStory);
-        });
+            });
+        });
+    });
 
+    this.initEditor = function () {
+        // initialize story panel
         var storyPanelContent = execspec.viewissuepage.showstory.renderStoryPanel();
         AJS.$("#story-panel").html(storyPanelContent);
 
+        // initialize cm editor
         CodeMirror.commands.autocomplete = function (cm) {
             cm.showHint({hint: CodeMirror.hint.jbehave});
         }
         var editor = CodeMirror.fromTextArea(document.getElementById("storyTextArea"), {
             mode: "jbehave",
 //            lineComment: "!--",
-//            lineNumbers: true,
+            lineNumbers: prefs.showLineNumbers,
             extraKeys: {
                 "Ctrl-Space": "autocomplete",
 
@@ -56,7 +69,6 @@
                 // commenting
                 "Ctrl-/": function (cm) {
 
-
                     console.log("commenting!");
 
                     var startOfSelection = cm.getCursor(true);
@@ -85,9 +97,6 @@
                     } else {
                         cm.lineComment(from, to, options);
                     }
-
-//                    storyController.editor.uncomment(from, to, options);
-
                 }
 //                "F11": function(cm) {
 //                    cm.setOption("fullScreen", !cm.getOption("fullScreen"));
@@ -97,951 +106,1057 @@
 //                }
             }
         });
-        this.editor = editor;
-        editor.on("change", this.onEditorChangeHandler);
 
-//        editor.on("focus", this.onEditorFocusHandler);
-//        editor.on("blur", this.onEditorBlurHandler);
+        editor.on("change", storyController.onEditorChangeHandler);
 
-//        AJS.$("#story-panel-container").on("focusout", storyController.onEditorFocusOut);
-//
-//        editor.on("beforeChange", function() {
-//           storyController.debug("##### on beforeChange");
-//        });
+        return editor;
+    }
 
-        editor.on("update", function (editor, param) {
-            storyController.debug("##### on editor UPDATE");
-//            storyController.onEditorUpdateHandler(editor);
-        });
+    this.onEditorChangeHandler = function (editor, changeObj) {
+        debug("> onEditorChangeHandler");
 
-        AJS.$("#showLineNumbersTrigger").click(function (event) {
-            var target = event.target;
-            if (AJS.$(target).hasClass("checked")) {
-                storyController.debug("hiding line numbers");
-                storyController.editor.setOption("lineNumbers", false);
-            } else {
-                storyController.debug("showing line numbers");
-                storyController.editor.setOption("lineNumbers", true);
+        if (storyChanged == false) {
+            msgBar.showSaveCancelMsg();
-            }
+        }
+        storyChanged = true;
 
-        });
+        editorUtils.remarkStepsOnChange(changeObj);
 
-        AJS.$("#autoAlignTableParamsTrigger").click(function (event) {
-            var target = event.target;
-            if (AJS.$(target).hasClass("checked")) {
-                storyController.debug("auto align table parameters -  Off");
-                storyController.autoAlignTables = false;
-            } else {
-                storyController.debug("auto align table parameters -  On");
-                storyController.autoAlignTables = true;
-                storyController.alignTablesInWholeDoc();
+        debug("# onEditorChangeHandler");
-            }
+    }
 
+    this.onUserPreferencesUpdated = function () {
+        restService.getUserPreferences(function (fetchedPreferences) {
+            prefs = fetchedPreferences;
+            if (prefs.showLineNumbers) {
+                editor.setOption("lineNumbers", true);
+            } else {
+                editor.setOption("lineNumbers", false);
+            }
         });
+    }
 
-        AJS.$("#autoInsertTabularParametersTrigger").click(function (event) {
-            var target = event.target;
-            if (AJS.$(target).hasClass("checked")) {
-                storyController.debug("auto insert tabular parameters -  Off");
+    this.showStory = function (storyModel) {
+
+        debug("> showStory");
+
+        editor.off("change", storyController.onEditorChangeHandler);
+        editor.setValue(storyModel.asString);
+        editor.on("change", storyController.onEditorChangeHandler);
+
+        loadedStory = storyModel;
+        storyChanged = false;
+
+        editor.setOption("readOnly", false);
+
+        debug("# showStory");
+
+        var stepStartingLine = editorUtils.findStepStartingLineAfter(-1);
+        while (stepStartingLine > -1) {
+            var stepEndingLine = editorUtils.findLastStepLineFrom(stepStartingLine);
+            editorUtils.remarkStepBetween(stepStartingLine, stepEndingLine);
+            if (stepEndingLine >= editor.lineCount()) {
+                stepStartingLine = -1;
             } else {
-                storyController.debug("auto insert tabular parameters -  On");
+                stepStartingLine = editorUtils.findStepStartingLineAfter(stepEndingLine);
             }
+        }
 
-        });
+        if (storyModel.version != null) {
+            // this is NOT a new story, so check and show any story reports
+            restService.findStoryReports(pageUtils.getProjectKey(), pageUtils.getIssueKey(),
+                function (storyReportsPayload) {
+                    debug("> findStoryReports.callback");
+                    if (storyReportsPayload != undefined && storyReportsPayload.storyTestReports.length != 0) {
+                        debug("found storyReportsPayload - " + JSON.stringify(storyReportsPayload, null, "\t"));
+                        storyController.showStoryReports(storyReportsPayload.storyTestReports);
+                    } else {
+                        debug("no story reports were found for project");
+                    }
+                    debug("# findStoryReports.callback");
+                }
+            );
+        }
+    }
 
-        this.loadStory();
+    this.showStoryReports = function (storyTestReports) {
 
-        storyController.debug("# init");
-    }
+        debug("> showStoryReports");
 
-    this.onEditorFocusHandler = function () {
-        storyController.debug("> onEditorFocusHandler");
+        var templateParam = new Object();
+        templateParam.storyTestReports = storyTestReports;
+        templateParam.currentStoryVersion = loadedStory.version;
 
-        AJS.$("#jbehave-story-val").removeClass("inactive");
-        AJS.$("#jbehave-story-val").addClass("active");
+        var storyReportsContent = execspec.viewissuepage.showstoryreports.renderStoryReports(templateParam);
 
-        AJS.$("#overlayIconContainer").removeClass("icon-edit-sml");
-        AJS.$("#overlayIconContainer").addClass("throbber");
+        AJS.$('#storyReportsPanel').html(storyReportsContent);
+        AJS.tabs.setup();
 
-        AJS.$("#jbehaveStoryForm").addClass("ajs-dirty-warning-exempt");
-        AJS.$("#jbehaveStoryForm").addClass("aui");
+        debug("# showStoryReports");
+    }
 
-        AJS.$("#story-panel-container").addClass("active");
+    function PageUtils() {
 
-        AJS.$("#storyEditorButtons").show();
+        var issueKey = null;
+        var projectKey = null;
 
-        storyController.debug("# onEditorFocusHandler");
+        this.getIssueKey = function () {
+            if (issueKey == null) {
+                issueKey = AJS.$.trim(AJS.$("#key-val").text());
-    }
+            }
+            return  issueKey;
+        };
 
-    this.onEditorFocusOut = function (event) {
+        this.getProjectKey = function () {
+            if (projectKey == null) {
+                var issueKey = this.getIssueKey();
+                if (issueKey) {
+                    projectKey = issueKey.match("[A-Z]*")[0];
+                }
+            }
+            return projectKey;
+        };
+    }
 
-        storyController.debug("> onEditorFocusOut");
+    function PreferencesModel() {
+        this.showLineNumbers = false;
+        this.autoAlignTables = true;
+        this.autoInsertTabularFields = true;
+    }
 
-        var triggeredByFormButton = false;
+    function StoryModel() {
+        this.projectKey = null;
+        this.issueKey = null;
+        this.version = null;
+        this.asString = null;
+    }
 
-        var target = event.target;
-        var foundMatches = AJS.$("story-panel-container").find(target);
+    function StoryReportModel() {
+        this.environment = "";
+        this.storyPath = "";
+        this.storyVersion = "";
+        this.status = "";
+        this.totalScenarios = "";
+        this.totalScenariosPassed = "";
+        this.totalScenariosFailed = "";
+        this.totalScenariosPending = "";
+        this.totalScenariosSkipped = "";
+        this.totalScenariosNotPerformed = "";
+        this.htmlReport = "";
+    }
 
-        var relatedTarget = event.relatedTarget;
-        if (relatedTarget != null) {
-            var relatedTargetElements = AJS.$(relatedTarget);
-            if (relatedTargetElements.length > 0) {
-                var relatedTargetElement = relatedTargetElements[0];
-                var relatedTargetId = relatedTargetElement.getAttribute("id");
-                if (relatedTargetId == "saveStoryButton" || relatedTargetId == "cancelEditStoryButton") {
-                    // ignore event
-                    triggeredByFormButton = true;
+    function MsgBar() {
+
+        this.clear = function () {
+            AJS.$("#storyMsgBar").empty();
-                }
+        }
+
+        this.showSaveCancelMsg = function () {
+            var saveCancelContent = execspec.viewissuepage.showstory.renderSaveCancelMsg();
+            AJS.$("#storyMsgBar").empty();
+            AJS.messages.warning("#storyMsgBar", {
+                title: null,
+                id: "storyWarningMsg",
+                body: saveCancelContent,
+                closeable: false
+            });
-            }
+        }
+
+        this.showSavingMsg = function () {
+//            AJS.$("#storyMsgBar").empty();
+            var waitingMsg = execspec.viewissuepage.showstory.renderWaitingMessage();
+            AJS.$('#storyEditedMsgContainer').html(waitingMsg);
+            AJS.$('.save-story-button-spinner').spin();
         }
 
-        if (!triggeredByFormButton) {
-            storyController.onEditorBlurHandler();
-            storyController.debug("# onEditorFocusOut");
+        this.showSuccessMessage = function (saveCancelMsg) {
+
+            AJS.$("#storyMsgBar").empty();
+            AJS.messages.success("#storyMsgBar", {
+                title: null,
+                fadeout: true,
+                delay: 3000,
+                body: saveCancelMsg,
+                closeable: true
+            });
         }
+    }
 
+    function RestService() {
+
+        var restPathBase = "/jira/rest/jbehave-for-jira/1.0/";
+
+        this.getUserPreferences = function (callback) {
+            var urlString = restPathBase + "preferences/for-user";
+            AJS.$.ajax({
+                type: "GET",
+                url: urlString,
+//                async: false,
+                success: function (data, textStatus, jqXHR) {
+                    info("User preferences fetched successfully");
+                    callback(data);
+                },
+                error: function (jqXHR, textStatus, errorThrown) {
+                    error("An error occurred while trying to fetch user preferences, textStatus - "
+                        + textStatus + " errorThrown - " + errorThrown + ". Will use default values for user preferences.");
+                    callback(new PreferencesModel());
-    }
+                }
+            });
+        }
 
-    this.onEditorBlurHandler = function () {
+        this.loadStory = function (projectKey, issueKey, callback) {
 
-        storyController.debug("> onEditorBlurHandler");
+            var urlString = restPathBase + "find/for-issue/" + projectKey + "/" + issueKey;
+            var jqxhr = AJS.$.getJSON(urlString);
 
-        if (storyController.storyChanged) {
-            storyController.saveStory();
+            var successCallback = function (storyPayload, status, xhr) {
+
+                if (storyPayload != undefined) {
+                    debug("found storyPayload - " + JSON.stringify(storyPayload, null, "\t"));
-        } else {
+                } else {
-            storyController.unfocusEditor();
+                    debug("no story found for project - " + projectKey + ", issue - " + issueKey);
+                    storyPayload = new StoryModel();
+                    storyPayload.projectKey = pageUtils.getProjectKey();
+                    storyPayload.issueKey = pageUtils.getIssueKey();
+                    storyPayload.asString = "";
-        }
+                }
 
-        storyController.debug("# onEditorBlurHandler");
+                callback(storyPayload);
-    }
+            }
 
-    this.unfocusEditor = function () {
+            jqxhr.done(successCallback);
 
-        storyController.debug("> unfocusEditor");
+            jqxhr.fail(function (data, status, xhr) {
+                error("fail, received data - " + data);
+                error("xhr.status - " + xhr.status);
+            });
+        }
 
-        AJS.$("#jbehave-story-val").removeClass("saving");
+        this.findStoryReports = function (projectKey, issueKey, callBack) {
 
-        AJS.$("#jbehave-story-val").addClass("inactive");
-        AJS.$("#jbehave-story-val").removeClass("active");
+            var urlString = restPathBase + "story-test/find/" + projectKey + "/" + issueKey;
 
-        AJS.$("#overlayIconContainer").addClass("icon-edit-sml");
-        AJS.$("#overlayIconContainer").removeClass("throbber");
+            var jqxhr = AJS.$.getJSON(urlString);
 
-        AJS.$("#jbehaveStoryForm").removeClass("ajs-dirty-warning-exempt");
-        AJS.$("#jbehaveStoryForm").removeClass("aui");
+            var successCallback = function (data, status, xhr) {
+                callBack(data);
+            }
+            jqxhr.done(successCallback);
 
+            jqxhr.fail(function (data, status, xhr) {
+                console.error("fail, received data - " + data);
+                console.error("xhr.status - " + xhr.status);
+            });
+        }
 
-        AJS.$("#story-panel-container").removeClass("active");
+        this.fetchStepDocs = function (projectKey, callback) {
 
-        AJS.$("#storyEditorButtons").hide();
+            var pathStepDocs = restPathBase + "step-doc/for-project/" + projectKey;
+            AJS.$.ajax({
+                type: "GET",
+                url: pathStepDocs,
+                contentType: "text/plain; charset=utf-8",
+                success: function (data, status, xhr) {
+                    callback(data.stepDocs);
+                },
+                dataType: "json"
+//                async: false
+            });
+        }
 
-        storyController.debug("# unfocusEditor");
+        this.saveOrUpdateStory = function (storyModel) {
+
+            var successCallback = function (savedStory, status, xhr) {
+                var jsonStory = JSON.stringify(savedStory, null, "\t");
+                debug("saved story:\n" + jsonStory);
+
+                msgBar.showSuccessMessage("Story was saved successfully!");
+                storyController.showStory(savedStory);
+                debug("# saveOrUpdateStory callback");
-    }
+            }
 
-    this.showSavingMode = function () {
+            var saveUrl = restPathBase + "crud/save/" + storyModel.projectKey + "/" + storyModel.issueKey;
+            if (storyModel.version != undefined && storyModel.version != "") {
+                saveUrl += "?version=" + storyModel.version;
+            }
 
-        storyController.debug("> showSavingMode");
+            var storyPayload = JSON.stringify(storyModel, null, "\t");
+            debug("sending story payload:\n" + storyPayload);
 
-        AJS.$("#jbehave-story-val").addClass("saving");
+            AJS.$.ajax({
+                type: "POST",
+                url: saveUrl,
+                contentType: "text/plain; charset=utf-8",
+                success: successCallback,
+                data: storyPayload,
+                dataType: "json"
+            });
 
-        storyController.debug("# showSavingMode");
-    }
+        }
+    }
 
+    function TableAligner() {
+
-    this.alignTableBetween = function (tableStartLine, tableEndLine) {
+        this.alignTableBetween = function (tableStartLine, tableEndLine) {
 
-        storyController.debug("> alignTableBetween");
-        storyController.debug("tableStartLine - " + tableStartLine + ", tableEndLine - " + tableEndLine);
+            debug("> alignTableBetween");
 
-        storyController.debug("storyController.alignTablesOnEdit - " + storyController.alignTablesOnEdit);
-        var currentAlignValue = storyController.alignTablesOnEdit;
-        if (storyController.alignTablesOnEdit == false) {
-            return;
-        } else {
-            storyController.alignTablesOnEdit = false;
-        }
+            editor.off("change", storyController.onEditorChangeHandler);
 
-        // get max width for columns
-        var maxColumnWidths = [];
+            // get max width for columns
+            var maxColumnWidths = [];
-        this.editor.getDoc().eachLine(tableStartLine, tableEndLine + 1, function (lineHandle) {
+            editor.getDoc().eachLine(tableStartLine, tableEndLine + 1, function (lineHandle) {
-                var lineText = lineHandle.text;
-                lineText = lineText.replace(/\s+$/g, ''); // trim any trailing spaces
-                if (lineText.substring("|--".length) == "|--") {
-                    // ignore table comment line
-                } else if (lineText.length == 0) {
-                    // ignore empty lines
-                } else {
-                    var tokens = lineText.split("|");
-                    for (var i = 0; i < tokens.length; i++) {
-                        var token = tokens[i];
-                        token = token.replace(/\s+$/g, ''); // trim any trailing spaces
-                        var currentMax = maxColumnWidths[i];
-                        if (currentMax == null || token.length > currentMax) {
-                            var newMax = token.length;
-                            maxColumnWidths[i] = newMax;
-                        }
-                    }
-                }
-            }
-        );
+                    var lineText = lineHandle.text;
+                    lineText = lineText.replace(/\s+$/g, ''); // trim any trailing spaces
+                    if (lineText.substring("|--".length) == "|--") {
+                        // ignore table comment line
+                    } else if (lineText.length == 0) {
+                        // ignore empty lines
+                    } else {
+                        var tokens = lineText.split("|");
+                        for (var i = 0; i < tokens.length; i++) {
+                            var token = tokens[i];
+                            token = token.replace(/\s+$/g, ''); // trim any trailing spaces
+                            var currentMax = maxColumnWidths[i];
+                            if (currentMax == null || token.length > currentMax) {
+                                var newMax = token.length;
+                                maxColumnWidths[i] = newMax;
+                            }
+                        }
+                    }
+                }
+            );
 
-        var cursorPosBefore = this.editor.getCursor(true);
+            var cursorPosBefore = editor.getCursor(true);
 
+            var tokenTrimmedBy = 0;
+
-        // align columns
+            // align columns
-        this.editor.getDoc().eachLine(tableStartLine, tableEndLine + 1, function (lineHandle) {
+            editor.getDoc().eachLine(tableStartLine, tableEndLine + 1, function (lineHandle) {
-                var lineText = lineHandle.text;
-                lineText = lineText.replace(/\s+$/g, ''); // trim any trailing spaces
-                var currentLine = lineHandle.lineNo();
-                if (lineText.substring("|--".length) == "|--") {
-                    // ignore table comment line
-                } else if (lineText.length == 0) {
-                    // ignore empty lines
-                } else {
-                    var tokens = lineText.split("|");
-                    var pos = 0;
-                    for (var i = 0; i < tokens.length; i++) {
-                        var isFirstToken = i == 0;
-                        var isLastToken = i == (tokens.length - 1);
-                        var token = tokens[i];
+                    var lineText = lineHandle.text;
+                    lineText = lineText.replace(/\s+$/g, ''); // trim any trailing spaces
+                    var currentLine = lineHandle.lineNo();
+                    if (lineText.substring("|--".length) == "|--") {
+                        // ignore table comment line
+                    } else if (lineText.length == 0) {
+                        // ignore empty lines
+                    } else {
+                        var tokens = lineText.split("|");
+                        var pos = 0;
+                        for (var i = 0; i < tokens.length; i++) {
+                            var isFirstToken = i == 0;
+                            var isLastToken = i == (tokens.length - 1);
+                            var token = tokens[i];
+                            var originalTokenLength = token.length;
-                        if (!isFirstToken) {
-                            pos++; // for '|'
-                        }
-                        var tokenStartCh = pos;
-                        var tokenEndCh = tokenStartCh + token.length;
-                        var difference = maxColumnWidths[i] - token.length;
-                        if (difference > 0 && !isFirstToken && !isLastToken) {
+                            if (!isFirstToken) {
+                                pos++; // for '|'
+                            }
+                            var tokenStartCh = pos;
+                            var tokenEndCh = tokenStartCh + token.length;
+                            var difference = maxColumnWidths[i] - token.length;
+                            if (difference > 0 && !isFirstToken && !isLastToken) {
 
-                            var spaces = "";
-                            while (difference > 0) {
-                                spaces = spaces + " ";
-                                difference--;
-                            }
-                            // replace old token with new
+                                var spaces = "";
+                                while (difference > 0) {
+                                    spaces = spaces + " ";
+                                    difference--;
+                                }
+                                // replace old token with new
-                            storyController.editor.getDoc().replaceRange(spaces,
+                                editor.getDoc().replaceRange(spaces,
-                                {line: currentLine, ch: tokenEndCh},
-                                {line: currentLine, ch: tokenEndCh});
+                                    {line: currentLine, ch: tokenEndCh},
+                                    {line: currentLine, ch: tokenEndCh});
 
-                            pos += token.length + spaces.length;
+                                pos += token.length + spaces.length;
 
-                        } else if (difference < 0 && !isFirstToken && !isLastToken) {
-                            // this is the case when token has whitespace at the end
-                            // so we trim the whitespace
-                            token = token.replace(/\s+$/g, ''); // trim any trailing spaces
-                            // after trimming the difference must be zero
-                            difference = maxColumnWidths[i] - token.length;
-                            if (difference < 0) {
-                                console.error("Error occurred while trying to align table line - " + currentLine + ", length of token - "
-                                    + token + " was longer than maximum length for its column");
-                                pos += token.length;
-                            } else {
-                                // we replace the original token with the trimmed one
-                                // but we may need to pad still following our trimming
-                                var spaces = "";
-                                while (difference > 0) {
-                                    spaces = spaces + " ";
-                                    difference--;
-                                }
-                                // replace old token with new one, which may also be padded
-                                var replaceToken = token + spaces;
+                            } else if (difference < 0 && !isFirstToken && !isLastToken) {
+                                // this is the case when token has whitespace at the end
+                                // so we trim the whitespace
+                                token = token.replace(/\s+$/g, ''); // trim any trailing spaces
+                                // after trimming the difference must be zero
+                                difference = maxColumnWidths[i] - token.length;
+                                if (difference < 0) {
+                                    console.error("Error occurred while trying to align table line - " + currentLine + ", length of token - "
+                                        + token + " was longer than maximum length for its column");
+                                    pos += token.length;
+                                } else {
+                                    // we replace the original token with the trimmed one
+                                    // but we may need to pad still following our trimming
+                                    var spaces = "";
+                                    while (difference > 0) {
+                                        spaces = spaces + " ";
+                                        difference--;
+                                    }
+                                    // replace old token with new one, which may also be padded
+                                    var replaceToken = token + spaces;
-                                storyController.editor.getDoc().replaceRange(replaceToken,
+                                    tokenTrimmedBy = originalTokenLength - replaceToken.length;
+                                    editor.getDoc().replaceRange(replaceToken,
-                                    {line: currentLine, ch: tokenStartCh},
-                                    {line: currentLine, ch: tokenEndCh});
-                                pos += replaceToken.length;
-                            }
-                        } else {
-                            pos += token.length;
-                        }
-                    }
-                }
-            }
-        );
+                                        {line: currentLine, ch: tokenStartCh},
+                                        {line: currentLine, ch: tokenEndCh});
+                                    pos += replaceToken.length;
+                                }
+                            } else {
+                                pos += token.length;
+                            }
+                        }
+                    }
+                }
+            );
 
-        var cursorPosAfter = this.editor.getCursor(true);
+            var cursorPosAfter = editor.getCursor(true);
-        if (cursorPosBefore.line != cursorPosAfter.line || cursorPosBefore.ch != cursorPosAfter.ch) {
-            // cursor has been moved, set it back to original position before alignment
+            if (cursorPosBefore.line != cursorPosAfter.line || cursorPosBefore.ch != cursorPosAfter.ch) {
+                // cursor has been moved, set it back to original position before alignment
-            this.editor.setCursor(cursorPosBefore);
+                if (cursorPosAfter.ch > cursorPosBefore.ch) {
+//                if (tokenTrimmedBy == 0) {
+                    editor.setCursor(cursorPosBefore);
-        }
+                }
+            }
 
-        storyController.alignTablesOnEdit = currentAlignValue;
+            editor.on("change", storyController.onEditorChangeHandler);
 
-        storyController.debug("# alignTableBetween");
+            debug("# alignTableBetween");
-    }
+        }
 
-    this.alignTablesInWholeDoc = function () {
+        this.alignTablesInWholeDoc = function () {
 
-        storyController.debug("> alignTablesInWholeDoc");
+            debug("> alignTablesInWholeDoc");
 
-        var tableStartLine = null;
-        var currentLine;
-        var previousLine;
+            var tableStartLine = null;
+            var currentLine;
+            var previousLine;
-        this.editor.getDoc().eachLine(function (lineHandle) {
+            editor.getDoc().eachLine(function (lineHandle) {
-            if (currentLine != null) {
-                previousLine = currentLine;
-            }
-            currentLine = lineHandle.lineNo();
-            var lineText = lineHandle.text;
-            lineText = lineText.replace(/\s+$/g, ''); // trim any trailing spaces
-            if (lineText.substr(0, 1) == "|") {
-                // inside table line
-                if (tableStartLine == null) {
-                    tableStartLine = lineHandle.lineNo();
-                }
-            } else if (tableStartLine != null) {
-                // we were already in the table before
-                var tableEndLine = previousLine;
-                if (tableEndLine > tableStartLine) {
-                    storyController.alignTableBetween(tableStartLine, tableEndLine);
-                }
-                tableStartLine = null;
-            }
-        });
+                if (currentLine != null) {
+                    previousLine = currentLine;
+                }
+                currentLine = lineHandle.lineNo();
+                var lineText = lineHandle.text;
+                lineText = lineText.replace(/\s+$/g, ''); // trim any trailing spaces
+                if (lineText.substr(0, 1) == "|") {
+                    // inside table line
+                    if (tableStartLine == null) {
+                        tableStartLine = lineHandle.lineNo();
+                    }
+                } else if (tableStartLine != null) {
+                    // we were already in the table before
+                    var tableEndLine = previousLine;
+                    if (tableEndLine > tableStartLine) {
+                        storyController.alignTableBetween(tableStartLine, tableEndLine);
+                    }
+                    tableStartLine = null;
+                }
+            });
 
-        storyController.debug("# alignTablesInWholeDoc");
+            debug("# alignTablesInWholeDoc");
-    }
+        }
 
+        this.realignStepTableParameters = function (stepStartLine, stepEndLine) {
+
+            debug("> realignStepTableParameters");
+
+            if (prefs.autoAlignTables) {
+                var firstTableLine = editorUtils.findTabularParameterStartingLineAfter(stepStartLine, stepEndLine + 1);
+                if (firstTableLine != -1) {
+                    var lastTableLine = editorUtils.findTabularParameterEndingLineAfter(stepStartLine, stepEndLine + 1);
+                    this.alignTableBetween(firstTableLine, lastTableLine);
+                }
+            } else {
+                debug("skipping aligning of table parameters");
+            }
+            debug("# realignStepTableParameters");
+        }
+
+
+    }
+
+    function TextUtils() {
+
+        this.startsWithExamples = function (text) {
+            var regExpPattern = new RegExp("^(Examples:)");
+            var matchedResult = regExpPattern.exec(text);
+            if (matchedResult != null) {
+                return true;
+            } else {
+                return false;
+            }
+        }
+
+        this.startsWithScenario = function (text) {
+            var regExpPattern = new RegExp("^(Scenario:)\\s");
+            var matchedResult = regExpPattern.exec(text);
+            return matchedResult != null;
+        }
+
+        this.startsWithOutcome = function (text) {
+            var regExpPattern = new RegExp("^(Outcome:)\\s");
+            var matchedResult = regExpPattern.exec(text);
+            return matchedResult != null;
+        }
+
+        this.startsWithGivenWhenThen = function (text) {
+            var regExpPattern = new RegExp("^(Given|When|Then)\\s");
+            var matchedResult = regExpPattern.exec(text);
+            return matchedResult != null;
+        }
+
+        this.startsWithAnd = function (text) {
+            var regExpPattern = new RegExp("^(And)\\s");
+            var matchedResult = regExpPattern.exec(text);
+            return matchedResult != null;
+        }
+
+        this.startsWithTableSeparator = function (text) {
+            var firstChar = text.substring(0, 1);
+            return firstChar == "|";
+        }
+
+        this.startsWithTableComment = function (text) {
+            var firstChar = text.substring(0, 3);
+            return firstChar == "|--";
+        }
+    }
+
+    function EditorUtils() {
+
-    this.lineStartsWithStepKeyword = function (lineNumber) {
+        this.lineStartsWithStepKeyword = function (lineNumber) {
 
-        var lineHandle = this.editor.getLineHandle(lineNumber);
+            var lineHandle = editor.getLineHandle(lineNumber);
-        if (lineHandle == null) {
-            return false;
-        } else {
-            var lineText = lineHandle.text;
+            if (lineHandle == null) {
+                return false;
+            } else {
+                var lineText = lineHandle.text;
-            var regExpPattern = new RegExp("^(Given|When|Then|And)\\s+");
+                var regExpPattern = new RegExp("^(Given|When|Then|And)\\s");
-            var matchedResult = regExpPattern.exec(lineText);
-            if (matchedResult != null) {
-                return true;
-            } else {
-                return false;
-            }
-        }
-    }
+                var matchedResult = regExpPattern.exec(lineText);
+                if (matchedResult != null) {
+                    return true;
+                } else {
+                    return false;
+                }
+            }
+        }
 
-    this.lineStartsWithAndKeyword = function (lineNumber) {
+        this.lineStartsWithAndKeyword = function (lineNumber) {
 
-        var lineHandle = this.editor.getLineHandle(lineNumber);
+            var lineHandle = editor.getLineHandle(lineNumber);
-        var lineText = lineHandle.text;
+            var lineText = lineHandle.text;
 
-        var regExpPattern = new RegExp("^(And)\\s+");
-        var matchedResult = regExpPattern.exec(lineText);
-        if (matchedResult != null) {
-            return true;
-        } else {
-            return false;
-        }
-    }
+            var regExpPattern = new RegExp("^(And)\\s+");
+            var matchedResult = regExpPattern.exec(lineText);
+            if (matchedResult != null) {
+                return true;
+            } else {
+                return false;
+            }
+        }
 
-    this.findStepStartingLineBefore = function (lineNumber) {
-        var previousLine = lineNumber - 1;
-        while (previousLine != -1) {
+        this.findStepStartingLineBefore = function (lineNumber) {
+            var previousLine = lineNumber - 1;
+            while (previousLine != -1) {
-            if (this.lineStartsWithStepKeyword(previousLine)) {
+                if (this.lineStartsWithScenarioOrExamples(previousLine) || this.lineStartsWithOutcome(previousLine)) {
+                    return -1;
+                } else if (this.lineStartsWithStepKeyword(previousLine)) {
-                return previousLine;
-            }
-            previousLine--;
-        }
-        return -1;
-    }
+                    return previousLine;
+                }
+                previousLine--;
+            }
+            return -1;
+        }
 
+        this.findStepStartingLineBeforePosition = function (pos) {
+            var lineNumber = pos.line;
+            var ch = pos.ch;
+            var lineHandle = editor.getLineHandle(lineNumber);
+            var lineText = lineHandle.text;
+            var partText = lineText.substring(0, ch);
+            if (textUtils.startsWithGivenWhenThen(partText) || textUtils.startsWithAnd(partText)) {
+                return lineNumber;
+            } else {
+                return this.findStepStartingLineBefore(lineNumber);
+            }
+
+        }
+
-    this.findStepStartingLineInSameScenarioBefore = function (lineNumber) {
-        var previousLine = lineNumber - 1;
-        while (previousLine != -1) {
-            if (this.lineStartsWithStepKeyword(previousLine)) {
-                return previousLine;
-            } else if (this.lineStartsWithScenario(previousLine)) {
-                return -1;
-            } else {
-                previousLine--;
-            }
-        }
-        return -1;
-    }
+        this.findStepStartingLineInSameScenarioBefore = function (lineNumber) {
+            var previousLine = lineNumber - 1;
+            while (previousLine != -1) {
+                if (this.lineStartsWithStepKeyword(previousLine)) {
+                    return previousLine;
+                } else if (this.lineStartsWithScenario(previousLine)) {
+                    return -1;
+                } else {
+                    previousLine--;
+                }
+            }
+            return -1;
+        }
 
-    this.findStepStartingLineAfter = function (lineNumber) {
-        var nextLine = lineNumber + 1;
+        this.findStepStartingLineAfter = function (lineNumber) {
+            var nextLine = lineNumber + 1;
-        var totalLines = this.editor.lineCount();
+            var totalLines = editor.lineCount();
-        while (nextLine < totalLines) {
-            if (this.lineStartsWithStepKeyword(nextLine)) {
-                return nextLine;
-            }
-            nextLine++;
-        }
-        return -1;
-    }
+            while (nextLine < totalLines) {
+                if (this.lineStartsWithStepKeyword(nextLine)) {
+                    return nextLine;
+                }
+                nextLine++;
+            }
+            return -1;
+        }
 
-    this.findTabularParameterStartingLineAfter = function (lineNumber, butNotAtOrAfter) {
-        var nextLineNumber = lineNumber + 1;
-        while (nextLineNumber < butNotAtOrAfter) {
+        this.findTabularParameterStartingLineAfter = function (lineNumber, butNotAtOrAfter) {
+            var nextLineNumber = lineNumber + 1;
+            while (nextLineNumber < butNotAtOrAfter) {
-            var nextLineHandle = storyController.editor.getLineHandle(nextLineNumber);
+                var nextLineHandle = editor.getLineHandle(nextLineNumber);
-            if (nextLineHandle == null) {
-                return -1;
-            } else {
-                if (nextLineHandle.text.substring(0, 1) == "|" && nextLineHandle.text.substring(0, 3) != "|--") {
-                    return nextLineNumber;
-                }
-                nextLineNumber++;
-            }
-        }
-        return -1;
-    }
+                if (nextLineHandle == null) {
+                    return -1;
+                } else {
+                    if (nextLineHandle.text.substring(0, 1) == "|" && nextLineHandle.text.substring(0, 3) != "|--") {
+                        return nextLineNumber;
+                    }
+                    nextLineNumber++;
+                }
+            }
+            return -1;
+        }
 
-    this.findStepStartingLineInSameScenarioAfter = function (lineNumber) {
-        var nextLine = lineNumber + 1;
+        this.findStepStartingLineInSameScenarioAfter = function (lineNumber) {
+            var nextLine = lineNumber + 1;
-        var totalLines = this.editor.lineCount();
+            var totalLines = editor.lineCount();
-        while (nextLine < totalLines) {
-            if (this.lineStartsWithStepKeyword(nextLine)) {
-                return nextLine;
-            } else if (this.lineStartsWithScenarioOrExamples(nextLine)) {
-                return -1;
-            }
-            nextLine++;
-        }
-        return -1;
-    }
+            while (nextLine < totalLines) {
+                if (this.lineStartsWithStepKeyword(nextLine)) {
+                    return nextLine;
+                } else if (this.lineStartsWithScenarioOrExamples(nextLine)) {
+                    return -1;
+                }
+                nextLine++;
+            }
+            return -1;
+        }
 
-    this.lineStartsWithScenario = function (lineNumber) {
+        this.lineStartsWithScenario = function (lineNumber) {
 
-        var lineHandle = this.editor.getLineHandle(lineNumber);
+            var lineHandle = editor.getLineHandle(lineNumber);
-        var lineText = lineHandle.text;
+            var lineText = lineHandle.text;
-        var regExpPattern = new RegExp("^(Scenario:)\\s+");
-        var matchedResult = regExpPattern.exec(lineText);
-        if (matchedResult != null) {
-            return true;
-        } else {
-            return false;
+            return textUtils.startsWithScenario(lineText);
         }
+
+        this.lineStartsWithOutcome = function (lineNumber) {
+            var lineHandle = editor.getLineHandle(lineNumber);
+            var lineText = lineHandle.text;
+            return textUtils.startsWithOutcome(lineText);
-    }
+        }
 
+
-    this.lineStartsWithScenarioOrExamples = function (lineNumber) {
+        this.lineStartsWithScenarioOrExamples = function (lineNumber) {
 
-        var lineHandle = this.editor.getLineHandle(lineNumber);
+            var lineHandle = editor.getLineHandle(lineNumber);
-        var lineText = lineHandle.text;
+            var lineText = lineHandle.text;
-        var regExpPattern = new RegExp("^(Examples:|Scenario:)\\s+");
-        var matchedResult = regExpPattern.exec(lineText);
-        if (matchedResult != null) {
+            if (textUtils.startsWithScenario(lineText) || textUtils.startsWithExamples(lineText)) {
-            return true;
-        } else {
-            return false;
-        }
-    }
+                return true;
+            } else {
+                return false;
+            }
+        }
 
-    this.findTabularParameterEndingLineAfter = function (tableStartLine, notAtOrAfter) {
-        var nextLineNumber = tableStartLine + 1;
-        var lastStepLine = tableStartLine;
-        while (nextLineNumber < notAtOrAfter) {
+        this.findTabularParameterEndingLineAfter = function (tableStartLine, notAtOrAfter) {
+            var nextLineNumber = tableStartLine + 1;
+            var lastStepLine = tableStartLine;
+            while (nextLineNumber < notAtOrAfter) {
-            var nextLineHandle = storyController.editor.getLineHandle(nextLineNumber);
+                var nextLineHandle = editor.getLineHandle(nextLineNumber);
-            if (nextLineHandle == null) {
-                return lastStepLine;
-            } else {
-                if (nextLineHandle.text.length > 0 && nextLineHandle.text.substring(0, 1) != "|") {
-                    break;
-                } else {
-                    lastStepLine = nextLineNumber;
-                    nextLineNumber++;
-                }
-            }
-        }
-        return lastStepLine;
-    }
+                if (nextLineHandle == null) {
+                    return lastStepLine;
+                } else {
+                    if (nextLineHandle.text.length > 0 && nextLineHandle.text.substring(0, 1) != "|") {
+                        break;
+                    } else {
+                        lastStepLine = nextLineNumber;
+                        nextLineNumber++;
+                    }
+                }
+            }
+            return lastStepLine;
+        }
 
-    this.findLastStepLineFrom = function (lineNumber) {
+        this.findLastStepLineFrom = function (lineNumber) {
 
-        var nextLineNumber = lineNumber + 1;
+            var nextLineNumber = lineNumber + 1;
-        var lineCount = this.editor.getDoc().lineCount();
+            var lineCount = editor.getDoc().lineCount();
-        var lastStepLine = lineNumber;
-        while (nextLineNumber < lineCount) {
-            if (this.lineStartsWithStepKeyword(nextLineNumber)
-                || this.lineStartsWithScenarioOrExamples(nextLineNumber)) {
-                break;
-            } else {
-                lastStepLine = nextLineNumber;
-                nextLineNumber++;
-            }
-        }
+            var lastStepLine = lineNumber;
+            while (nextLineNumber < lineCount) {
+                if (this.lineStartsWithStepKeyword(nextLineNumber)
+                    || this.lineStartsWithScenarioOrExamples(nextLineNumber)) {
+                    break;
+                } else {
+                    lastStepLine = nextLineNumber;
+                    nextLineNumber++;
+                }
+            }
 
-        return lastStepLine;
-    }
+            return lastStepLine;
+        }
 
-    this.findMatchingStepdoc = function (step, stepType) {
+//        this.findTabularParameterStartingLineBeforePos = function (pos) {
+//
+//            var line = pos.line;
+//            var ch = pos.ch;
+//
+//            var lineHandle = editor.getLineHandle(line);
+//            var lineText = lineHandle.text;
+//            var partText = lineText.substring(0, ch);
+//
+//            var tableStartingLine = -1;
+//            if (partText.substring(0, 1) == "|") {
+//                // this is a table line
+//            } else {
+//
+//            }
+//
+//
+//        }
 
-        storyController.debug("> findMatchingStepdoc");
-
-        // check if step matches
-        var matchedResult = null;
-        var matchingStepDoc = null;
-        {
-            step = step.replace(/\s+$/g, ''); // trim trailing whitespace;
-
-            for (var i = 0; i < storyController.stepDocs.length; i++) {
-                var stepDoc = storyController.stepDocs[i];
-                if (stepDoc.startingWord == stepType) {
-                    // try to see if the step docs pattern matches step body
-                    var regExpStr = stepDoc.groupedRegExpPattern;
-                    // replace the (.*) with ([\s\S]*) for javascript version of dotall option
-                    var replacePattern = new RegExp("\\(\\.\\*\\)", "g");
-                    regExpStr = regExpStr.replace(replacePattern, "([\\s\\S]*)");
-                    // add start and end chars to match the string exactly
-                    regExpStr = "^" + regExpStr + "$";
-                    storyController.debug("Trying to match the step body against pattern - " + regExpStr);
-                    var regExpPattern = new RegExp(regExpStr);
-                    var matchedResult = regExpPattern.exec(step);
-                    if (matchedResult != null) {
-                        storyController.debug("Step pattern - " + regExpStr + " matches current step body");
-                        matchingStepDoc = stepDoc;
-                        return new Object({result: matchedResult, stepDoc: matchingStepDoc});
-                        break;
-                    }
-                }
-            }
-        }
-
-        storyController.debug("# findMatchingStepdoc");
-
-        return null;
-    }
-
-    this.remarkStep = function (stepStartLine, stepEndLine, step) {
+        this.remarkStep = function (stepStartLine, stepEndLine, step) {
 
-        storyController.debug("> remarkStep");
-        storyController.debug("stepStartLine - " + stepStartLine + ", stepEndLine - " + stepEndLine);
-        storyController.debug("step:\n" + step);
+            debug("> remarkStep");
+            debug("stepStartLine - " + stepStartLine + ", stepEndLine - " + stepEndLine);
+            debug("step:\n" + step);
 
 
-        // extract step body i.e. without the starting keyword
-        var regExpPattern = new RegExp("(^(Given|When|Then|And)\\s+)([\\s\\S]*)");
-        var matchedResult = regExpPattern.exec(step);
-        var keyword;
-        var stepBody;
-        var keywordPart;
-        if (matchedResult != null) {
-            keywordPart = matchedResult[1];
-            keyword = matchedResult[2];
-            stepBody = matchedResult[3];
-        } else {
-            console.log("Failed to match step against expected pattern, step - " + step + ", pattern - " + regExpPattern);
-            return;
-        }
+            // extract step body i.e. without the starting keyword
+            var regExpPattern = new RegExp("(^(Given|When|Then|And)\\s+)([\\s\\S]*)");
+            var matchedResult = regExpPattern.exec(step);
+            var keyword;
+            var stepBody;
+            var keywordPart;
+            if (matchedResult != null) {
+                keywordPart = matchedResult[1];
+                keyword = matchedResult[2];
+                stepBody = matchedResult[3];
+            } else {
+                console.log("Failed to match step against expected pattern, step - " + step + ", pattern - " + regExpPattern);
+                return;
+            }
 
-        var lookingAtLine = stepStartLine;
-        while (keyword == "And") {
-            // replace it with the previous steps keyword
-            var previousStepStartLine = this.findStepStartingLineInSameScenarioBefore(lookingAtLine);
+            var lookingAtLine = stepStartLine;
+            while (keyword == "And") {
+                // replace it with the previous steps keyword
+                var previousStepStartLine = this.findStepStartingLineInSameScenarioBefore(lookingAtLine);
 
-            if (previousStepStartLine != -1) {
+                if (previousStepStartLine != -1) {
-                var previousStepFirstLine = this.editor.getLineHandle(previousStepStartLine).text;
+                    var previousStepFirstLine = editor.getLineHandle(previousStepStartLine).text;
-                var result = regExpPattern.exec(previousStepFirstLine);
-                keyword = result[2];
-                lookingAtLine = previousStepStartLine;
-            } else {
-                // there is no previous step in this same scenario
-                return;
-            }
-        }
+                    var result = regExpPattern.exec(previousStepFirstLine);
+                    keyword = result[2];
+                    lookingAtLine = previousStepStartLine;
+                } else {
+                    // there is no previous step in this same scenario
+                    return;
+                }
+            }
 
-        var findResult = this.findMatchingStepdoc(stepBody, keyword);
+            var findResult = stepDocUtils.findMatchingStepdoc(stepBody, keyword);
 
-        var markerStart = {line: stepStartLine, ch: 0};
+            var markerStart = {line: stepStartLine, ch: 0};
-        var lastStepLineHandle = this.editor.getLineHandle(stepEndLine);
+            var lastStepLineHandle = editor.getLineHandle(stepEndLine);
-        var markerEnd = {line: stepEndLine, ch: lastStepLineHandle.text.length};
-        var matchedStepClassName = "matched-step";
-        var stepParameterClassName = "step-parameter";
+            var markerEnd = {line: stepEndLine, ch: lastStepLineHandle.text.length};
+            var matchedStepClassName = "matched-step";
+            var stepParameterClassName = "step-parameter";
 
-        // remove any matched-step markers
+            // remove any matched-step markers
-        var markersBefore = this.editor.getDoc().findMarks(markerStart, markerEnd);
+            var markersBefore = editor.getDoc().findMarks(markerStart, markerEnd);
-        if (markersBefore.length > 0) {
-            // always remove any existing marks, so that we include newly edited text in the marked range
-            for (var m = 0; m < markersBefore.length; m++) {
-                var marker = markersBefore[m];
-                var markerClassName = marker.className;
-                if (markerClassName.substring(0, matchedStepClassName.length) == matchedStepClassName
-                    || markerClassName.substring(0, stepParameterClassName.length) == stepParameterClassName) {
-                    marker.clear();
-                }
-            }
-        }
+            if (markersBefore.length > 0) {
+                // always remove any existing marks, so that we include newly edited text in the marked range
+                for (var m = 0; m < markersBefore.length; m++) {
+                    var marker = markersBefore[m];
+                    var markerClassName = marker.className;
+                    if (markerClassName.substring(0, matchedStepClassName.length) == matchedStepClassName
+                        || markerClassName.substring(0, stepParameterClassName.length) == stepParameterClassName) {
+                        marker.clear();
+                    }
+                }
+            }
 
-        if (findResult != null) {
+            if (findResult != null) {
 
-            var stepDocId = findResult.stepDoc.id;
+                var stepDocId = findResult.stepDoc.id;
 
-            // set matched-step markers
-            var options = new Object();
-            options.className = matchedStepClassName + " " + matchedStepClassName + "-" + stepDocId;
+                // set matched-step markers
+                var options = new Object();
+                options.className = matchedStepClassName + " " + matchedStepClassName + "-" + stepDocId;
-            this.editor.getDoc().markText(markerStart, markerEnd, options);
+                editor.getDoc().markText(markerStart, markerEnd, options);
 
-            // match any parameters
-            // obtain boundaries of any parameters
-            var parameterGroupsInfos = [];
-            var parameterGroups = findResult.stepDoc.parameterGroups;
-            if (parameterGroups.length > 0) {
-                var pos = 0;
-                var lineOffset = keywordPart.split("\n").length - 1;
-                for (var j = 1; j < findResult.result.length; j++) {
-                    var matchedGroup = findResult.result[j];
-                    if (parameterGroups.indexOf(j) > -1) {
-                        var pgi = new Object();
-                        pgi.number = j;
-                        pgi.text = matchedGroup;
-                        pgi.startIndex = pos;
-                        pgi.startLineOffset = lineOffset;
-                        pgi.endIndex = pos + matchedGroup.length;
-                        pgi.endLineOffset = lineOffset + (matchedGroup.split("\n").length - 1);
+                // match any parameters
+                // obtain boundaries of any parameters
+                var parameterGroupsInfos = [];
+                var parameterGroups = findResult.stepDoc.parameterGroups;
+                if (parameterGroups.length > 0) {
+                    var pos = 0;
+                    var lineOffset = keywordPart.split("\n").length - 1;
+                    for (var j = 1; j < findResult.result.length; j++) {
+                        var matchedGroup = findResult.result[j];
+                        if (parameterGroups.indexOf(j) > -1) {
+                            var pgi = new Object();
+                            pgi.number = j;
+                            pgi.text = matchedGroup;
+                            pgi.startIndex = pos;
+                            pgi.startLineOffset = lineOffset;
+                            pgi.endIndex = pos + matchedGroup.length;
+                            pgi.endLineOffset = lineOffset + (matchedGroup.split("\n").length - 1);
 
-                        // obtain line number and ch position
-                        // start
-                        pgi.startLine = stepStartLine + pgi.startLineOffset;
-                        var beforeParam = stepBody.substring(0, pgi.startIndex);
-                        var lastLineBreakInBefore = beforeParam.lastIndexOf("\n");
-                        var parameterStartLineCh;
-                        if (lastLineBreakInBefore > -1) {
-                            parameterStartLineCh = pgi.startIndex - lastLineBreakInBefore - 1;
-                        } else {
-                            parameterStartLineCh = pgi.startIndex;
-                        }
-                        if (pgi.startLineOffset == 0) {
-                            // need to add the length of starting word also if on line 1
-                            parameterStartLineCh += keywordPart.length;
-                        }
-                        pgi.startLineCh = parameterStartLineCh;
-                        // end
-                        pgi.endLine = stepStartLine + pgi.endLineOffset;
-                        var includingParam = stepBody.substring(0, pgi.startIndex + pgi.text.length);
-                        var lastLineBreakInIncludingParam = includingParam.lastIndexOf("\n");
-                        var parameterEndLineCh;
-                        if (lastLineBreakInIncludingParam > -1) {
-                            parameterEndLineCh = pgi.startIndex + pgi.text.length - lastLineBreakInIncludingParam - 1;
-                        } else {
-                            parameterEndLineCh = pgi.startIndex + pgi.text.length;
-                        }
-                        if (pgi.endLineOffset == 0) {
-                            // need to add the length of starting word also
-                            parameterEndLineCh += keywordPart.length;
-                        }
-                        pgi.endLineCh = parameterEndLineCh;
+                            // obtain line number and ch position
+                            // start
+                            pgi.startLine = stepStartLine + pgi.startLineOffset;
+                            var beforeParam = stepBody.substring(0, pgi.startIndex);
+                            var lastLineBreakInBefore = beforeParam.lastIndexOf("\n");
+                            var parameterStartLineCh;
+                            if (lastLineBreakInBefore > -1) {
+                                parameterStartLineCh = pgi.startIndex - lastLineBreakInBefore - 1;
+                            } else {
+                                parameterStartLineCh = pgi.startIndex;
+                            }
+                            if (pgi.startLineOffset == 0) {
+                                // need to add the length of starting word also if on line 1
+                                parameterStartLineCh += keywordPart.length;
+                            }
+                            pgi.startLineCh = parameterStartLineCh;
+                            // end
+                            pgi.endLine = stepStartLine + pgi.endLineOffset;
+                            var includingParam = stepBody.substring(0, pgi.startIndex + pgi.text.length);
+                            var lastLineBreakInIncludingParam = includingParam.lastIndexOf("\n");
+                            var parameterEndLineCh;
+                            if (lastLineBreakInIncludingParam > -1) {
+                                parameterEndLineCh = pgi.startIndex + pgi.text.length - lastLineBreakInIncludingParam - 1;
+                            } else {
+                                parameterEndLineCh = pgi.startIndex + pgi.text.length;
+                            }
+                            if (pgi.endLineOffset == 0) {
+                                // need to add the length of starting word also
+                                parameterEndLineCh += keywordPart.length;
+                            }
+                            pgi.endLineCh = parameterEndLineCh;
 
-                        parameterGroupsInfos.push(pgi);
-                    }
-                    pos += matchedGroup.length;
-                    var linesInGroup = matchedGroup.split(/\n/).length;
-                    lineOffset += (linesInGroup - 1);
-                }
+                            parameterGroupsInfos.push(pgi);
+                        }
+                        pos += matchedGroup.length;
+                        var linesInGroup = matchedGroup.split(/\n/).length;
+                        lineOffset += (linesInGroup - 1);
+                    }
 
-                // mark any step parameters
-                var parameterIndex = 0;
-                for (var k = 0; k < parameterGroupsInfos.length; k++) {
-                    var pgi = parameterGroupsInfos[k];
-                    var paramStart = {line: pgi.startLine, ch: pgi.startLineCh};
-                    var paramEnd = {line: pgi.endLine, ch: pgi.endLineCh};
-                    var paramMarkerOptions = new Object();
-                    paramMarkerOptions.className = stepParameterClassName + " " + stepParameterClassName + "-" + parameterIndex;
+                    // mark any step parameters
+                    var parameterIndex = 0;
+                    for (var k = 0; k < parameterGroupsInfos.length; k++) {
+                        var pgi = parameterGroupsInfos[k];
+                        var paramStart = {line: pgi.startLine, ch: pgi.startLineCh};
+                        var paramEnd = {line: pgi.endLine, ch: pgi.endLineCh};
+                        var paramMarkerOptions = new Object();
+                        paramMarkerOptions.className = stepParameterClassName + " " + stepParameterClassName + "-" + parameterIndex;
-                    this.editor.getDoc().markText(paramStart, paramEnd, paramMarkerOptions);
+                        editor.getDoc().markText(paramStart, paramEnd, paramMarkerOptions);
-                    parameterIndex++;
-                }
+                        parameterIndex++;
+                    }
 
-            }
+                }
 
-        }
+            }
 
-        storyController.debug("# remarkStep");
+            debug("# remarkStep");
-    }
+        }
 
-
-    this.realignStepTableParameters = function (stepStartLine, stepEndLine) {
-
-        storyController.debug("> realignStepTableParameters");
-
-        var firstTableLine = storyController.findTabularParameterStartingLineAfter(stepStartLine, stepEndLine + 1);
-        if (firstTableLine != -1) {
-            var lastTableLine = storyController.findTabularParameterEndingLineAfter(stepStartLine, stepEndLine + 1);
-            storyController.alignTableBetween(firstTableLine, lastTableLine);
-        }
-
-        storyController.debug("# realignStepTableParameters");
-    }
-
-    this.remarkStepBetween = function (stepStartLine, stepEndLine) {
+        this.remarkStepBetween = function (stepStartLine, stepEndLine) {
 
-        storyController.debug("> remarkStepBetween");
-        storyController.debug("stepStartLine - " + stepStartLine + ", stepEndLine - " + stepEndLine);
+            debug("> remarkStepBetween");
 
-        var step = "";
+            var step = "";
-        this.editor.getDoc().eachLine(stepStartLine, stepEndLine + 1, function (lineHandle) {
+            editor.getDoc().eachLine(stepStartLine, stepEndLine + 1, function (lineHandle) {
-            step += lineHandle.text + "\n";
-        });
+                step += lineHandle.text + "\n";
+            });
 
-        this.remarkStep(stepStartLine, stepEndLine, step);
+            this.remarkStep(stepStartLine, stepEndLine, step);
 
-        this.realignStepTableParameters(stepStartLine, stepEndLine);
-
-        storyController.debug("# remarkStepBetween");
+            debug("# remarkStepBetween");
-    }
+        }
 
-    this.remarkStepsBetween = function (scanStartLine, scanEndLine) {
+        this.remarkStepsOnChange = function (changeObj) {
 
-        storyController.debug("> remarkStepsBetween");
-        storyController.debug("scanStartLine - " + scanStartLine + ", scanEndLine - " + scanEndLine);
+            debug("> remarkStepsOnChange");
 
-        var stepStartLine = scanStartLine;
-        var stepEndLine = this.findLastStepLineFrom(scanStartLine);
+            var from = changeObj.from;
+            var to = changeObj.to;
 
-        this.remarkStepBetween(stepStartLine, stepEndLine);
+            var fromLine = from.line;
+            var toLine = to.line;
 
-        while (stepEndLine < scanEndLine) {
-            stepStartLine = stepEndLine + 1;
-            stepEndLine = this.findLastStepLineFrom(stepStartLine);
-            if (this.lineStartsWithStepKeyword(stepStartLine)) {
-                this.remarkStepBetween(stepStartLine, stepEndLine);
-            }
-        }
-
-        storyController.debug("# remarkStepsBetween");
-    }
-
-    this.remarkStepsOnChange = function (editor, changeObj) {
-
-        storyController.debug("> onEditorChangeHandler");
-
-        var fromLine = changeObj.from.line;
-        var toLine = changeObj.to.line;
-
-        // update toLine if the edited text contains more than one line and the result is greater than current toLine
-        var linesInChangedText = changeObj.text.length;
-        var toLineAfterChange = fromLine + (linesInChangedText - 1);
-        if (toLineAfterChange > toLine) {
-            toLine = toLineAfterChange;
-        }
+            // update toLine if the edited text contains more than one line and the result is greater than current toLine
+            var linesInChangedText = changeObj.text.length;
+            var toLineAfterChange = fromLine + (linesInChangedText - 1);
+            if (toLineAfterChange > toLine) {
+                toLine = toLineAfterChange;
+            }
 
-        var scanStartLine;
-
-        // find a step which starts before or at fromLine
+            // find a step which starts before or at fromLine
-        var previousStepStartingLine = this.findStepStartingLineBefore(fromLine);
-        if (previousStepStartingLine > -1) {
-            scanStartLine = previousStepStartingLine;
+            var stepStartingLine = this.findStepStartingLineBefore(fromLine);
+            var scanStartLine;
+            if (stepStartingLine > -1) {
+                scanStartLine = stepStartingLine;
-        } else {
+            } else {
-            // we are not inside the step, so ignore event
-            scanStartLine = fromLine;
-        }
+                scanStartLine = fromLine;
+            }
 
-        if (scanStartLine != null) {
             // find scanEndLine
-            var scanEndLine = this.findLastStepLineFrom(toLine);
-
+            var scanEndLine = this.findLastStepLineFrom(scanStartLine);
+            this.remarkStepBetween(scanStartLine, scanEndLine);
+//                tableAligner.realignStepTableParameters(scanStartLine, scanEndLine);
             var nextStepStartLine = this.findStepStartingLineInSameScenarioAfter(scanEndLine);
+            var startsWithAnd;
             if (nextStepStartLine != -1) {
-                var startsWithAnd = this.lineStartsWithAndKeyword(nextStepStartLine);
-                while (nextStepStartLine != -1 && startsWithAnd) {
-                    scanEndLine = this.findLastStepLineFrom(nextStepStartLine);
+                startsWithAnd= this.lineStartsWithAndKeyword(nextStepStartLine);
+            }
+            while (nextStepStartLine != -1 && (nextStepStartLine <= toLine || startsWithAnd)) {
+                scanStartLine = nextStepStartLine;
+                scanEndLine = this.findLastStepLineFrom(scanStartLine);
+                this.remarkStepBetween(scanStartLine, scanEndLine);
+//                        tableAligner.realignStepTableParameters(scanStartLine, scanEndLine);
-                    nextStepStartLine = this.findStepStartingLineInSameScenarioAfter(scanEndLine);
-                    if (nextStepStartLine != -1) {
-                        startsWithAnd = this.lineStartsWithAndKeyword(nextStepStartLine);
-                    }
-                }
+                nextStepStartLine = this.findStepStartingLineInSameScenarioAfter(scanEndLine);
+                if (nextStepStartLine != -1) {
+                    startsWithAnd = this.lineStartsWithAndKeyword(nextStepStartLine);
+                }
+            }
-            }
 
-            this.remarkStepsBetween(scanStartLine, scanEndLine);
-        }
+            if (prefs.autoAlignTables) {
 
-        storyController.debug("# onEditorChangeHandler");
+                var fromLineHandler = editor.getLineHandle(fromLine);
+                var isTableLine = textUtils.startsWithTableSeparator(fromLineHandler.text);
+                var tableStartingLine = fromLine;
+                if (isTableLine) {
+                    // potentially table started before the current from edit line
+                    var previousNoneEmptyLine = editorUtils.findNonEmptyLineBefore(fromLine);
+                    while (previousNoneEmptyLine != -1) {
+                        var previousLineText = editor.getLineHandle(previousNoneEmptyLine).text;
+                        if (textUtils.startsWithTableSeparator(previousLineText)) {
+                            tableStartingLine = previousNoneEmptyLine;
+                            previousNoneEmptyLine = editorUtils.findNonEmptyLineBefore(previousNoneEmptyLine);
+                        } else {
+                            break;
-    }
+                        }
-
-    this.onEditorChangeHandler = function (editor, changeObj) {
-
-        storyController.debug("> onEditorChangeHandler");
-
-        if (storyController.storyChanged == false) {
-            var saveCancelMsg = execspec.viewissuepage.showstory.renderSaveCancelMsg();
-            storyController.showWarningMessage(saveCancelMsg);
-        }
+                    }
-        storyController.storyChanged = true;
-
-        storyController.remarkStepsOnChange(editor, changeObj);
-
-        storyController.debug("# onEditorChangeHandler");
+                } else {
+                    // this is a not a table line so maybe we have inserted some text that although does not start with a table line, it
+                    // contains table lines
+                    tableStartingLine = editorUtils.findTabularParameterStartingLineAfter(fromLine, toLine);
-    }
+                }
 
-    this.showWarningMessage = function (saveCancelMsg) {
-        AJS.$("#storyMsgBar").empty();
-        AJS.messages.warning("#storyMsgBar", {
-            title: null,
-            id: "storyWarningMsg",
-            body: saveCancelMsg,
-            closeable: false
-        });
+                while (tableStartingLine != -1) {
+                    // we have found at least one table in the edited text
+                    var tableEndingLine = editorUtils.findTabularParameterEndingLineAfter(tableStartingLine, editor.lineCount() - 1);
+                    if (tableEndingLine > tableStartingLine) {
+                        // it actually a table, i.e. more than 1 line of text that starts with a '|'
+                        tableAligner.alignTableBetween(tableStartingLine, tableEndingLine);
-    }
+                    }
+                    tableStartingLine = editorUtils.findTabularParameterStartingLineAfter(tableEndingLine, toLine);
+                }
 
-    this.showSuccessMessage = function (saveCancelMsg) {
-
-//        JIRA.Messages.showSuccessMsg("Story updated successfully");
-        AJS.$("#storyMsgBar").empty();
-        AJS.messages.success("#storyMsgBar", {
-            title: null,
-            fadeout: true,
-            delay: 3000,
-            body: saveCancelMsg,
-            closeable: true
-        });
+                // we are not inside a step, but we maybe modifying the examples table which may need realigning
+//                this.remarkStepBetween(scanStartLine, scanEndLine);
-    }
+            }
+            debug("# remarkStepsOnChange");
+        }
 
-    this.loadStory = function () {
-
-        this.debug("> loadStory");
-
-        var issueKey = pageUtils.getIssueKey();
-        var projectKey = pageUtils.getProjectKey();
-
-        storyService.find(projectKey, issueKey,
-
-            function (storyPayload) {
-
-                storyController.debug("> loadStory.callback");
-
-                if (storyPayload != undefined) {
-                    storyController.debug("found storyPayload - " + JSON.stringify(storyPayload, null, "\t"));
+        this.findNonEmptyLineBefore = function (line) {
+            var previousLine = line - 1;
+            while (previousLine >= 0) {
+                var previousLineHandle = editor.getLineHandle(previousLine);
+                if (previousLineHandle == null) {
+                    return -1;
                 } else {
-                    storyController.debug("no story found for project - " + projectKey + ", issue - " + issueKey);
-                    storyPayload = new StoryModel();
-                    storyPayload.projectKey = pageUtils.getProjectKey();
-                    storyPayload.issueKey = pageUtils.getIssueKey();
-                    storyPayload.asString = "";
+                    var text = previousLineHandle.text;
+                    text = text.replace(/\s+$/g, '');
+                    if (text.length > 0) {
+                        return previousLine;
+                    } else {
+                        previousLine++;
-                }
+                    }
-
-                storyController.showStory(storyPayload);
-
-                storyController.debug("# loadStory.callback");
-            }
+                }
-        );
+            }
+            return -1;
+        }
 
-        this.debug("# loadStory");
     }
 
-    this.showStory = function (storyModel) {
+    function StepDocUtils() {
 
-        this.debug("> showStory");
+        this.findMatchingStepdoc = function (step, stepType) {
 
-        this.currentStory = storyModel;
+            debug("> findMatchingStepdoc");
 
-        this.editor.off("change", storyController.onEditorChangeHandler);
-        this.editor.setValue(storyModel.asString);
-        this.editor.on("change", storyController.onEditorChangeHandler);
+            // check if step matches
+            var matchedResult = null;
+            var matchingStepDoc = null;
+            {
+                step = step.replace(/\s+$/g, ''); // trim trailing whitespace;
 
-        storyController.storyChanged = false;
-
-        this.editor.setOption("readOnly", false);
-
-        this.debug("# showStory");
-
-        // rescan step matching
-        var firstStepStartingLine = this.findStepStartingLineAfter(-1);
-        if (firstStepStartingLine != -1) {
-            var lastStepStartingLine = this.findStepStartingLineBefore(this.editor.lineCount());
-            var lastStepEndingLine = this.findLastStepLineFrom(lastStepStartingLine);
-            this.remarkStepsBetween(firstStepStartingLine, lastStepEndingLine);
+                for (var i = 0; i < stepDocs.length; i++) {
+                    var stepDoc = stepDocs[i];
+                    if (stepDoc.startingWord == stepType) {
+                        // try to see if the step docs pattern matches step body
+                        var regExpStr = stepDoc.groupedRegExpPattern;
+                        // replace the (.*) with ([\s\S]*) for javascript version of dotall option
+                        var replacePattern = new RegExp("\\(\\.\\*\\)", "g");
+                        regExpStr = regExpStr.replace(replacePattern, "([\\s\\S]*)");
+                        // add start and end chars to match the string exactly
+                        regExpStr = "^" + regExpStr + "$";
+                        debug("Trying to match the step body against pattern - " + regExpStr);
+                        var regExpPattern = new RegExp(regExpStr);
+                        var matchedResult = regExpPattern.exec(step);
+                        if (matchedResult != null) {
+                            debug("Step pattern - " + regExpStr + " matches current step body");
+                            matchingStepDoc = stepDoc;
+                            return new Object({result: matchedResult, stepDoc: matchingStepDoc});
+                            break;
-        }
+                        }
-
-        if (storyModel.version != null) {
-            // this is NOT a new story, so check and show any story reports
-            var projectKey = storyModel.projectKey;
-            var issueKey = storyModel.issueKey;
-            storyService.findStoryReports(projectKey, issueKey,
-                function (storyReportsPayload) {
-
-                    storyController.debug("> findStoryReports.callback");
-
-                    if (storyReportsPayload != undefined && storyReportsPayload.storyTestReports.length != 0) {
-                        storyController.debug("found storyReportsPayload - " + JSON.stringify(storyReportsPayload, null, "\t"));
-                        storyController.showStoryReports(storyReportsPayload.storyTestReports);
-                    } else {
-                        storyController.debug("no story reports were found for project - " + projectKey + ", issue - " + issueKey);
                     }
-
-                    storyController.debug("# findStoryReports.callback");
                 }
-            );
-
-        }
+            }
-    }
 
-    this.showStoryReports = function (storyTestReports) {
+            debug("# findMatchingStepdoc");
 
-        this.debug("> showStoryReports");
-
-        var templateParam = new Object();
-        templateParam.storyTestReports = storyTestReports;
-        templateParam.currentStoryVersion = storyController.currentStory.version;
-
-        var storyReportsContent = execspec.viewissuepage.showstoryreports.renderStoryReports(templateParam);
-
-        AJS.$('#storyReportsPanel').html(storyReportsContent);
-        AJS.tabs.setup();
-
-        this.debug("# showStoryReports");
+            return null;
-    }
+        }
+    }
 
-    this.saveStory = function () {
+    function ButtonHandler() {
 
-        var storyBeingSaved = new StoryModel();
-        storyBeingSaved.projectKey = this.currentStory.projectKey;
-        storyBeingSaved.issueKey = this.currentStory.issueKey;
-        storyBeingSaved.version = this.currentStory.version;
-        var storyInputAsText = this.editor.getValue();
-        storyBeingSaved.asString = storyInputAsText;
+        this.saveStoryHandler = function (event) {
 
-        var storyPayload = JSON.stringify(storyBeingSaved, null, "\t");
-        this.debug("saving story:\n" + storyPayload);
+            debug("> saveStoryHandler");
+            event.preventDefault();
 
-        this.editor.setOption("readOnly", true);
+            var storyModel = new StoryModel();
+            storyModel.projectKey = loadedStory.projectKey;
+            storyModel.issueKey = loadedStory.issueKey;
+            storyModel.version = loadedStory.version;
+            storyModel.asString = editor.getValue();
 
-        var waitingMsg = execspec.viewissuepage.showstory.renderWaitingMessage();
-        storyController.showWarningMessage(waitingMsg);
-        AJS.$('#storyEditedMsgContainer').html(waitingMsg);
-        AJS.$('.save-story-button-spinner').spin();
-        this.showSavingMode();
+            editor.setOption("readOnly", true);
+            msgBar.showSavingMsg();
 
-        storyService.saveOrUpdateStory(storyPayload, function (savedStory) {
-            storyController.debug("> saveOrUpdateStory callback");
-//            storyView.showStoryReportButtons(savedStory);
-            var jsonStory = JSON.stringify(savedStory, null, "\t");
-            storyController.debug("saved story:\n" + jsonStory);
-
-            storyController.showSuccessMessage("Story was saved successfully!");
-            storyController.showStory(savedStory);
-            storyController.debug("# saveOrUpdateStory callback");
-            storyController.unfocusEditor();
-        });
-
+            restService.saveOrUpdateStory(storyModel);
+            debug("# saveStoryHandler");
-    }
+        }
 
-    this.saveStoryHandler = function (event) {
-
-        this.debug("> saveStoryHandler");
-        event.preventDefault();
-        storyController.saveStory();
-        this.debug("# saveStoryHandler");
-    }
-
-    this.cancelEditHandler = function (event) {
+        this.cancelEditHandler = function (event) {
-
-        this.debug("> cancelEditingStory");
+            debug("> cancelEditingStory");
-        event.preventDefault();
+            event.preventDefault();
-
-        storyController.showStory(this.currentStory);
-
-        //hide story edited message
-        AJS.$("#storyMsgBar").empty();
-        storyController.unfocusEditor();
-
-        this.debug("# cancelEditingStory");
+            storyController.showStory(loadedStory);
+            msgBar.clear();
+            debug("# cancelEditingStory");
-    }
+        }
-
-}
+    }
+}
 
+
+var storyController;
 AJS.$(function () {
 
-    var ctr = new StoryController();
-    ctr.init();
+    storyController = new StoryController();
 
     // handling page updates in response to inline editing of other jira fields
     JIRA.bind(JIRA.Events.NEW_CONTENT_ADDED, function (e, context, reason) {
         if (reason != "inlineEditStarted ") {
-            var ctr = new StoryController();
-            ctr.init();
+            storyController = new StoryController();
         }
 //        if (reason == JIRA.CONTENT_ADDED_REASON.pageLoad) {
 //        if (storyController == null) {
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryEditHandler.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryEditHandler.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryEditHandler.js	(revision Shelved version)
@@ -1,34 +1,34 @@
-var editButtonHandler;
-
-function StoryEditHandler() {
-
-    editButtonHandler = this;
-
-    this.debugOn = true;
-
-    this.debug = function (msg) {
-        if (this.debugOn) {
-            console.log("[DEBUG StoryEditHandler] " + msg);
-        }
-    }
-
-    this.init = function () {
-        this.debug("initialized");
-    }
-
-
-    this.saveStory = function (event) {
-
-        this.debug("> saveStory");
-
-        this.bindInputElementsToModel();
-
-        // remove the asString field as we are saving from the rich editor
-        storyController.currentStory.asString = null;
-        storyController.saveStoryAsModel();
-
-        event.preventDefault();
-        this.debug("# saveStory");
-    }
-
-}
\ No newline at end of file
+//var editButtonHandler;
+//
+//function StoryEditHandler() {
+//
+//    editButtonHandler = this;
+//
+//    this.debugOn = true;
+//
+//    this.debug = function (msg) {
+//        if (this.debugOn) {
+//            console.log("[DEBUG StoryEditHandler] " + msg);
+//        }
+//    }
+//
+//    this.init = function () {
+//        this.debug("initialized");
+//    }
+//
+//
+//    this.saveStory = function (event) {
+//
+//        this.debug("> saveStory");
+//
+//        this.bindInputElementsToModel();
+//
+//        // remove the asString field as we are saving from the rich editor
+//        storyController.currentStory.asString = null;
+//        storyController.saveStoryAsModel();
+//
+//        event.preventDefault();
+//        this.debug("# saveStory");
+//    }
+//
+//}
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryService.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/StoryService.js	(revision Shelved version)
@@ -1,242 +1,87 @@
-function StoryService() {
-
-    this.debugOn = true;
-
-    var pathBase = "/jira/rest/jbehave-for-jira/1.0/";
-
-    // story paths
-    var pathSave = pathBase + "crud/save/";
-    var pathFind = pathBase + "find/for-issue/";
-    var pathDelete = pathBase + "crud/delete/";
-
-    // story reports paths
-    var pathFindReports = pathBase + "story-test/find/";
-    var pathDeleteReports = pathBase + "story-test/delete/";
-
-    // other paths
-    var pathAutoComplete = pathBase + "autocomplete/";
-
-    this.debug = function (msg) {
-        if (this.debugOn) {
-            console.log("[DEBUG StoryService] " + msg);
-        }
-    }
-
-    this.init = function () {
-
-        storyService.debug("> init");
-        storyService.debug("urlPathBase - " + pathBase);
-        storyService.debug("saveBaseUrl - " + pathSave);
-        storyService.debug("# init");
-    }
-
-    this.saveOrUpdateStory = function (storyPayload, callBack) {
-
-        storyService.debug("> saveOrUpdateStory");
-        storyService.debug("storyPayload - " + storyPayload);
-//        var storyAsString = storyPayload.asString;
-//        storyService.debug("storyAsString - " + storyAsString);
-
-        var successCallback = function (data, status, xhr) {
-            storyService.debug("> StoryService.saveOrUpdateStory.successCallback");
-            storyService.debug("status - " + status);
-            storyService.debug("xhr.status - " + xhr.status);
-            storyService.debug("data - " + data);
-            var jsonData = JSON.stringify(data);
-            storyService.debug("jsonData - " + jsonData);
-            callBack(data);
-            storyService.debug("# StoryService.saveOrUpdateStory.successCallback");
-        }
-
-        var saveUrl = pathSave + storyPayload.projectKey + "/" + storyPayload.issueKey;
-        if (storyPayload.version != undefined && storyPayload.version != "") {
-            saveUrl += "?version=" + storyPayload.version;
-        }
-        storyService.debug("saveUrl - " + saveUrl);
-
-        AJS.$.ajax({
-            type: "POST",
-            url: saveUrl,
-            contentType: "text/plain; charset=utf-8",
-            success: successCallback,
-            data: storyPayload,
-            dataType: "json"
-        });
-
-//        jqxhr.done(successCallback);
-//        jqxhr.fail(function (data, status, xhr) {
-//            console.error("fail, received data - " + data);
-//            console.error("xhr.status - " + xhr.status);
-//        });
-
-//        jqxhr.always(function (data, status, xhr) {
-//            console.error("always, received data - " + data);
-//            console.error("xhr.status - " + xhr.status);
-//        });
-
-        storyService.debug("# StoryService.saveOrUpdateStory");
-    }
-
-    this.find = function (projectKey, issueKey, callBack) {
-
-        storyService.debug("> StoryService.find");
-        storyService.debug("project key " + projectKey + ", issue key = " + issueKey);
-        var urlString = pathFind + projectKey + "/" + issueKey;
-        var jqxhr = AJS.$.getJSON(urlString);
-
-        var successCallback = function (data, status, xhr) {
-            storyService.debug("> StoryService.find.successCallback");
-            storyService.debug("status - " + status);
-            storyService.debug("xhr.status - " + xhr.status);
-            storyService.debug("data - " + data);
-            callBack(data);
-            storyService.debug("# StoryService.find.successCallback");
-        }
-        jqxhr.done(successCallback);
-
-        jqxhr.fail(function (data, status, xhr) {
-            console.error("fail, received data - " + data);
-            console.error("xhr.status - " + xhr.status);
-        });
-        storyService.debug("# StoryService.find");
-    }
-
-    this.findStoryReports = function (projectKey, issueKey, callBack) {
-
-        storyService.debug("> StoryService.findStoryReports");
-        storyService.debug("project key " + projectKey + ", issue key = " + issueKey);
-
-        var urlString = pathFindReports + projectKey + "/" + issueKey;
-
-        var jqxhr = AJS.$.getJSON(urlString);
-
-        var successCallback = function (data, status, xhr) {
-            storyService.debug("> StoryService.findStoryReports.successCallback");
-            storyService.debug("status - " + status);
-            storyService.debug("xhr.status - " + xhr.status);
-            storyService.debug("data - " + data);
-            callBack(data);
-            storyService.debug("# StoryService.findStoryReports.successCallback");
-        }
-        jqxhr.done(successCallback);
-
-        jqxhr.fail(function (data, status, xhr) {
-            console.error("fail, received data - " + data);
-            console.error("xhr.status - " + xhr.status);
-        });
-        storyService.debug("# StoryService.findStoryReports");
-    }
-
-    this.deleteStory = function (projectKey, issueKey, callBack) {
-
-        storyService.debug("> StoryService.deleteStory");
-        storyService.debug("haha");
-        storyService.debug("projectKey - " + projectKey);
-        storyService.debug("issueKey - " + issueKey);
-
-        var urlString = pathDelete + projectKey + "/" + issueKey;
-        storyService.debug("urlString - " + urlString);
-
-        var successCallBack = function () {
-            storyService.debug("Story deleted successfully");
-            callBack();
-        };
-
-        AJS.$.ajax({
-            type: "DELETE",
-            url: urlString,
-            success: successCallBack
-        });
-
-        storyService.debug("# StoryService.deleteStory");
-    }
-
-    this.deleteStoryReports = function (projectKey, issueKey, callBack) {
-
-        storyService.debug("> StoryService.deleteStoryReports");
-        storyService.debug("projectKey - " + projectKey);
-        storyService.debug("issueKey - " + issueKey);
-
-        var urlString = pathDeleteReports + projectKey + "/" + issueKey;
-        storyService.debug("urlString - " + urlString);
-
-        var successCallback = function () {
-            storyService.debug("story reports deleted successfully");
-            callBack();
-        };
-
-        AJS.$.ajax({
-            type: "DELETE",
-            url: urlString,
-            success: successCallback
-        });
-
-        storyService.debug("# StoryService.deleteStoryReports");
-    }
-
-    this.autoComplete = function (projectKey, input, callBack) {
-
-        storyService.debug("> StoryService.autoComplete");
-        storyService.debug("projectKey - " + projectKey);
-        storyService.debug("input - " + input);
-
-        var urlString = pathAutoComplete + projectKey;
-        storyService.debug("urlString - " + urlString);
-
-        var successCallback = function (data, status, xhr) {
-            storyService.debug("> StoryService.autoComplete.successCallback");
-            storyService.debug("status - " + status);
-            storyService.debug("xhr.status - " + xhr.status);
-            storyService.debug("data - " + data);
-            callBack(data);
-            storyService.debug("# StoryService.autoComplete.successCallback");
-        };
-
-        AJS.$.ajax({
-            type: "POST",
-            url: urlString,
-            contentType: "text/plain; charset=utf-8",
-            success: successCallback,
-            data: input,
-            dataType: "json"
-        });
-
-        storyService.debug("# StoryService.autoComplete");
-    }
-
-    this.fetchStepDocs = function (projectKey, callback) {
-
-        this.debug("> fetchStepDocs");
-        this.debug("projectKey - " + projectKey);
-
-        var pathBase = "/jira/rest/jbehave-for-jira/1.0/";
-        var pathStepDocs = pathBase + "step-doc/for-project/" + projectKey;
-        this.debug("pathStepDocs - " + pathStepDocs);
-
-        var storyService = this;
-        var successCallback = function (data, status, xhr) {
-            storyService.debug("> fetchStepDocs.successCallback");
-            storyService.debug("status - " + status);
-            storyService.debug("xhr.status - " + xhr.status);
-            storyService.debug("data - " + data);
-
-            storyService.debug("found step docs - " + JSON.stringify(data, null, "\t"));
-
-            callback(data.stepDocs);
-
-            storyService.debug("# fetchStepDocs.successCallback");
-        };
-
-        AJS.$.ajax({
-            type: "GET",
-            url: pathStepDocs,
-            contentType: "text/plain; charset=utf-8",
-            success: successCallback,
-            dataType: "json",
-            async: false
-        });
-
-        this.debug("# fetchStepDocs");
-    }
-
-}
\ No newline at end of file
+//var storyService;
+//
+//function StoryService() {
+//
+//    storyService = this;
+//
+//    this.debugOn = true;
+//
+//    var pathBase = "/jira/rest/jbehave-for-jira/1.0/";
+//
+//    // story paths
+//    var pathSave = pathBase + "crud/save/";
+//    var pathFind = pathBase + "find/for-issue/";
+//    var pathDelete = pathBase + "crud/delete/";
+//
+//    // story reports paths
+//    var pathFindReports = pathBase + "story-test/find/";
+//    var pathDeleteReports = pathBase + "story-test/delete/";
+//
+//    // other paths
+//    var pathAutoComplete = pathBase + "autocomplete/";
+//
+//    this.debug = function (msg) {
+//        if (this.debugOn) {
+//            console.log("[DEBUG StoryService] " + msg);
+//        }
+//    }
+//
+//    this.init = function () {
+//
+//        storyService.debug("> init");
+//        storyService.debug("urlPathBase - " + pathBase);
+//        storyService.debug("saveBaseUrl - " + pathSave);
+//        storyService.debug("# init");
+//    }
+//
+//
+////    this.deleteStory = function (projectKey, issueKey, callBack) {
+////
+////        storyService.debug("> StoryService.deleteStory");
+////        storyService.debug("haha");
+////        storyService.debug("projectKey - " + projectKey);
+////        storyService.debug("issueKey - " + issueKey);
+////
+////        var urlString = pathDelete + projectKey + "/" + issueKey;
+////        storyService.debug("urlString - " + urlString);
+////
+////        var successCallBack = function () {
+////            storyService.debug("Story deleted successfully");
+////            callBack();
+////        };
+////
+////        AJS.$.ajax({
+////            type: "DELETE",
+////            url: urlString,
+////            success: successCallBack
+////        });
+////
+////        storyService.debug("# StoryService.deleteStory");
+////    }
+//
+////    this.deleteStoryReports = function (projectKey, issueKey, callBack) {
+////
+////        storyService.debug("> StoryService.deleteStoryReports");
+////        storyService.debug("projectKey - " + projectKey);
+////        storyService.debug("issueKey - " + issueKey);
+////
+////        var urlString = pathDeleteReports + projectKey + "/" + issueKey;
+////        storyService.debug("urlString - " + urlString);
+////
+////        var successCallback = function () {
+////            storyService.debug("story reports deleted successfully");
+////            callBack();
+////        };
+////
+////        AJS.$.ajax({
+////            type: "DELETE",
+////            url: urlString,
+////            success: successCallback
+////        });
+////
+////        storyService.debug("# StoryService.deleteStoryReports");
+////    }
+//
+//
+//
+//}
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/soy/TemplatesShowStory.soy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/soy/TemplatesShowStory.soy	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/soy/TemplatesShowStory.soy	(revision Shelved version)
@@ -20,8 +20,8 @@
 {template .renderSaveCancelMsg}
 <div id="storyEditedMsgContainer">
     <span>Story has been modified! <span
-        class="edit-operation-link"><a href="#" onclick="storyController.saveStoryHandler(event)">Save</a></span> or <span
-        class="edit-operation-link"><a href="#" onclick="storyController.cancelEditHandler(event)">Cancel</a></span></span>
+        class="edit-operation-link"><a href="#" onclick="storyController.buttonHandler.saveStoryHandler(event)">Save</a></span> or <span
+        class="edit-operation-link"><a href="#" onclick="storyController.buttonHandler.cancelEditHandler(event)">Cancel</a></span></span>
 </div>
 {/template}
 
@@ -30,7 +30,7 @@
  */
 {template .renderWaitingMessage}
  <div>
-    <div class="firstDiv">Saving&nbsp;&nbsp;&nbsp;&nbsp;</div>
+    <div class="savingMsgDiv">Saving&nbsp;&nbsp;&nbsp;&nbsp;</div>
     <div class="save-story-button-spinner"></div>
 </div>
 //    <table>
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml	(revision Shelved version)
@@ -37,7 +37,7 @@
         </transformation>
         <!--js-->
         <!--these custom scripts need to be loaded first as jbehave-hint has dependency on story service-->
-        <resource type="download" name="PageUtils.js" location="/js/PageUtils.js"/>
+        <!--<resource type="download" name="PageUtils.js" location="/js/PageUtils.js"/>-->
         <resource type="download" name="StoryService.js" location="/js/StoryService.js"/>
         <resource type="download" name="StoryController.js" location="/js/StoryController.js"/>
         <resource type="download" name="StoryModel.js" location="/js/StoryModel.js"/>
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/UpdateJBehavePreferences.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/UpdateJBehavePreferences.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/UpdateJBehavePreferences.js	(revision Shelved version)
@@ -46,6 +46,7 @@
 //            // set the html of the container.
 //            $fixForContainer.html(htmlToInsert);
             console.log("jbehave preferences successfully updated");
+            storyController.onUserPreferencesUpdated();
         },
         onDialogFinished: function () {  // This function is used to define behaviour after the form has finished
             // We want to display a notification telling people that the fix version has been updated.
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/show-hint.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/show-hint.css	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/show-hint.css	(revision Shelved version)
@@ -35,6 +35,7 @@
 }
 
 .CodeMirror-hint-active {
-    background: #08f;
+    /*background: #08f;*/
+    background: lightblue;
     color: white;
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(revision Local version)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/addon/hint/jbehave-hint.js	(revision Shelved version)
@@ -13,26 +13,43 @@
 
     var stepDocs = null;
     AJS.$(function () {
-        var storyService = new StoryService();
-        var projectKey = new PageUtils().getProjectKey();
-        storyService.fetchStepDocs(projectKey, function (foundStepDocs) {
-            stepDocs = foundStepDocs;
+        var issueKey = AJS.$.trim(AJS.$("#key-val").text());
+        if (issueKey) {
+            var projectKey = issueKey.match("[A-Z]*")[0];
+            var restPathBase = "/jira/rest/jbehave-for-jira/1.0/";
+            var pathStepDocs = restPathBase + "step-doc/for-project/" + projectKey;
+            AJS.$.ajax({
+                type: "GET",
+                url: pathStepDocs,
+                contentType: "text/plain; charset=utf-8",
+                success: function (data, status, xhr) {
+                    stepDocs = data.stepDocs;
+                },
+                dataType: "json"
+//                async: false
-        });
+            });
+        } else {
+            console.error("Failed to fetch step docs from server");
+        }
     });
 
     CodeMirror.registerHelper("hint", "jbehave", function (editor, options) {
 
         options.completeSingle = false;
         options.closeOnUnfocus = false;
+
         var wordPattern = /[\w$]+/;
-        var cur = editor.getCursor();
+
+        var cursor = editor.getCursor();
+        var doc = editor.getDoc();
+
         var globalFromCh = 0;
-        var globalToCh = cur.ch;
-        var curLine = editor.getLine(cur.line);
-        var cursorPos = cur.ch;
+        var globalToCh = cursor.ch;
+        var curLine = editor.getLine(cursor.line);
+        var cursorPos = cursor.ch;
         var currentText = curLine.slice(0, cursorPos);
         var list = [];
-        var currentToken = editor.getTokenAt(cur);
+        var currentToken = editor.getTokenAt(cursor);
         var currentState = currentToken.state;
 
         var hint;
@@ -168,6 +185,128 @@
         }
 
         /**
+         * Lifecycle
+         */
+        hint = "Lifecycle:";
+        if (currentState.allowLifecycle && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-lifecycle'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Lifecycle - Before
+         */
+        hint = "Before:";
+        if (currentState.allowLifecycleBefore && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-lifecycle-before'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Lifecycle - After
+         */
+        hint = "After:";
+        if (currentState.allowLifecycleAfter && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-lifecycle-after'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Lifecycle - Outcome
+         */
+        hint = "Outcome: ";
+        if (currentState.allowLifecycleOutcome && (cursorPos == 0 || hint.indexOf(currentText) == 0)) {
+            var stepHint = new Object();
+            stepHint.text = hint;
+            stepHint.render = function (element, data, self) {
+                element.innerHTML = "<span class='cm-jb-story-lifecycle-outcome-keyword'>" + self.text + "</span>";
+            };
+            list.push(stepHint);
+        }
+
+        /**
+         * Lifecycle - Outcome value
+         */
+        if (currentState.inLifecycleOutcome && currentToken.type != null){
+
+            var currentToken = currentState.current;
+
+            hint = "ANY";
+            if (currentToken == "Outcome: " || hint.indexOf(currentToken) == 0) {
+                var stepHint = new Object();
+                stepHint.text = hint;
+                stepHint.render = function (element, data, self) {
+                    element.innerHTML = "<span class='cm-jb-story-lifecycle-outcome-value'>" + self.text + "</span>";
+                };
+                var stepHintFrom;
+                if (currentToken == "Outcome: ") {
+                    stepHintFrom = cursor.ch;
+                } else {
+                    stepHintFrom = cursor.ch - currentToken.length;
+                }
+                stepHint.from = CodeMirror.Pos(cursor.line, stepHintFrom);
+                var stepHintTo = cursor.ch;
+                stepHint.to = CodeMirror.Pos(cursor.line, stepHintTo);
+                globalFromCh = stepHint.from.ch;
+                globalToCh = stepHint.to.ch;
+                list.push(stepHint);
+            }
+            hint = "SUCCESS";
+            if (currentToken == "Outcome: " || hint.indexOf(currentToken) == 0) {
+                var stepHint = new Object();
+                stepHint.text = hint;
+                stepHint.render = function (element, data, self) {
+                    element.innerHTML = "<span class='cm-jb-story-lifecycle-outcome-value'>" + self.text + "</span>";
+                };
+                var stepHintFrom;
+                if (currentToken == "Outcome: ") {
+                    stepHintFrom = cursor.ch;
+                } else {
+                    stepHintFrom = cursor.ch - currentToken.length;
+                }
+                stepHint.from = CodeMirror.Pos(cursor.line, stepHintFrom);
+                var stepHintTo = cursor.ch;
+                stepHint.to = CodeMirror.Pos(cursor.line, stepHintTo);
+                globalFromCh = stepHint.from.ch;
+                globalToCh = stepHint.to.ch;
+                list.push(stepHint);
+            }
+            hint = "FAILURE";
+            if (currentToken == "Outcome: " || hint.indexOf(currentToken) == 0) {
+                var stepHint = new Object();
+                stepHint.text = hint;
+                stepHint.render = function (element, data, self) {
+                    element.innerHTML = "<span class='cm-jb-story-lifecycle-outcome-value'>" + self.text + "</span>";
+                };
+                var stepHintFrom;
+                if (currentToken == "Outcome: ") {
+                    stepHintFrom = cursor.ch;
+                } else {
+                    stepHintFrom = cursor.ch - currentToken.length;
+                }
+                stepHint.from = CodeMirror.Pos(cursor.line, stepHintFrom);
+                var stepHintTo = cursor.ch;
+                stepHint.to = CodeMirror.Pos(cursor.line, stepHintTo);
+                globalFromCh = stepHint.from.ch;
+                globalToCh = stepHint.to.ch;
+                list.push(stepHint);
+            }
+
+        }
+
+        /**
          * Scenario:
          */
         hint = "Scenario:";
@@ -232,9 +371,7 @@
             list.push(stepHint);
         }
 
-        var doc = editor.getDoc();
-        var cursor = editor.getCursor();
-        var doc = editor.getDoc();
+
         var lineHandle = doc.getLineHandle(cursor.line);
         var lineTextSoFar = lineHandle.text.substring(0, cursor.ch);
         var lineTextTrimmed = lineTextSoFar.replace(/\s+$/g, '');
@@ -419,8 +556,8 @@
 
         return {
             list: list,
-            from: CodeMirror.Pos(cur.line, globalFromCh),
-            to: CodeMirror.Pos(cur.line, globalToCh)
+            from: CodeMirror.Pos(cursor.line, globalFromCh),
+            to: CodeMirror.Pos(cursor.line, globalToCh)
         };
     });
 });
