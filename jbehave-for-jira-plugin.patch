Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/i18n/plugin.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/i18n/plugin.properties	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/i18n/plugin.properties	(revision )
@@ -54,4 +54,10 @@
 userPreferences.autoInsertTabularFields.label=Auto insert tabular parameter fields
 userPreferences.updateSuccessful.message=JBehave options updated successfully
 
+###################################################################################################
+# Configuration page
+###################################################################################################
+jbehaveconfig.webItem.configlink.label=JBehave for Jira
+jbehaveconfig.webItem.summarypanel.title=JBehave for Jira
+jbehaveconfig.webItem.settingspanel.title=JBehave for Jira Settings
 
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/3rdparty/codemirror-4.3/mode/jbehave/jbehave.js	(revision )
@@ -493,7 +493,7 @@
                         }
                         // check for missing In Order To
                         if (!state.narrativeInOrderToDefined) {
-                            var msg = "Missing prior '" + sectionName + "' section";
+                            var msg = "Missing prior 'In Order To' section";
                             addGutterError(ti.from, ti.to, msg);
                         }
                     }
@@ -517,7 +517,7 @@
                         state.narrativeIWantToDefined = true;
                         // check for missing As a
                         if (!state.narrativeAsADefined) {
-                            var msg = "Missing prior '" + sectionName + "' section";
+                            var msg = "Missing prior 'As a' section";
                             addGutterError(ti.from, ti.to, msg);
                         }
                     }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceService.java	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/integration/perforce/PerforceService.java	(revision )
@@ -1,6 +1,7 @@
 package com.jbehaveforjira.plugin.integration.perforce;
 
-import com.jbehaveforjira.plugin.config.Setting;
+import com.jbehaveforjira.plugin.config.SettingInfo;
+import com.jbehaveforjira.plugin.config.SettingKey;
 import com.jbehaveforjira.plugin.config.SettingsManager;
 import com.jbehaveforjira.plugin.dto.story.JiraStory;
 import com.jbehaveforjira.plugin.integration.RevisionInfo;
@@ -36,32 +37,13 @@
  */
 public class PerforceService implements VcsService {
 
-    private final Setting<PerforceConfig> perforceConfig;
+    private final SettingInfo<PerforceConfig> settingInfo = new SettingInfo<PerforceConfig>(SettingKey.VCS_INTEGRATION_PERFORCE, PerforceConfig.class, new PerforceConfig());
 
     private final SettingsManager settingsManager;
 
     public PerforceService(SettingsManager settingsManager) {
 
         this.settingsManager = settingsManager;
-
-        PerforceConfig defaultValue = new PerforceConfig();
-
-        // construct example
-        PerforceConfig exampleValue = new PerforceConfig();
-        exampleValue.setEnabled(true);
-        Map<String, PerforceMapping> mappings = exampleValue.getMappings();
-        PerforceMapping demoMapping = new PerforceMapping(
-                "http://myperforce-server.com", "perforce_username", "perforce_password",
-                "//depo/projects/DEMO/...", "JBehaveStories/...", "C:\temp", "committed via JBehaveForJira plugin");
-        mappings.put("DEMO", demoMapping);
-        PerforceMapping testProjectMapping = new PerforceMapping(
-                "http://myperforce-server.com", "perforce_username", "perforce_password",
-                "//depo/projects/TEST_PROJECT/...", "JBehaveStories/...", "C:\temp", "committed via JBehaveForJira plugin");
-        mappings.put("TEST_PROJECT", testProjectMapping);
-
-        this.perforceConfig = new Setting<PerforceConfig>("INTEGRATION_PERFORCE", defaultValue, exampleValue);
-
-        this.settingsManager.loadSetting(perforceConfig);
     }
 
     private JiraStory findByProjectAndIssueKey(PerforceMapping perforceMapping, String projectKey, String issueKey)
@@ -195,9 +177,10 @@
     @Override
     public Long commit(JiraStory story) {
 
-        if (perforceConfig.value().isEnabled()) {
-            PerforceConfig mappings = perforceConfig.value();
-            PerforceMapping perforceMapping = mappings.forProjectKey(story.getProjectKey());
+        PerforceConfig perforceConfig = settingsManager.find(story.getProjectKey(), settingInfo);
+
+        if (perforceConfig != null && perforceConfig.isEnabled()) {
+            PerforceMapping perforceMapping = perforceConfig.forProjectKey(story.getProjectKey());
             if (perforceMapping != null) {
                 Long revisionNumber = this.commit(perforceMapping, story);
                 return revisionNumber;
@@ -209,9 +192,10 @@
     @Override
     public JiraStory findByProjectAndIssueKey(String projectKey, String issueKey) {
 
-        if (perforceConfig.value().isEnabled()) {
-            PerforceConfig mappings = perforceConfig.value();
-            PerforceMapping perforceMapping = mappings.forProjectKey(projectKey);
+        PerforceConfig perforceConfig = settingsManager.find(projectKey, settingInfo);
+
+        if (perforceConfig != null && perforceConfig.isEnabled()) {
+            PerforceMapping perforceMapping = perforceConfig.forProjectKey(projectKey);
             if (perforceMapping != null) {
                 JiraStory jiraStory = findByProjectAndIssueKey(perforceMapping, projectKey, issueKey);
                 return jiraStory;
@@ -223,9 +207,10 @@
     @Override
     public RevisionInfo getLatestRevisionInfo(String projectKey, String issueKey) {
 
-        if (perforceConfig.value().isEnabled()) {
-            PerforceConfig mappings = perforceConfig.value();
-            PerforceMapping perforceMapping = mappings.forProjectKey(projectKey);
+        PerforceConfig perforceConfig = settingsManager.find(projectKey, settingInfo);
+
+        if (perforceConfig != null && perforceConfig.isEnabled()) {
+            PerforceMapping perforceMapping = perforceConfig.forProjectKey(projectKey);
             if (perforceMapping != null) {
                 return getLatestRevisionInfo(perforceMapping, projectKey, issueKey);
             }
@@ -237,9 +222,10 @@
     @Override
     public Boolean delete(JiraStory story) {
 
-        if (perforceConfig.value().isEnabled()) {
-            PerforceConfig mappings = perforceConfig.value();
-            PerforceMapping perforceMapping = mappings.forProjectKey(story.getProjectKey());
+        PerforceConfig perforceConfig = settingsManager.find(story.getProjectKey(), settingInfo);
+
+        if (perforceConfig != null && perforceConfig.isEnabled()) {
+            PerforceMapping perforceMapping = perforceConfig.forProjectKey(story.getProjectKey());
             if (perforceMapping != null) {
                 delete(perforceMapping, story);
                 return true;
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/project-config.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/project-config.css	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/css/project-config.css	(revision )
@@ -0,0 +1,34 @@
+.config-section-label {
+    font-weight: bold;
+    /*float: left;*/
+    margin-top: 5px;
+    display: table-cell;
+    /*border: solid 1px black;*/
+    white-space: nowrap;
+    padding: 10px;
+}
+
+.plugin-config-icon-background {
+    background-image: url(images/marketing/plugin_icon.png);
+}
+
+.plugin-config-summary-icon {
+    /*background: transparent url(../../../images/icons/icon48-versions.png) no-repeat 0 0;*/
+    background: transparent url(pluginErrorIcon.png) no-repeat 0 0;
+    background-position: -5px 0px;
+    /*background-attachment: fixed;*/
+    /*background: transparent url(pluginLogo.png) no-repeat 0 0;*/
+    /*background-color: lightgreen;*/
+    /*background-image: url(pluginErrorIcon.png);*/
+    /*background-image: url(../images/config/lint_marker_error.png);*/
+    /*background: url(images/ui/gutter_icon_error.png) right top;*/
+    /*background-image: url(../images/marketing/plugin_icon.png);*/
+    /*background: transparent url(images/ui/underline.gif) no-repeat 0 0;*/
+    /*background: url(images/ui/gutter_icon_error.png) right top;*/
+}
+
+.config-page .tab-content {
+    /*background-color: greenyellow;*/
+    margin: 15px;
+    font-size: larger;
+}
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/actions/PluginConfigAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/actions/PluginConfigAction.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/actions/PluginConfigAction.java	(revision )
@@ -0,0 +1,102 @@
+package com.jbehaveforjira.plugin.actions;
+
+import com.atlassian.jira.web.action.JiraWebActionSupport;
+import com.jbehaveforjira.plugin.config.Settings;
+import com.jbehaveforjira.plugin.config.SettingsManager;
+import com.jbehaveforjira.plugin.config.settings.SettingGeneral;
+
+import javax.servlet.http.HttpServletRequest;
+import java.util.Map;
+
+public class PluginConfigAction extends JiraWebActionSupport {
+
+    private String projectKey;
+
+    private String contextPath;
+
+    private SettingsManager settingsManager;
+
+    private boolean settingEnabled;
+
+    private String formFieldEnabled;
+    private Map<String, String> allSettings;
+
+    public PluginConfigAction(SettingsManager settingsManager) {
+
+        this.settingsManager = settingsManager;
+    }
+
+    public boolean getSettingEnabled() {
+        return settingEnabled;
+    }
+
+    public void setSettingEnabled(boolean settingEnabled) {
+        this.settingEnabled = settingEnabled;
+    }
+
+    @Override
+    public String doDefault() throws Exception {
+
+        if (this.projectKey == null || this.projectKey.isEmpty()) {
+            throw new IllegalArgumentException("Mandatory request parameter 'projectKey' was not specified!");
+        }
+
+        HttpServletRequest httpRequest = super.getHttpRequest();
+        contextPath = httpRequest.getContextPath();
+
+        settingEnabled = this.settingsManager.find(projectKey, Settings.GENERAL).getEnabled();
+
+        allSettings = this.settingsManager.allAsStringsForProject(projectKey);
+
+        return super.doDefault();
+    }
+
+    @Override
+    protected String doExecute() throws Exception {
+
+        SettingGeneral settingGeneral = new SettingGeneral();
+        settingGeneral.setEnabled(settingEnabled);
+        this.settingsManager.update(projectKey, Settings.GENERAL, settingGeneral);
+
+//        HttpServletRequest request = ExecutingHttpRequest.get();
+//        request.setAttribute((new StringBuilder()).append("com.atlassian.jira.projectconfig.util.ServletRequestProjectConfigRequestCache").append(":project").toString(), project);
+        return super.doExecute();
+    }
+
+    public String getContextPath() {
+        return contextPath;
+    }
+
+    @Override
+    protected void doValidation() {
+        super.doValidation();
+    }
+
+    public String doUpdateGeneralConfig() throws Exception {
+        return this.doExecute();
+    }
+
+    public String getProjectKey() {
+        return projectKey;
+    }
+
+    public void setProjectKey(String projectKey) {
+        this.projectKey = projectKey;
+    }
+
+    public String getFormFieldEnabled() {
+        return formFieldEnabled;
+    }
+
+    public void setFormFieldEnabled(String formFieldEnabled) {
+        this.formFieldEnabled = formFieldEnabled;
+    }
+
+    public Map<String, String> getAllSettings() {
+        return allSettings;
+    }
+
+    public void setAllSettings(Map<String, String> allSettings) {
+        this.allSettings = allSettings;
+    }
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingParseException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingParseException.java	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingParseException.java	(revision )
@@ -1,6 +1,6 @@
 package com.jbehaveforjira.plugin.config;
 
-public class SettingParseException extends Exception {
+public class SettingParseException extends RuntimeException {
 
     public SettingParseException(String message) {
         super(message);
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/ProjectConfig.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/ProjectConfig.js	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/ProjectConfig.js	(revision )
@@ -0,0 +1,193 @@
+function JBConfigController() {
+
+    var debugOn = true;
+
+    var debug = function (msg) {
+        if (debugOn) {
+            console.log("[DEBUG] ", msg);
+        }
+    }
+
+    var error = function (msg) {
+        console.log("[ERROR] ", msg);
+    }
+
+    var info = function (msg) {
+        console.log("[INFO] ", msg);
+    }
+
+    var restService = new RestService();
+
+    function SettingPayload() {
+        this.key = null;
+        this.strValue = null;
+    }
+
+    function ControllerGeneralSetting() {
+
+        this.fromView = function (model) {
+            var jbSettingEnableOn = AJS.$("#jbSettingEnableOn").attr('checked');
+            debug("jbSettingEnableOn = " + jbSettingEnableOn);
+            if (jbSettingEnableOn == "checked") {
+                debug("enabling plugin");
+                model.enabled = true;
+            } else {
+                debug("disabling plugin");
+                model.enabled = false;
+            }
+        }
+
+        this.toView = function(model) {
+            if (model.enabled == true) {
+                AJS.$("#jbSettingEnableOn").attr('checked', "checked");
+                AJS.$("#jbSettingEnableOff").removeAttr('checked');
+            } else {
+                AJS.$("#jbSettingEnableOff").attr('checked', "checked");
+                AJS.$("#jbSettingEnableOn").removeAttr('checked');
+            }
+        }
+
+    }
+
+    function SettingGeneralModel() {
+
+        this.enabled = null;
+    }
+
+
+    this.submitSettingGeneral = function (eventObject) {
+
+        if (eventObject.preventDefault) {
+            eventObject.preventDefault();
+        } else {
+            eventObject.returnValue = false;
+        }
+
+        var controller = new ControllerGeneralSetting();
+        var setting = new SettingGeneralModel();
+        controller.fromView(setting);
+
+        var settingKey = "GENERAL";
+        restService.saveSetting(setting, settingKey, function (response) {
+
+            if (response.kind == "success") {
+                debug("setting updated successfully, responsePayload - " + JSON.stringify(response, null, "\t"));
+                var updatedSettingAsStr = response.payload.value;
+                debug("Updated setting value - " + updatedSettingAsStr);
+                setting = JSON.parse(updatedSettingAsStr);
+                controller.toView(setting);
+                JIRA.Messages.showSuccessMsg("Setting was updated successfully.");
+            } else {
+                error("Failed to update setting, server error message - " + response.message + "\nServer error stack trace:\n" + response.payload);
+                JIRA.Messages.showWarningMsg("Failed to update setting for JBehave for Jira plugin. See browser log for more details.");
+            }
+
+        });
+    }
+
+    this.cancelSettingGeneral = function (eventObject) {
+
+        if (eventObject.preventDefault) {
+            eventObject.preventDefault();
+        } else {
+            eventObject.returnValue = false;
+        }
+
+        var controller = new ControllerGeneralSetting();
+        var setting = new SettingGeneralModel();
+
+        var settingKey = "GENERAL";
+        restService.loadSetting(settingKey, function (response) {
+
+            if (response.kind == "success") {
+                debug("setting reloaded successfully, responsePayload - " + JSON.stringify(response, null, "\t"));
+                var reloadedSettingAsStr = response.payload.value;
+                debug("Reloaded setting value - " + reloadedSettingAsStr);
+                setting = JSON.parse(reloadedSettingAsStr);
+                controller.toView(setting);
+                JIRA.Messages.showSuccessMsg("Setting was reloaded successfully.");
+            } else {
+                error("Failed to reload setting, server error message - " + response.message + "\nServer error stack trace:\n" + response.payload);
+                JIRA.Messages.showWarningMsg("Failed to reload setting for JBehave for Jira plugin. See browser log for more details.");
+            }
+
+        });
+    }
+
+
+    function RestService() {
+
+        var contextPath = AJS.contextPath();
+        var restPathBase = contextPath + "/rest/jbehave-for-jira/1.0/";
+        var reqTimeout = 10000;
+
+        this.saveSetting = function (settingModel, settingKey, callback) {
+
+            var settingPayoad = JSON.stringify(settingModel, null, "\t");
+
+            debug("saving setting:\n" + settingPayoad, null, "\t");
+
+            var projectKey = AJS.$("#projectKeyParameter").val();
+            info("for key - " + projectKey);
+
+            var saveUrl = restPathBase + "settings/" + projectKey + "/update-setting";
+            saveUrl += "?settingKey=" + settingKey;
+
+            AJS.$.ajax({
+                type: "POST",
+                url: saveUrl,
+                contentType: "text/plain; charset=utf-8",
+                success: function (data, textStatus, jqXHR) {
+                    debug("REST call for update setting returned successfully");
+                    callback(data);
+                },
+                error: function (jqXHR, textStatus, errorThrown) {
+                    error("REST call for update setting failed, textStatus - " + textStatus + "," + errorThrown - " + errorThrown");
+                    JIRA.Messages.showWarningMsg("Failed to update setting for JBehave for Jira plugin. Please contact your system administrator.");
+                },
+                timeout: reqTimeout,
+                data: settingPayoad,
+                dataType: "json"
+            });
+
+        }
+
+        this.loadSetting = function (settingKey, callback) {
+
+            debug("loading setting for key - " + settingKey);
+
+            var projectKey = AJS.$("#projectKeyParameter").val();
+            info("for key - " + projectKey);
+
+            var fetchUrl = restPathBase + "settings/" + projectKey + "/for-key";
+            fetchUrl += "?settingKey=" + settingKey;
+
+            AJS.$.ajax({
+                type: "GET",
+                url: fetchUrl,
+                contentType: "text/plain; charset=utf-8",
+                success: function (data, textStatus, jqXHR) {
+                    debug("REST call for loading setting returned successfully");
+                    callback(data);
+                },
+                error: function (jqXHR, textStatus, errorThrown) {
+                    error("REST call for loading setting failed, textStatus - " + textStatus + "," + errorThrown - " + errorThrown");
+                    JIRA.Messages.showWarningMsg("Failed to reload setting for JBehave for Jira plugin. Please contact your system administrator.");
+                },
+                timeout: reqTimeout
+            });
+
+        }
+
+
+    }
+
+}
+
+var jbCtr;
+AJS.$(function () {
+
+    console.log("loading ProjectConfig.js script");
+    jbCtr = new JBConfigController;
+
+});
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/AdminServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/AdminServlet.java	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/AdminServlet.java	(revision )
@@ -51,7 +51,7 @@
         }
         context.put("projectKeys", projectKeys);
 
-        Map<String, Setting> allSettings = settingsManager.allSettings();
+        Map<String, String> allSettings = settingsManager.allAsStrings();
         List<String> keys = new ArrayList<String>(allSettings.keySet());
         Collections.sort(keys, new Comparator<String>() {
             @Override
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/settings/SettingGeneral.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/settings/SettingGeneral.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/settings/SettingGeneral.java	(revision )
@@ -0,0 +1,19 @@
+package com.jbehaveforjira.plugin.config.settings;
+
+public class SettingGeneral {
+
+    private Boolean enabled;
+
+    public SettingGeneral() {
+        // default values
+        enabled = Boolean.FALSE;
+    }
+
+    public Boolean getEnabled() {
+        return enabled;
+    }
+
+    public void setEnabled(Boolean enabled) {
+        this.enabled = enabled;
+    }
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/admin/summary_tab_panel.vm
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/admin/summary_tab_panel.vm	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/admin/summary_tab_panel.vm	(revision )
@@ -0,0 +1,22 @@
+
+$webResourceManager.requireResource("com.jbehaveforjira.plugin:project-config-resources")
+##<div class="project-config-webpanel-column-content">
+##    <div id="project-config-webpanel-summary-versions" class="module  project-config-webpanel">
+        <div class="mod-header" id="summary-jbehave_heading"><h2>JBehave for Jira</h2></div>
+        <div class="mod-content">
+##            <div class="project-config-webpanel-content project-config-icon48-versions">
+            <div class="project-config-webpanel-content">
+                <div class="project-config-webpanel-content plugin-config-summary-icon">
+                    <p class="project-config-list-empty">
+                        <div><b>${enabledStatus}</b></div>
+                        <div>
+                            <a href="${contextPath}/secure/JBehaveForJiraConfig!default.jspa?projectKey=${projectKey}&amp;projectId=${projectId}">Configure</a>
+                        </div>
+                    </p>
+                </div>
+            </div>
+        </div>
+##    </div>
+##</div>
+
+
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/contextproviders/ProjectConfigSummaryPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/contextproviders/ProjectConfigSummaryPanel.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/contextproviders/ProjectConfigSummaryPanel.java	(revision )
@@ -0,0 +1,47 @@
+package com.jbehaveforjira.plugin.contextproviders;
+
+import com.atlassian.crowd.embedded.api.User;
+import com.atlassian.jira.plugin.webfragment.contextproviders.AbstractJiraContextProvider;
+import com.atlassian.jira.plugin.webfragment.model.JiraHelper;
+import com.atlassian.jira.project.Project;
+import com.jbehaveforjira.plugin.config.Settings;
+import com.jbehaveforjira.plugin.config.SettingsManager;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class ProjectConfigSummaryPanel extends AbstractJiraContextProvider {
+
+    private SettingsManager settingsManager;
+
+    public ProjectConfigSummaryPanel(SettingsManager settingsManager) {
+        this.settingsManager = settingsManager;
+    }
+
+    @Override
+    public Map getContextMap(User user, JiraHelper jiraHelper) {
+
+        Map contextMap = new HashMap();
+
+        String contextPath = jiraHelper.getRequest().getContextPath();
+        contextMap.put("contextPath", contextPath);
+
+        Project project = jiraHelper.getProjectObject();
+        if(project != null) {
+            String projectKey = project.getKey();
+            contextMap.put("projectKey", projectKey);
+            Long projectId = project.getId();
+            contextMap.put("projectId", projectId);
+            Boolean isEnabled = this.settingsManager.find(projectKey, Settings.GENERAL).getEnabled();
+            if (isEnabled) {
+                contextMap.put("enabledStatus", "Enabled");
+            } else {
+                contextMap.put("enabledStatus", "Disabled");
+            }
+        } else {
+            throw new IllegalArgumentException("Project object could not be found in context");
+        }
+
+        return contextMap;
+    }
+}
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/contextproviders/ProjectConfigSettingsPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/contextproviders/ProjectConfigSettingsPanel.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/contextproviders/ProjectConfigSettingsPanel.java	(revision )
@@ -0,0 +1,17 @@
+package com.jbehaveforjira.plugin.contextproviders;
+
+import com.atlassian.crowd.embedded.api.User;
+import com.atlassian.jira.plugin.webfragment.contextproviders.AbstractJiraContextProvider;
+import com.atlassian.jira.plugin.webfragment.model.JiraHelper;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class ProjectConfigSettingsPanel extends AbstractJiraContextProvider {
+
+    @Override
+    public Map getContextMap(User user, JiraHelper jiraHelper) {
+        Map contextMap = new HashMap();
+        return contextMap;
+    }
+}
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/conditions/EnabledForProjectCondition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/conditions/EnabledForProjectCondition.java	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/conditions/EnabledForProjectCondition.java	(revision )
@@ -3,30 +3,19 @@
 import com.atlassian.jira.project.Project;
 import com.atlassian.plugin.PluginParseException;
 import com.atlassian.plugin.web.Condition;
-import com.jbehaveforjira.plugin.config.Setting;
+import com.jbehaveforjira.plugin.config.Settings;
 import com.jbehaveforjira.plugin.config.SettingsManager;
+import com.jbehaveforjira.plugin.config.settings.SettingGeneral;
 
-import java.util.ArrayList;
-import java.util.List;
 import java.util.Map;
 
 public class EnabledForProjectCondition implements Condition {
 
-    public static Setting<List<String>> enabledPojectsConfig;
-
-    static {
-        List<String> exampleSetting = new ArrayList<String>();
-        exampleSetting.add("DEMO");
-        exampleSetting.add("TEST_PROJECT");
-        enabledPojectsConfig = new Setting<List<String>>("ENABLED_PROJECTS", new ArrayList<String>(), exampleSetting);
-    }
-
     private SettingsManager settingsManager;
 
     public EnabledForProjectCondition(SettingsManager settingsManager) {
 
         this.settingsManager = settingsManager;
-        this.settingsManager.loadSetting(enabledPojectsConfig);
     }
 
     @Override
@@ -51,6 +40,7 @@
 
     public boolean enabledForProject(String projectKey) {
 
-        return this.enabledPojectsConfig.value().contains(projectKey);
+        SettingGeneral settingGeneral = this.settingsManager.find(projectKey, Settings.GENERAL);
+        return settingGeneral.getEnabled();
     }
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/atlassian-plugin.xml	(revision )
@@ -2,6 +2,9 @@
 
 <atlassian-plugin key="com.jbehaveforjira.plugin" name="JBehave for Jira"
                   plugins-version="2">
+    <!-- ==================================================================================================== -->
+    <!--General plugin settings-->
+    <!-- ==================================================================================================== -->
     <plugin-info>
         <version>${project.version}</version>
         <description>${project.description}</description>
@@ -16,7 +19,6 @@
         <param name="vendor-logo">images/marketing/vendor_logo.jpg</param>
         <param name="configure.url">/plugins/servlet/jbehaveforjira/admin</param>
     </plugin-info>
-
     <!-- ==================================================================================================== -->
     <!--3rd party scripts-->
     <!-- ==================================================================================================== -->
@@ -45,9 +47,10 @@
         <resource type="download" name="lint.css" location="/3rdparty/codemirror-4.3/addon/lint/lint.css"/>
         <resource type="download" name="lint.js" location="/3rdparty/codemirror-4.3/addon/lint/lint.js"/>
         <resource type="download" name="json-lint.js" location="/3rdparty/codemirror-4.3/addon/lint/jbehave-lint.js"/>
-
     </web-resource>
+    <!-- ==================================================================================================== -->
     <!--Custom javascript and css-->
+    <!-- ==================================================================================================== -->
     <web-resource name="View Issue Page Resources" key="view-issue-page-resources">
         <!--<context>jira.view.issue</context>-->
         <!--<context>issuePageResources</context>-->
@@ -86,7 +89,6 @@
         <resource type="download" name="Admin.js" location="/js/Admin.js"/>
         <resource type="download" name="TemplatesAdminSettings.soy.js" location="/soy/TemplatesAdminSettings.soy"/>
     </web-resource>
-
     <!-- ==================================================================================================== -->
     <!--REST api-->
     <!-- ==================================================================================================== -->
@@ -145,7 +147,7 @@
     </web-item>
     <webwork1 key="add-jbehave-story-webwork-module" name="Add JBehave Story Webwork Module"
               i18n-name-key="scheduler-webwork-module.name">
-        <description key="scheduler-webwork-module.description">The Add JBehve Story Module Plugin</description>
+        <description key="scheduler-webwork-module.description">The Add JBehave Story Module Plugin</description>
         <actions>
             <action name="com.jbehaveforjira.plugin.actions.AddDeleteStoryAction"
                     alias="AddDeleteStoryAction">
@@ -198,6 +200,93 @@
         <!--<context>atl.general</context>-->
     </web-resource>
     <!-- ==================================================================================================== -->
+    <!--Project administration page - summary tab panel-->
+    <!-- ==================================================================================================== -->
+    <web-panel key="jbehave-for-jira-project-config-summary-panel" location="webpanels.admin.summary.left-panels"
+               name="Config Summary Panel" i18n-name-key="configpage.summarypanel.name">
+        <!--<param name="headless">true</param>-->
+        <context-provider class="com.jbehaveforjira.plugin.contextproviders.ProjectConfigSummaryPanel"/>
+        <resource name="view" type="velocity" location="/velocity/admin/summary_tab_panel.vm"/>
+    </web-panel>
+    <!-- ==================================================================================================== -->
+    <!--Project administration page - settings panel-->
+    <!-- ==================================================================================================== -->
+    <web-panel key="jbehave-for-jira-project-config-panel" location="tabs.admin.projectconfig.jbehave" weight="100">
+        <label key="jbehaveconfig.webItem.settingspanel.title"/>
+        <context-provider class="com.jbehaveforjira.plugin.contextproviders.ProjectConfigSettingsPanel"/>
+        <resource name="view" type="velocity" location="/velocity/admin/settings_tab_panel.vm"/>
+    </web-panel>
+    <web-section key="jbehave-for-jira-config-section" location="atl.jira.proj.config" weight="35">
+    </web-section>
+    <web-item key="jbehave-for-jira-config-link" section="atl.jira.proj.config/jbehave-for-jira-config-section">
+        <label key="jbehaveconfig.webItem.configlink.label"/>
+        <link linkId="jbehave-for-jira-config-link">/secure/JBehaveForJiraConfig!default.jspa?projectKey=$projectKeyEncoded&amp;projectId=$project.id</link>
+    </web-item>
+    <webwork1 key="jbehave-for-jira-config-webwork-module" name="Add JBehave Story Webwork Module"
+              i18n-name-key="scheduler-webwork-module.name">
+        <description key="scheduler-webwork-module.description">JBehave For Jira Config Module</description>
+        <actions>
+            <action name="com.jbehaveforjira.plugin.actions.PluginConfigAction"
+                    alias="JBehaveForJiraConfig">
+                <view name="input">/velocity/admin/settings_tab_panel.vm</view>
+                <view name="success">/velocity/admin/settings_tab_panel.vm</view>
+                <view name="error">/velocity/admin/settings_tab_panel.vm</view>
+            </action>
+            <!--<action name="com.jbehaveforjira.plugin.actions.UpdateGeneralPluginConfigAction"-->
+                    <!--alias="UpdateGeneralPluginConfigAction">-->
+                <!--<view name="input">/velocity/admin/settings_tab_panel.vm</view>-->
+                <!--<view name="error">/velocity/admin/settings_tab_panel.vm</view>-->
+            <!--</action>-->
+        </actions>
+    </webwork1>
+
+    <web-resource key="project-config-resources">
+        <context>jira.admin.conf</context>
+        <transformation extension="js">
+            <transformer key="jsI18n"/>
+        </transformation>
+        <!--<dependency>com.atlassian.jira.jira-project-config-plugin:project-config-global</dependency>-->
+        <!--<dependency>com.atlassian.jira.jira-project-config-plugin:project-config-workflows-edit</dependency>-->
+        <transformation extension="less">
+            <transformer key="lessTransformer"/>
+        </transformation>
+        <resource type="download" name="ProjectConfig.js" location="js/ProjectConfig.js">
+            <property key="content-type" value="text/javascript"/>
+        </resource>
+        <resource type="download" name="project-config.css" location="css/project-config.css">
+            <property key="content-type" value="text/css"/>
+        </resource>
+        <!--<resource type="download" name="images/" location="images/config">-->
+            <!--<param name="content-type" value="image/png"/>-->
+        <!--</resource>-->
+        <!--<resource name="pluginLogo.png" type="download" location="images/config/plugin_logo.png">-->
+            <!--<param name="content-type" value="image/png; charset=binary"/>-->
+        <!--</resource>-->
+        <!--<resource name="pluginErrorIcon.png" type="download" location="images/config/lint_marker_error.png">-->
+            <!--<param name="content-type" value="image/png; charset=binary"/>-->
+        <!--</resource>-->
+    </web-resource>
+
+
+
+    <!--<web-panel name="Story Panel" i18n-name-key="viewIssuePage.storyPanel.name"-->
+               <!--key="viewIssuePage.storyPanel.key" location="atl.jira.view.issue.left.context" weight="220">-->
+        <!--<description key="viewIssuePage.storyPanel.description">JBehave Story Panel</description>-->
+        <!--<context-provider class="com.jbehaveforjira.plugin.contextproviders.StoryPanelContextProvider"/>-->
+        <!--<resource name="view" type="velocity" location="/velocity/story_panel.vm"/>-->
+        <!--<label key="viewIssuePage.storyPanel.label"/>-->
+        <!--<condition class="com.jbehaveforjira.plugin.conditions.LicenseIsValidCondition"/>-->
+        <!--<conditions type="and">-->
+            <!--<condition class="com.jbehaveforjira.plugin.conditions.EnabledForProjectCondition"/>-->
+            <!--<condition class="com.atlassian.jira.plugin.webfragment.conditions.IsIssueEditableCondition"/>-->
+            <!--<condition class="com.atlassian.jira.plugin.webfragment.conditions.HasIssuePermissionCondition">-->
+                <!--<param name="permission" value="edit"/>-->
+            <!--</condition>-->
+            <!--<condition class="com.jbehaveforjira.plugin.conditions.JiraIssueHasStoryCondition"/>-->
+            <!--<condition class="com.jbehaveforjira.plugin.conditions.LicenseIsValidCondition"/>-->
+        <!--</conditions>-->
+    <!--</web-panel>-->
+    <!-- ==================================================================================================== -->
     <!--Issue page - Story panel-->
     <!-- ==================================================================================================== -->
     <web-panel name="Story Panel" i18n-name-key="viewIssuePage.storyPanel.name"
@@ -218,7 +307,9 @@
             <condition class="com.jbehaveforjira.plugin.conditions.LicenseIsValidCondition"/>
         </conditions>
     </web-panel>
+    <!-- ==================================================================================================== -->
     <!--Issue page - Story reports panel-->
+    <!-- ==================================================================================================== -->
     <web-panel name="Story Reports Panel" i18n-name-key="viewIssuePage.storyReportsPanel.name"
                key="viewIssuePage.storyReportsPanel.key"
                location="atl.jira.view.issue.left.context" weight="320">
@@ -239,13 +330,13 @@
     </web-panel>
     <!-- ==================================================================================================== -->
     <!--Custom customfields-->
+    <!-- ==================================================================================================== -->
     <!--<customfield-type name="Story Status Field" i18n-name-key="storySstatusField.name" key="story-status-field"-->
     <!--class="com.mycomp.execspec.jiraplugin.customfields.StoryStatusField">-->
     <!--<description key="storySstatusField.description">The Story Status Field Plugin</description>-->
     <!--<resource name="view" type="velocity" location="/templates/storystatusfield/view.vm"/>-->
     <!--<resource name="edit" type="velocity" location="/templates/storystatusfield/edit.vm"/>-->
     <!--</customfield-type>-->
-
     <!-- ==================================================================================================== -->
     <!--Imported components-->
     <!-- ==================================================================================================== -->
@@ -262,7 +353,6 @@
     <component-import key="pluginLicenseManager" interface="com.atlassian.upm.api.license.PluginLicenseManager"/>
     <component-import key="pluginSettingsFactory"
                       interface="com.atlassian.sal.api.pluginsettings.PluginSettingsFactory"/>
-
     <component-import key="templateRenderer" interface="com.atlassian.templaterenderer.TemplateRenderer"/>
     <component-import key="loginUriProvider" interface="com.atlassian.sal.api.auth.LoginUriProvider"/>
     <component-import key="userManager" interface="com.atlassian.sal.api.user.UserManager"/>
@@ -274,7 +364,6 @@
     <!-- Event listenders -->
     <!-- ==================================================================================================== -->
     <component key="eventListener" class="com.jbehaveforjira.plugin.listeners.IssueDeletedEventListener">
-            
         <description>Class that processes the incoming JIRA issue events.</description>
     </component>
     <!-- ==================================================================================================== -->
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingKey.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingKey.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingKey.java	(revision )
@@ -0,0 +1,8 @@
+package com.jbehaveforjira.plugin.config;
+
+public enum SettingKey {
+
+    GENERAL,
+    VCS_INTEGRATION_PERFORCE,
+
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingsManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingsManager.java	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingsManager.java	(revision )
@@ -5,6 +5,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -16,53 +17,150 @@
 
     private final PluginSettings pluginSettings;
 
-    private Map<String, Setting> allSettings;
+    private Map<String, Object> allSettings;
 
     public SettingsManager(PluginSettingsFactory settingsFactory) {
 
         this.pluginSettings = settingsFactory.createGlobalSettings();
-        allSettings = new ConcurrentHashMap<String, Setting>();
+        allSettings = new ConcurrentHashMap<String, Object>();
     }
 
-    public Map<String, Setting> allSettings() {
+    public <T> Object save(String projectKey, SettingInfo<T> settingInfo, T value) {
 
-        return allSettings;
+        String partialKey = toPartialKey(projectKey, settingInfo.getKey().toString());
+        allSettings.put(partialKey, value);
+
+        String fullKey = KEY_PREFIX + partialKey;
+        String asString = settingInfo.marshall(value);
+        return pluginSettings.put(fullKey, asString);
     }
 
-    public void storeSetting(Setting setting) {
-        String asString = setting.asString();
-        String fullKey = KEY_PREFIX + setting.key();
-        pluginSettings.put(fullKey, asString);
-        allSettings.put(setting.key(), setting);
+    public <T> T find(String projectKey, SettingInfo<T> settingInfo) {
+
+        String partialKey = toPartialKey(projectKey, settingInfo.getKey().toString());
+        if (allSettings.containsKey(partialKey)) {
+            T value = (T) allSettings.get(partialKey);
+            return value;
+        } else {
+            String fullKey = KEY_PREFIX + partialKey;
+            String valueAsString = (String) pluginSettings.get(fullKey);
+            if (valueAsString != null) {
+                T value = settingInfo.unmarshall(valueAsString);
+                allSettings.put(partialKey, value);
+                return value;
+            } else {
+                // there is no value for this setting yet
+                T defaultValue = settingInfo.getDefaultValue();
+                allSettings.put(partialKey, defaultValue);
+                // persist it also in plugin settings
+                valueAsString = settingInfo.marshall(defaultValue);
+                update(projectKey, settingInfo.getKey().toString(), valueAsString);
+                return defaultValue;
-    }
+            }
+        }
+    }
 
-    public Setting findForKey(String settingKey) {
+    public Map<String, String> allAsStrings() {
 
-        Setting setting = allSettings.get(settingKey);
-        return setting;
+        Map<String, String> allAsStrings = new HashMap<String, String>(allSettings.size());
+        for (String partialKey : allSettings.keySet()) {
+            String fullKey = KEY_PREFIX + partialKey;
+            String strValue = (String) pluginSettings.get(fullKey);
+            allAsStrings.put(partialKey, strValue);
-    }
+        }
 
-    public void loadSetting(Setting setting) {
-        String fullKey = KEY_PREFIX + setting.key();
-        String asString = (String) pluginSettings.get(fullKey);
-        if (asString != null) {
-            try {
-                setting.fromString(asString);
-            } catch (SettingParseException e) {
-                log.error("Error occurred while trying to load plugin setting for key - " + fullKey
-                        + ". The plugin might not function as expected as the result. See application logs for more details.", e);
+        return allAsStrings;
-            }
+    }
+
+    public Map<String, String> allAsStringsForProject(String projectKey) {
+
+        Map<String, String> allAsStrings = new HashMap<String, String>(allSettings.size());
+        for (String partialKey : allSettings.keySet()) {
+            if (partialKey.startsWith(projectKey)) {
+                String fullKey = KEY_PREFIX + partialKey;
+                String strValue = (String) pluginSettings.get(fullKey);
+                String settingKey = partialKey.substring(projectKey.length() + 1);
+                allAsStrings.put(settingKey, strValue);
-        }
+            }
-        allSettings.put(setting.key(), setting);
-    }
+        }
 
-    public boolean deleteForKey(String settingKey) {
-        String fullKey = KEY_PREFIX + settingKey;
+        return allAsStrings;
+    }
+
+    public String findForKey(String projectKey, String settingKey) {
+
+        String partialKey = toPartialKey(projectKey, settingKey);
+        String fullKey = KEY_PREFIX + partialKey;
+        String valueAsString = (String) pluginSettings.get(fullKey);
+        return valueAsString;
+    }
+
+    public <T> String update(String projectKey, SettingInfo<T> settingInfo, T newValue) {
+
+        String partialKey = toPartialKey(projectKey, settingInfo.getKey().toString());
+        String fullKey = KEY_PREFIX + partialKey;
+        String valueAsString = settingInfo.marshall(newValue);
+        String previous = (String) pluginSettings.put(fullKey, valueAsString);
+        allSettings.put(partialKey, newValue);
+        return previous;
+    }
+
+    public String update(String projectKey, SettingKey settingKey, String newValue) {
+
+        return this.update(projectKey, settingKey.toString(), newValue);
+    }
+
+    /**
+     * Similar method as above but takes in string parameters, i.e. no need to allow the configuration type.
+     * This method is intended to be called via Rest API.
+     *
+     * @param projectKey
+     * @param settingKey
+     * @param newValue
+     * @return
+     */
+    public String update(String projectKey, String settingKey, String newValue) {
+
+        String partialKey = toPartialKey(projectKey, settingKey);
+        String fullKey = KEY_PREFIX + partialKey;
+        String previous = (String) pluginSettings.put(fullKey, newValue);
+        // remove it from the cached collection so that next time it is retrieved it will be looked up from the
+        // settings store
+        allSettings.remove(partialKey);
+        return previous;
+    }
+
+    public String delete(String projectKey, String settingKey) {
+
+        String partialKey = toPartialKey(projectKey, settingKey);
+        String fullKey = KEY_PREFIX + partialKey;
-        String removed = (String)pluginSettings.remove(fullKey);
+        String removed = (String) pluginSettings.remove(fullKey);
-        if (removed != null) {
-            return true;
-        } else {
-            return false;
+        allSettings.remove(partialKey);
+        return removed;
-        }
+    }
+
+    private static String toPartialKey(String projectKey, String settingKey) {
+        String partialKey = projectKey + ":" + settingKey;
+        return partialKey;
     }
+
+    private static String toFullKey(String projectKey, String settingKey) {
+        String fullKey = KEY_PREFIX + projectKey + ":" + settingKey;
+        return fullKey;
+    }
+
+//    public <T> boolean delete(String projectKey, SettingInfo<T> settingInfo) {
+//
+//        String partialKey = projectKey + ":" + settingInfo.key();
+//        allSettings.remove(partialKey);
+//
+//        String fullKey = KEY_PREFIX + partialKey;
+//        String removed = (String) pluginSettings.remove(fullKey);
+//        if (removed != null) {
+//            return true;
+//        } else {
+//            return false;
+//        }
+//    }
+
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/dto/preferences/SettingDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/dto/preferences/SettingDTO.java	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/dto/preferences/SettingDTO.java	(revision )
@@ -1,7 +1,5 @@
 package com.jbehaveforjira.plugin.dto.preferences;
 
-import com.jbehaveforjira.plugin.config.Setting;
-
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlRootElement;
@@ -29,13 +27,6 @@
 
     public String getValue() {
         return value;
-    }
-
-    public static SettingDTO fromSetting(Setting setting) {
-        SettingDTO settingDTO = new SettingDTO();
-        settingDTO.key = setting.key();
-        settingDTO.value = setting.asString();
-        return settingDTO;
     }
 
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/Setting.java
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/Setting.java	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/SettingInfo.java	(revision )
@@ -1,7 +1,6 @@
 package com.jbehaveforjira.plugin.config;
 
 
-import org.apache.commons.lang3.Validate;
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.codehaus.jackson.annotate.JsonAutoDetect;
 import org.codehaus.jackson.map.ObjectMapper;
@@ -11,48 +10,44 @@
 
 /**
  */
-public /*abstract*/ class Setting<T> {
+public class SettingInfo<T> {
 
-    protected T value;
+    protected final SettingKey key;
 
-    protected final T exampleValue;
+    protected final Class<T> valueType;
 
-    protected final String key;
+    protected final T defaultValue;
 
     /**
      * Intended for use via Reflection API only.
      */
-    protected Setting() {
-        this.exampleValue = null;
+    protected SettingInfo() {
         this.key = null;
+        this.valueType = null;
+        this.defaultValue = null;
     }
 
-    public Setting(String key, T defaultValue, T exampleValue) {
-        Validate.notNull(key);
+    public SettingInfo(SettingKey key, Class<T> valueType, T defaultValue) {
+        this.valueType = valueType;
         this.key = key;
-        this.value = defaultValue;
-        this.exampleValue = exampleValue;
+        this.defaultValue = defaultValue;
     }
 
-    public String key() {
+    public SettingKey getKey() {
         return key;
     }
 
-//    public abstract void fromString(String valueAsString);
-
-    //    @Override
-
-    public T value() {
-        return value;
+    public T getDefaultValue() {
+        return defaultValue;
     }
 
-    public void fromString(String valueAsString) throws SettingParseException {
+    public T unmarshall(String valueAsString) throws SettingParseException {
         ObjectMapper objectMapper = new ObjectMapper();
         objectMapper.setVisibilityChecker(objectMapper.getVisibilityChecker().withFieldVisibility(JsonAutoDetect.Visibility.ANY));
 //        objectMapper.configure(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
         try {
-            Object readValue = objectMapper.readValue(valueAsString, value.getClass());
-            value = (T) readValue;
+            T readValue = objectMapper.readValue(valueAsString, this.valueType);
+            return readValue;
         } catch (IOException e) {
             Throwable rootCause = ExceptionUtils.getRootCause(e);
             String rootError;
@@ -61,38 +56,28 @@
             } else {
                 rootError = e.getMessage();
             }
-            throw new SettingParseException("Exception occurred while attempting to unmarshall plugin setting for key - " + this.key
-                    + ". Error - " + rootError + ".", e);
+            throw new SettingParseException("Exception occurred while attempting to unmarshaller object from JSon string. Error - " + rootError + ".", e);
         }
     }
 
-    //    @Override
-    public String asString() {
+//    public String marshallValue(Object value) {
+//        T typedValue = (T) value;
+//        return marshall(typedValue);
+//    }
 
-        return asJSonString(this.value);
-    }
+    public String marshall(T value) {
 
-    public String exampleAsString() {
-
-        return asJSonString(this.exampleValue);
-    }
-
-    private String asJSonString(T valueToMarshall) {
-
-        if (valueToMarshall != null) {
+        if (value != null) {
             ObjectMapper objectMapper = new ObjectMapper();
             objectMapper.configure(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS, false);
             try {
-                String asString = objectMapper.writeValueAsString(valueToMarshall);
+                String asString = objectMapper.writeValueAsString(value);
                 return asString;
             } catch (IOException e) {
-                throw new RuntimeException("Exception occurred while attempting to marshall plugin setting for key - " + this.key
-                        + ". Object value was: " + valueToMarshall, e);
+                throw new RuntimeException("Exception occurred while attempting to marshall object into JSon string setting. Object value was: " + value, e);
             }
         } else {
             return null;
         }
     }
-
-
 }
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/rest/PluginSettingsResource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/rest/PluginSettingsResource.java	(date 1432495026000)
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/rest/PluginSettingsResource.java	(revision )
@@ -2,7 +2,6 @@
 
 import com.atlassian.jira.security.JiraAuthenticationContext;
 import com.atlassian.jira.user.preferences.UserPreferencesManager;
-import com.jbehaveforjira.plugin.config.Setting;
 import com.jbehaveforjira.plugin.config.SettingsManager;
 import com.jbehaveforjira.plugin.dto.preferences.SettingDTO;
 import com.jbehaveforjira.plugin.dto.preferences.SettingsDTO;
@@ -43,11 +42,11 @@
 
         RestResponse<SettingsDTO> response;
         try {
-            Map<String, Setting> allSettings = settingsManager.allSettings();
-
-            List<SettingDTO> dtos = new ArrayList<SettingDTO>(allSettings.size());
-            for (Setting setting : allSettings.values()) {
-                SettingDTO dto = SettingDTO.fromSetting(setting);
+            Map<String, String> asStrings = settingsManager.allAsStrings();
+            List<SettingDTO> dtos = new ArrayList<SettingDTO>(asStrings.size());
+            for (String key : asStrings.keySet()) {
+                String setting = asStrings.get(key);
+                SettingDTO dto = new SettingDTO(key, setting);
                 dtos.add(dto);
             }
             SettingsDTO settingsDTO = new SettingsDTO(dtos);
@@ -61,40 +60,20 @@
     }
 
     @GET
-    @Path("/for-key")
+    @Path("/{projectKey}/for-key")
     @Produces({MediaType.APPLICATION_JSON})
-    public RestResponse<SettingDTO> getForKey(@QueryParam("settingKey") String settingKey) {
+    public RestResponse<SettingDTO> getForKey(@PathParam("projectKey") String projectKey, @QueryParam("settingKey") String settingKey) {
 
         RestResponse<SettingDTO> response;
         try {
             SettingDTO dto = null;
-            Setting setting = settingsManager.findForKey(settingKey);
-            if (setting != null) {
-                dto = SettingDTO.fromSetting(setting);
-            }
+            String settingValue = settingsManager.findForKey(projectKey, settingKey);
+            if (settingValue != null) {
+                dto = new SettingDTO(settingKey, settingValue);
-            response = RestResponse.success(dto);
+                response = RestResponse.success(dto);
-        } catch (Exception ex) {
-            response = RestResponse.failure(ex);
-            logger.warn(DEFAULT_ERROR_MESSAGE, ex);
+            } else {
+                response = RestResponse.failure("Unknown setting key");
-        }
+            }
-
-        return response;
-    }
-
-    @GET
-    @Path("/example-for-key")
-    @Produces({MediaType.APPLICATION_JSON})
-    public RestResponse<SettingDTO> getExampleForKey(@QueryParam("settingKey") String settingKey) {
-
-        RestResponse<SettingDTO> response;
-        try {
-            SettingDTO dto = null;
-            Setting setting = settingsManager.findForKey(settingKey);
-            if (setting != null && setting.exampleAsString() != null) {
-                String exampleAsString = setting.exampleAsString();
-                dto = new SettingDTO(setting.key(), exampleAsString);
-            }
-            response = RestResponse.success(dto);
         } catch (Exception ex) {
             response = RestResponse.failure(ex);
             logger.warn(DEFAULT_ERROR_MESSAGE, ex);
@@ -103,16 +82,38 @@
         return response;
     }
 
+//    @GET
+//    @Path("/{projectKey}/example-for-key")
+//    @Produces({MediaType.APPLICATION_JSON})
+//    public RestResponse<SettingDTO> getExampleForKey(@PathParam("projectKey") String projectKey, @QueryParam("settingKey") String settingKey) {
+//
+//        RestResponse<SettingDTO> response;
+//        try {
+//            SettingDTO dto = null;
+//            Object settingValue = settingsManager.find(projectKey, settingKey);
+//            if (settingValue != null && setting.exampleAsString() != null) {
+//                String exampleAsString = setting.exampleAsString();
+//                dto = new SettingDTO(setting.key(), exampleAsString);
+//            }
+//            response = RestResponse.success(dto);
+//        } catch (Exception ex) {
+//            response = RestResponse.failure(ex);
+//            logger.warn(DEFAULT_ERROR_MESSAGE, ex);
+//        }
+//
+//        return response;
+//    }
+
     @DELETE
-    @Path("/delete-for-key")
+    @Path("/{projectKey}/delete-for-key")
     @Produces({MediaType.APPLICATION_JSON})
-    public RestResponse<String> deleteForKey(@QueryParam("settingKey") String settingKey) {
+    public RestResponse<String> deleteForKey(@PathParam("projectKey") String projectKey, @QueryParam("settingKey") String settingKey) {
 
         RestResponse<String> response;
         try {
-            settingsManager.deleteForKey(settingKey);
+            settingsManager.delete(projectKey, settingKey);
             response = RestResponse.success();
-        } catch (Exception ex) {
+        } catch (RuntimeException ex) {
             response = RestResponse.failure(ex);
             logger.warn(DEFAULT_ERROR_MESSAGE, ex);
         }
@@ -120,10 +121,10 @@
     }
 
     @POST
-    @Path("/update-setting")
+    @Path("/{projectKey}/update-setting")
     @Produces(MediaType.APPLICATION_JSON)
     @Consumes(MediaType.TEXT_PLAIN)
-    public RestResponse<SettingDTO> updateSetting(@QueryParam("settingKey") String settingKey, String asString) {
+    public RestResponse<SettingDTO> updateSetting(@PathParam("projectKey") String projectKey, @QueryParam("settingKey") String settingKey, String asString) {
 
 
         RestResponse<SettingDTO> response;
@@ -133,15 +134,10 @@
             Validate.notEmpty(settingKey);
             Validate.notNull(asString);
 
-            Setting targetSetting = settingsManager.findForKey(settingKey);
-            if (targetSetting == null) {
-                throw new IllegalArgumentException("Error - setting key '" + settingKey + "' is unknown.");
-            } else {
-                targetSetting.fromString(asString);
-                settingsManager.storeSetting(targetSetting);
-                SettingDTO dto = SettingDTO.fromSetting(targetSetting);
+            settingsManager.update(projectKey, settingKey, asString);
+
+            SettingDTO dto = new SettingDTO(settingKey, asString);
-                response = RestResponse.success(dto);
+            response = RestResponse.success(dto);
-            }
 
         } catch (Exception ex) {
             response = RestResponse.failure(ex);
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/Settings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/Settings.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/com/jbehaveforjira/plugin/config/Settings.java	(revision )
@@ -0,0 +1,9 @@
+package com.jbehaveforjira.plugin.config;
+
+import com.jbehaveforjira.plugin.config.settings.SettingGeneral;
+
+public interface Settings {
+
+    SettingInfo<SettingGeneral> GENERAL = new SettingInfo<SettingGeneral>(SettingKey.GENERAL, SettingGeneral.class, new SettingGeneral());
+
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/admin/settings_tab_panel.vm
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/admin/settings_tab_panel.vm	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/admin/settings_tab_panel.vm	(revision )
@@ -0,0 +1,117 @@
+<html>
+    <head>
+        <title>JBehave For Jira - Plugin Configuration</title>
+        $webResourceManager.requireResource("ca.test.jira.test-jira-plugin:admin-resources")
+        <meta name="decorator" content="atl.admin" />
+        <meta name="admin.active.section" content="atl.jira.proj.config"/>
+        <meta name="admin.active.tab" content="jbehave-for-jira-config-link"/>
+    ##    <meta name="projectKey" content="DEMO"/>
+    ##    <meta name="projectKey" content="$project.key"/>
+    ##    <meta name="projectId" content="$project.id"/>
+        <meta name="projectKey" content="$textutils.htmlEncode($action.projectKey)"/>
+    </head>
+    <body>
+        <div class="config-page aui-tabs horizontal-tabs" role="application">
+            <ul class="tabs-menu" role="tablist">
+                <li class="menu-item active-tab" role="presentation">
+                    <a href="#jbehave-config-enabled" id="aui-uid-0-1438663641443" role="tab" aria-selected="true"><strong>General</strong></a>
+                </li>
+                <li class="menu-item" role="presentation">
+                    <a href="#jbehave-config-vcs-integration" id="aui-uid-1-1438663641443" role="tab" aria-selected="false"><strong>VCS Integration</strong></a>
+                </li>
+                <li class="menu-item" role="presentation">
+                    <a href="#jbehave-config-rest-browser" id="aui-uid-2-1438663641443" role="tab" aria-selected="false"><strong>REST Browser</strong></a>
+                </li>
+            </ul>
+            <div class="tabs-pane active-pane" id="jbehave-config-enabled" role="tabpanel" aria-hidden="false">
+                <div class="tab-content">
+                        <table class="jiraform maxWidth">
+                            <tbody>
+                            <tr class="titlerow">
+                                <td colspan="2" class="jiraformheader">
+##                                    <a class="help-lnk"
+##                                       href="http://jbehaveforjira.com/"
+##                                       title="Get online help"
+##                                       data-helplink="online" target="_jirahelp" style="float: right;">
+##                                        <span class="aui-icon aui-icon-small aui-iconfont-help">Get help!</span>
+##                                    </a>
+                                    <h3 class="formtitle">Enable / Disable</h3>
+                                </td>
+                            </tr>
+                            <tr class="descriptionrow">
+                                <td colspan="2" class="jiraformheader">
+                                    <div class="desc-wrap">
+                                        <p>Here you can enable or disable JBehave For Jira plugin for the current project</p>
+                                    </div>
+                                </td>
+                            </tr>
+                            <tr class="hidden"><td colspan="2"></td></tr>
+                            <tr>
+                                <td class="fieldValueArea">
+                                    <fieldset class="group">
+                                        #if(${action.settingEnabled})
+                                            <input class="radio" type="radio" checked="checked" name="radiobuttons" id="jbSettingEnableOn">
+                                            <label for="jbSettingEnableOn">Enabled</label>
+                                            <input class="radio" type="radio" name="radiobuttons" id="jbSettingEnableOff">
+                                            <label for="jbSettingEnableOff">Disabled</label>
+                                        #else
+                                            <input class="radio" type="radio" name="radiobuttons" id="jbSettingEnableOn">
+                                            <label for="jbSettingEnableOn">Enabled</label>
+                                            <input class="radio" type="radio" checked="checked" name="radiobuttons" id="jbSettingEnableOff">
+                                            <label for="jbSettingEnableOff">Disabled</label>
+                                        #end
+                                    </fieldset>
+                                    <fieldset class="hidden parameters">
+                                        <input id="projectKeyParameter" type="hidden" testattribute="my value" name="projectKey" value="$textutils.htmlEncode($action.projectKey)">
+                                    </fieldset>
+                                </td>
+                            </tr>
+                            <tr class="hidden">
+                                <td>
+                                    <input type="hidden" id="id" name="id" value="1">
+                                </td>
+                            </tr>
+                            <tr class="hidden">
+                                <td>
+                                    <input type="hidden" id="edited" name="edited" value="true">
+                                </td>
+                            </tr>
+                            <tr class="buttons-container">
+                            ##                                    <td class="jiraformfooter">&nbsp;</td>
+                                <td colspan="1">
+                                    <div class="buttons-container">
+                                        <div class="buttons">
+                                            <button class="aui-button" onclick="jbCtr.submitSettingGeneral(event)">Update</button>
+                                            <button class="aui-button aui-button-link" onclick="jbCtr.cancelSettingGeneral(event)">Cancel</button>
+                                        </div>
+                                    </div>
+                                </td>
+                            </tr>
+                            </tbody>
+                        </table>
+                        <input type="hidden" id="atl_token" name="atl_token" value="B45G-AKQT-4TF3-4Y6G|b8c6a8da50cfa7647209fa129b886887baadb9d2|lin">
+##                    </form>
+                </div>
+            </div>
+            <div class="tabs-pane" id="jbehave-config-vcs-integration" role="tabpanel" aria-hidden="true">
+                <div class="tab-content">
+                    <div>
+                        second tab content
+                    </div>
+                </div>
+            </div>
+            <div class="tabs-pane" id="jbehave-config-rest-browser" role="tabpanel" aria-hidden="true">
+                <div class="tab-content">
+                    #set ($settings = $action.allSettings )
+                    #foreach ($mapEntry in $settings.entrySet())
+                        <div>
+                            <name>$mapEntry.key</name>
+                            <value>$mapEntry.value</value>
+                        </div>
+                    #end
+                </div>
+            </div>
+
+        </div>
+    </body>
+</html>
\ No newline at end of file
