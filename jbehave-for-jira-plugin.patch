Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/ProfileUserEqualsCurrentUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/ProfileUserEqualsCurrentUser.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/conditions/ProfileUserEqualsCurrentUser.java	(revision )
@@ -0,0 +1,27 @@
+package org.bitbucket.jbehaveforjira.plugin.conditions;
+
+import com.atlassian.plugin.PluginParseException;
+import com.atlassian.plugin.web.Condition;
+import com.atlassian.crowd.embedded.api.User;
+
+import java.util.Map;
+
+/**
+ * TODO - add at least one line of java doc comment.
+ *
+ * @author stasyukd
+ * @since 6.0.0-SNAPSHOT
+ */
+public class ProfileUserEqualsCurrentUser implements Condition {
+
+    @Override
+    public void init(Map<String, String> params) throws PluginParseException {
+    }
+
+    @Override
+    public boolean shouldDisplay(Map<String, Object> context) {
+        final User profileUser = (User) context.get("profileUser");
+        final User currentUser = (User) context.get("currentUser");
+        return profileUser.equals(currentUser);
+    }
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/actions/UpdateJBehavePreferencesAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/actions/UpdateJBehavePreferencesAction.java	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/java/org/bitbucket/jbehaveforjira/plugin/actions/UpdateJBehavePreferencesAction.java	(revision )
@@ -0,0 +1,180 @@
+package org.bitbucket.jbehaveforjira.plugin.actions;
+
+import com.atlassian.core.user.preferences.Preferences;
+import com.atlassian.jira.bc.issue.IssueService;
+import com.atlassian.jira.issue.Issue;
+import com.atlassian.jira.security.JiraAuthenticationContext;
+import com.atlassian.jira.security.xsrf.RequiresXsrfCheck;
+import com.atlassian.jira.user.ApplicationUser;
+import com.atlassian.jira.user.preferences.UserPreferencesManager;
+import com.atlassian.jira.web.action.JiraWebActionSupport;
+import com.atlassian.plugin.webresource.WebResourceManager;
+import org.ofbiz.core.entity.GenericValue;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import webwork.action.ActionContext;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class UpdateJBehavePreferencesAction extends JiraWebActionSupport {
+
+    private static final Logger log = LoggerFactory.getLogger(UpdateJBehavePreferencesAction.class);
+
+    private final static String PARAM_NAME_SHOW_LINE_NUMBERS = "showLineNumbers";
+    private final static String PREFERENCE_KEY_SHOW_LINE_NUMBERS = "jbehave.prefs.showLineNumbers";
+
+    private final static String PARAM_NAME_AUTO_ALIGN_TABLES = "autoAlignTables";
+    private final static String PREFERENCE_KEY_AUTO_ALIGN_TABLES = "jbehave.prefs.autoAlignTables";
+
+    private final static String PARAM_NAME_AUTO_INSERT_TABLES = "autoInsertTabularFields";
+    private final static String PREFERENCE_KEY_AUTO_INSERT_TABLES = "jbehave.prefs.autoInsertTabularFields";
+
+    private Long id;
+
+    private boolean showLineNumbers;
+
+    private boolean autoAlignTables;
+
+    private boolean autoInsertTabularFields;
+
+    private final IssueService issueService;
+
+    private final JiraAuthenticationContext authenticationContext;
+
+    private final WebResourceManager webResourceManager;
+
+    private UserPreferencesManager preferencesManager;
+
+    private HashMap fieldValuesHolder = null;
+
+    public UpdateJBehavePreferencesAction(IssueService issueService,
+                                          JiraAuthenticationContext authenticationContext,
+                                          WebResourceManager webResourceManager,
+                                          final UserPreferencesManager preferencesManager) {
+        this.issueService = issueService;
+        this.authenticationContext = authenticationContext;
+        this.webResourceManager = webResourceManager;
+
+        this.preferencesManager = preferencesManager;
+    }
+
+    /**
+     * The business logic of your form.
+     * Only gets called if validation passes.
+     *
+     * @return the view to display - should usually be "success"
+     */
+    @RequiresXsrfCheck
+    protected String doExecute() throws Exception {
+
+        ApplicationUser user = authenticationContext.getUser();
+        final Preferences preferences = preferencesManager.getPreferences(user);
+
+        Map parameters = ActionContext.getParameters();
+
+        String[] showLineNumbersParam = (String[]) parameters.get(PARAM_NAME_SHOW_LINE_NUMBERS);
+        if (showLineNumbersParam != null && showLineNumbersParam.length > 0 && showLineNumbersParam[0].equals("on")) {
+            this.showLineNumbers = true;
+        } else{
+            this.showLineNumbers = false;
+        }
+        preferences.setBoolean(PREFERENCE_KEY_SHOW_LINE_NUMBERS, this.showLineNumbers);
+
+        String[] autoAlignTablesParam = (String[]) parameters.get(PARAM_NAME_AUTO_ALIGN_TABLES);
+        if (autoAlignTablesParam != null && autoAlignTablesParam.length > 0 && autoAlignTablesParam[0].equals("on")) {
+            this.autoAlignTables = true;
+        } else {
+            this.autoAlignTables = false;
+        }
+        preferences.setBoolean(PREFERENCE_KEY_AUTO_ALIGN_TABLES, this.autoAlignTables);
+
+        String[] autoInsertTabularFieldsParam = (String[]) parameters.get(PARAM_NAME_AUTO_INSERT_TABLES);
+        if (autoInsertTabularFieldsParam != null && autoInsertTabularFieldsParam.length > 0 && autoInsertTabularFieldsParam[0].equals("on")) {
+            this.autoInsertTabularFields = true;
+        } else {
+            this.autoInsertTabularFields = false;
+        }
+        preferences.setBoolean(PREFERENCE_KEY_AUTO_INSERT_TABLES, this.autoInsertTabularFields);
+
+        // We want to redirect back to the view issue page so
+        return returnComplete("/browse/" + this.getIssue().getKey());
+    }
+
+    /**
+     * The initialization logic of the form.
+     * Validation does NOT happen before this.
+     *
+     * @return the view to display - should usually be "input"
+     */
+    public String doDefault() throws Exception {
+
+        ApplicationUser user = authenticationContext.getUser();
+        final Preferences preferences = preferencesManager.getPreferences(user);
+
+        this.showLineNumbers = preferences.getBoolean(PREFERENCE_KEY_SHOW_LINE_NUMBERS);
+        this.autoAlignTables = preferences.getBoolean(PREFERENCE_KEY_AUTO_ALIGN_TABLES);
+        this.autoInsertTabularFields = preferences.getBoolean(PREFERENCE_KEY_AUTO_INSERT_TABLES);
+
+        // Initialization logic
+        return INPUT;
+    }
+
+    /**
+     * Used by the decorator
+     */
+    public GenericValue getProject() {
+        return getIssue().getProject();
+    }
+
+    /**
+     * Used by the decorator
+     */
+    public Issue getIssue() {
+        return getIssueObject();
+    }
+
+    public Issue getIssueObject() {
+        final IssueService.IssueResult issueResult = issueService.getIssue(authenticationContext.getLoggedInUser(), id);
+        if (!issueResult.isValid()) {
+            this.addErrorCollection(issueResult.getErrorCollection());
+            return null;
+        }
+
+        return issueResult.getIssue();
+    }
+
+    // Getter adn Setters for passing the form params
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public boolean isShowLineNumbers() {
+        return showLineNumbers;
+    }
+
+    public void setShowLineNumbers(boolean showLineNumbers) {
+        this.showLineNumbers = showLineNumbers;
+    }
+
+    public boolean isAutoAlignTables() {
+        return autoAlignTables;
+    }
+
+    public void setAutoAlignTables(boolean autoAlignTables) {
+        this.autoAlignTables = autoAlignTables;
+    }
+
+    public boolean isAutoInsertTabularFields() {
+        return autoInsertTabularFields;
+    }
+
+    public void setAutoInsertTabularFields(boolean autoInsertTabularFields) {
+        this.autoInsertTabularFields = autoInsertTabularFields;
+    }
+}
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/UpdateJBehavePreferences.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/UpdateJBehavePreferences.js	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/js/UpdateJBehavePreferences.js	(revision )
@@ -0,0 +1,58 @@
+AJS.$(function () {
+    // Function for getting the issue key of the issu ebeing edited.
+    var getIssueKey = function () {
+        if (JIRA.IssueNavigator.isNavigator()) {
+            return JIRA.IssueNavigator.getSelectedIssueKey();
+        } else {
+            return AJS.$.trim(AJS.$("#key-val").text());
+        }
+    };
+
+    // Function for getting the project key of the Issue being edited.
+    var getProjectKey = function () {
+        var issueKey = getIssueKey();
+        if (issueKey) {
+            return issueKey.match("[A-Z]*")[0];
+        }
+    };
+
+    JIRA.Dialogs.scheduleIssue = new JIRA.FormDialog({
+        id: "schedule-dialog",
+        trigger: "a.issueaction-update-jbehave-preferences",
+        ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
+        onSuccessfulSubmit: function () {  // This method is used to define behaviour on a successful form submission.
+            // We want to get the versions specified then place them in the view.
+            // This selector will get the container for the FixFor Version for both a list of issues and the view issue page.
+//            var $fixForContainer = AJS.$("#issuerow" + JIRA.IssueNavigator.getSelectedIssueId() + " td.fixVersions, #fixfor-val");
+//            $fixForContainer.html("");  // Blank out the existing versions
+//            // Now lets construct the html to place into the container
+//            var htmlToInsert = "";
+//            // this.getContentArea() return the contents of the dialog.  From this we will get teh selected values of the select list and iterate over them.
+//            this.getContentArea().find("#fixVersions option:selected").each(function () {
+//                var $option = AJS.$(this);
+//                // We want to comma separate them
+//                if (htmlToInsert !== "") {
+//                    htmlToInsert += ", ";
+//                }
+//                var versionName = AJS.$.trim($option.text());
+//                // Construct the link and append it to the html
+//                htmlToInsert += "<a href='" + contextPath + "/browse/" + getProjectKey() + "/fixforversion/" + $option.val() + "' title='" + versionName + "'>" + versionName + "</a>";
+//            });
+//
+//            // If no options were selected, insert none.
+//            if (htmlToInsert === "") {
+//                htmlToInsert = AJS.I18n.getText("common.words.none");
+//            }
+//            // set the html of the container.
+//            $fixForContainer.html(htmlToInsert);
+            console.log("jbehave preferences successfully updated");
+        },
+        onDialogFinished: function () {  // This function is used to define behaviour after the form has finished
+            // We want to display a notification telling people that the fix version has been updated.
+            // If it is displaying in the Issue Navigator we want to also show the issue key of the issue updated.
+            JIRA.Messages.showSuccessMsg("JBehave options updated successfully");
+        },
+        autoClose: true // This tells the dialog to automatically close after a successful form submit.
+
+    });
+});
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/jbehave_preferences.vm
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/jbehave_preferences.vm	(revision )
+++ jbehave-for-jira/jbehave-for-jira-plugin/src/main/resources/velocity/jbehave_preferences.vm	(revision )
@@ -0,0 +1,74 @@
+<html>
+<head>
+    <title>$action.getText('scheduler-webwork-module.schedule.issue')</title>
+    #if (${action.issueObject})
+        <meta name="decorator" content="issueaction" />
+    #else
+        <meta name="decorator" content="message" />
+    #end
+</head>
+<body>
+    #if(${action.issueObject})
+    <form action="UpdateJBehavePreferencesAction.jspa" class="aui" id="update-jbehave-preferences" method="post">
+        <div class="form-body">
+            <div class="hidden">
+                <input name="atl_token" type="hidden" value="${action.xsrfToken}">
+            </div>
+            <h2 class="dialog-title">$action.getText('userPreferences.title')</h2>
+            <div class="hidden">
+                <input name="id" type="hidden" value="${action.id}">
+                <input name="returnUrl" type="hidden" value="$!{action.returnUrl}">
+            </div>
+            <fieldset class="group">
+                <div class="checkbox">
+                    <input class="checkbox"
+                           type="checkbox" name="showLineNumbers" id="showLineNumbers"
+                           #if(${action.showLineNumbers})
+                           checked="checked"
+                           #end
+                            >
+                    <label for="showLineNumbers">${action.getText('userPreferences.showLineNumbers.label')}</label>
+                </div>
+            </fieldset>
+            <fieldset class="group">
+                <div class="checkbox">
+                    <input class="checkbox" type="checkbox" name="autoAlignTables" id="autoAlignTables"
+                        #if(${action.autoAlignTables})
+                           checked="checked"
+                        #end
+                            >
+                    <label for="autoAlignTables">${action.getText('userPreferences.autoAlignTables.label')}</label>
+                </div>
+            </fieldset>
+            <fieldset class="group">
+                <div class="checkbox">
+                    <input class="checkbox" type="checkbox" name="autoInsertTabularFields" id="autoInsertTabularFields"
+                        #if(${action.autoInsertTabularFields})
+                           checked="checked"
+                        #end
+                            >
+                    <label for="autoInsertTabularFields">${action.getText('userPreferences.autoInsertTabularFields.label')}</label>
+                </div>
+            </fieldset>
+        </div>
+        <div class="buttons-container form-footer">
+            <div class="buttons">
+                <input accesskey="s" class="button" id="schedule-issue-submit"
+                       name="Update" title="Press Ctrl+Alt+s to submit this form" type="submit" value="Update">
+                <a accesskey="`" class="cancel" href="/browse/${action.issue.key}" id="schedule-issue-cancel" title="Press Ctrl+Alt+` to cancel">Cancel</a>
+            </div>
+        </div>
+    </form>
+    #else
+    <div class="remove-me">
+        <h1>${action.getText('common.words.error')}</h1>
+        <div class="aui-message error"><span class="aui-icon icon-error"></span>
+            #foreach($message in $action.flushedErrorMessages)
+                <p>$message</p>
+            #end
+        </div>
+    </div>
+
+    #end
+</body>
+</html>
\ No newline at end of file
