Index: jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/com/jbehaveforjira/groovyclient/GroovyStepDocReporter.groovy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/com/jbehaveforjira/groovyclient/GroovyStepDocReporter.groovy	(date 1412147329000)
+++ jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/com/jbehaveforjira/groovyclient/GroovyStepDocReporter.groovy	(revision )
@@ -402,38 +402,37 @@
 
         int pos = 0;
         int groupCount = 0;
-        int indexOfOpenBrace = resolvedPattern.indexOf("(");
-        while (indexOfOpenBrace != -1) {
 
+        Pattern openBracePattern = Pattern.compile("(?<!\\\\)\\(");
+        Matcher openBraceMatcher = openBracePattern.matcher(resolvedPattern);
+        Pattern closeBracePattern = Pattern.compile("(?<!\\\\)\\)");
+        Matcher closeBraceMatcher = closeBracePattern.matcher(resolvedPattern);
+
+        boolean openBraceFound = openBraceMatcher.find(pos);
+        while (openBraceFound && pos < resolvedPattern.length()) {
+
             // we want to group everything before that opening brace
             groupedPatternBuilder.append("(");
-            groupedPatternBuilder.append(resolvedPattern.substring(pos, indexOfOpenBrace));
+            groupedPatternBuilder.append(resolvedPattern.substring(pos, openBraceMatcher.start()));
             groupedPatternBuilder.append(")");
             groupCount++;
 
-            int indexOfCloseBrace = resolvedPattern.indexOf(")", indexOfOpenBrace);
-            Validate.isTrue(indexOfCloseBrace != -1);
-            pos = indexOfCloseBrace + 1;
-            groupedPatternBuilder.append(resolvedPattern.substring(indexOfOpenBrace, pos));
+            boolean closeBraceFound = closeBraceMatcher.find(openBraceMatcher.start());
+            Validate.isTrue(closeBraceFound, "Couldn't find closing matching brace in pattern - " + resolvedPattern);
+            groupedPatternBuilder.append(resolvedPattern.substring(openBraceMatcher.start(), closeBraceMatcher.end()));
             groupCount++;
             parameterGroups.add(groupCount);
 
-            if (pos >= resolvedPattern.length()) {
-                // we have reached the end of the pattern
-                break;
-            } else {
-                indexOfOpenBrace = resolvedPattern.indexOf("(", pos);
-                if (indexOfOpenBrace != -1) {
-                    // we simply iterate again
-                    continue;
-                } else {
+            pos = closeBraceMatcher.end();
+
+            openBraceFound = openBraceMatcher.find(pos);
+        }
+
-                    // there are no more parameter groups so we simply append any string into last group
+        // there are no more parameter groups so we simply append any string into last group
+        if (pos < resolvedPattern.length()) {
-                    groupedPatternBuilder.append("(");
-                    groupedPatternBuilder.append(resolvedPattern.substring(pos));
-                    groupedPatternBuilder.append(")");
+            groupedPatternBuilder.append("(");
+            groupedPatternBuilder.append(resolvedPattern.substring(pos));
+            groupedPatternBuilder.append(")");
-                    groupCount++;
-                }
-            }
         }
 
         String groupedPattern = groupedPatternBuilder.toString();
