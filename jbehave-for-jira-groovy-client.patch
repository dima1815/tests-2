Index: jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStoryReporter.groovy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStoryReporter.groovy	(date 1408996119000)
+++ jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStoryReporter.groovy	(revision )
@@ -1,4 +1,5 @@
 package org.bitbucket.jbehaveforjira.groovyclient
+
 import com.sun.jersey.api.client.Client
 import com.sun.jersey.api.client.WebResource
 import org.apache.commons.lang.Validate
@@ -15,11 +16,14 @@
 import javax.xml.bind.annotation.XmlRootElement
 import java.util.regex.Matcher
 import java.util.regex.Pattern
+
 /**
- * @author Maryna Stasyuk
+ * @author Maryna Pristrom
  */
 public class GroovyStoryReporter implements StoryReporter {
 
+
+    private String loginParams;
     public static enum TestStatus {
 
         PASSED,
@@ -34,23 +38,26 @@
 
     }
 
+    private String basePostPath;
+
     private final HtmlOutput htmlOutput;
 
     private boolean compressFailureTrace;
+
     private boolean reportFailureTrace;
+
     private LocalizedKeywords keywords;
 
     private PrintStream printStream;
 
     private String environment;
+
     private Properties outputPatterns;
 
     private String jiraBaseUrl;
 
     private String jiraProject;
 
-    private String addTestReportPath = "rest/story-res/1.0/story-test/add-for-path";
-
     private String storyPath;
 
     private Long jiraVersion;
@@ -73,9 +80,11 @@
 
     private final List<Byte> bytesList;
 
-    public GroovyStoryReporter(String jiraBaseUrl, String jiraProject, String environment) {
-//        this(new Properties(), new LocalizedKeywords(), false, jiraBaseUrl, jiraProject, environment);
+    public GroovyStoryReporter(String jiraBaseUrl, String jiraProject, String username, String password, String environment) {
 
+        this.loginParams = "?os_username=" + username + "&os_password=" + password;
+        this.basePostPath = jiraBaseUrl + "/rest/jbehave-for-jira/1.0/story-test/add-for-path/";
+
         this.bytesList = new LinkedList<Byte>();
         OutputStream outStream = new OutputStream() {
 
@@ -101,24 +110,6 @@
         this.htmlOutput = new CustomHtmlOutput(printStream, outputPatterns, keywords, reportFailureTrace, compressFailureTrace);
     }
 
-//    public GroovyStoryReporter(Properties outputPatterns,
-//                             Keywords keywords, boolean reportFailureTrace,
-//                             String jiraBaseUrl, String jiraProject, String environment) {
-//        this(new BytesListPrintStream(new LinkedList<Byte>()), outputPatterns, keywords, reportFailureTrace, false,
-//                jiraBaseUrl, jiraProject, environment);
-//    }
-
-//    public GroovyStoryReporter(BytesListPrintStream printStream, Properties outputPatterns,
-//                             Keywords keywords, boolean reportFailureTrace,
-//                             boolean compressFailureTrace,
-//                             String jiraBaseUrl, String jiraProject, String environment) {
-//        super(printStream, mergeOverridenPatterns(outputPatterns), keywords, reportFailureTrace, compressFailureTrace);
-//        this.printStream = printStream;
-//        this.jiraBaseUrl = jiraBaseUrl;
-//        this.jiraProject = jiraProject;
-//        this.environment = environment;
-//    }
-
     public void narrative(Narrative narrative) {
         htmlOutput.narrative(narrative);
     }
@@ -148,19 +139,19 @@
         htmlOutput.afterScenario();
 
         switch (this.currentScenarioStatus) {
-            case PASSED:
+            case TestStatus.PASSED:
                 totalScenariosPassed++;
                 break;
-            case FAILED:
+            case TestStatus.FAILED:
                 totalScenariosFailed++;
                 break;
-            case PENDING:
+            case TestStatus.PENDING:
                 totalScenariosPending++;
                 break;
-            case IGNORED:
+            case TestStatus.IGNORED:
                 totalScenariosIgnored++;
                 break;
-            case NOT_PERFORMED:
+            case TestStatus.NOT_PERFORMED:
                 totalScenariosNotPerformed++;
                 break;
         }
@@ -353,12 +344,7 @@
             throw new IllegalArgumentException("JiraStory path must match pattern - " + regexPattern);
         }
 
-        String loginParams = "?os_username=admin&os_password=admin";
-        String postUrl = (jiraBaseUrl
-                + "/" + addTestReportPath + "/"
-//                + jiraProject + "/"
-                + storyPath
-                + loginParams);
+        String postUrl = this.basePostPath + storyPath + loginParams;
 
         Client client = Client.create();
         WebResource res = client.resource(postUrl);
@@ -371,7 +357,7 @@
     }
 
 
-    private static String markTableCorrectly(String text, CustomHtmlOutput htmlOutput) {
+    public static String markTableCorrectly(String text, CustomHtmlOutput htmlOutput) {
 
         if (text.contains("&#9252;")) {
 
@@ -455,7 +441,7 @@
     }
 
     /**
-     * @author Maryna Stasyuk
+     * @author Maryna Pristrom
      */
     public static class CustomHTMLFormatPatterns {
 
@@ -679,26 +665,8 @@
             this.totalScenariosNotPerformed = totalScenariosNotPerformed;
         }
 
-        @Override
-        public String toString() {
-            return "JiraStoryHtmlReport{" +
-                    "environment='" + environment + '\'' +
-                    ", storyPath='" + storyPath + '\'' +
-                    ", storyVersion=" + storyVersion +
-                    ", status=" + status +
-                    ", totalScenarios=" + totalScenarios +
-                    ", totalScenariosPassed=" + totalScenariosPassed +
-                    ", totalScenariosFailed=" + totalScenariosFailed +
-                    ", totalScenariosPending=" + totalScenariosPending +
-                    ", totalScenariosSkipped=" + totalScenariosSkipped +
-                    ", totalScenariosNotPerformed=" + totalScenariosNotPerformed +
-                    ", htmlReport='" + htmlReport + '\'' +
-                    '}';
-        }
+    }
 
-
-    }
-
     public static class CustomHtmlOutput extends HtmlOutput {
 
         public CustomHtmlOutput(PrintStream printStream, Properties outputPatterns, LocalizedKeywords keywords,
@@ -713,7 +681,7 @@
         }
 
         @Override
-        protected Object[] escape(PrintStreamOutput.Format format, Object... args) {
+        public Object[] escape(PrintStreamOutput.Format format, Object... args) {
             return super.escape(format, args);
         }
     }
Index: jbehave-for-jira/jbehave-for-jira-groovy-client/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-groovy-client/pom.xml	(date 1408996119000)
+++ jbehave-for-jira/jbehave-for-jira-groovy-client/pom.xml	(revision )
@@ -6,40 +6,45 @@
     <groupId>org.bitbucket.pristrom</groupId>
     <artifactId>jbehave-for-jira-groovy-client</artifactId>
     <packaging>jar</packaging>
-    <name>JBehave For Jira - Groovy Client Implementation</name>
+    <name>JBehave For Jira - Groovy Client</name>
     <version>1.0.0-SNAPSHOT</version>
     <description>Groovy client for integrating with the 'JBehave for Jira - Jira Plugin' component</description>
     <url>https://bitbucket.org/pristrom/jbehave-for-jira-java-client-impl/overview</url>
     <build>
+        <resources>
+            <resource>
+                <directory>src/main/groovy</directory>
+            </resource>
+        </resources>
         <plugins>
-            <plugin>
-                <groupId>org.codehaus.gmavenplus</groupId>
-                <artifactId>gmavenplus-plugin</artifactId>
-                <version>1.2</version>
-                <executions>
-                    <execution>
-                        <goals>
-                            <goal>compile</goal>
-                            <goal>testCompile</goal>
-                        </goals>
-                        <configuration>
-                            <sources>
-                                <source>
-                                    <directory>${project.basedir}/src/main/groovy</directory>
-                                    <includes>
-                                        <include>**/*.groovy</include>
-                                    </includes>
-                                </source>
-                            </sources>
-                        </configuration>
-                    </execution>
-                </executions>
-            </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>3.1</version>
-            </plugin>
+            <!--<plugin>-->
+                <!--<groupId>org.codehaus.gmavenplus</groupId>-->
+                <!--<artifactId>gmavenplus-plugin</artifactId>-->
+                <!--<version>1.2</version>-->
+                <!--<executions>-->
+                    <!--<execution>-->
+                        <!--<goals>-->
+                            <!--<goal>compile</goal>-->
+                            <!--<goal>testCompile</goal>-->
+                        <!--</goals>-->
+                        <!--<configuration>-->
+                            <!--<sources>-->
+                                <!--<source>-->
+                                    <!--<directory>${project.basedir}/src/main/groovy</directory>-->
+                                    <!--<includes>-->
+                                        <!--<include>**/*.groovy</include>-->
+                                    <!--</includes>-->
+                                <!--</source>-->
+                            <!--</sources>-->
+                        <!--</configuration>-->
+                    <!--</execution>-->
+                <!--</executions>-->
+            <!--</plugin>-->
+            <!--<plugin>-->
+                <!--<groupId>org.apache.maven.plugins</groupId>-->
+                <!--<artifactId>maven-compiler-plugin</artifactId>-->
+                <!--<version>3.1</version>-->
+            <!--</plugin>-->
             <!--<plugin>-->
                 <!--<groupId>com.github.wvengen</groupId>-->
                 <!--<artifactId>proguard-maven-plugin</artifactId>-->
\ No newline at end of file
Index: jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStoryPathsFinder.groovy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStoryPathsFinder.groovy	(date 1408996119000)
+++ jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStoryPathsFinder.groovy	(revision )
@@ -2,10 +2,7 @@
 import com.sun.jersey.api.client.Client
 import com.sun.jersey.api.client.ClientResponse
 import com.sun.jersey.api.client.WebResource
-import org.apache.commons.lang.Validate
 import org.bitbucket.jbehaveforjira.javaclient.StoryPathsFinder
-import org.slf4j.Logger
-import org.slf4j.LoggerFactory
 
 import javax.ws.rs.core.MediaType
 import javax.ws.rs.core.Response
@@ -13,20 +10,15 @@
 import javax.xml.bind.annotation.XmlAccessorType
 import javax.xml.bind.annotation.XmlRootElement
 /**
- * @author Maryna Stasyuk
+ * @author Maryna Pristrom
  */
-public class GroovyStoryPathsFinder implements StoryPathsFinder {
+public class GroovyStoryPathFinder implements StoryPathsFinder {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private String postUrl;
 
-    private String jiraBaseUrl;
+    public GroovyStoryPathFinder(String jiraBaseUrl, String projectKey, String username, String password) {
 
-    private String projectKey;
-
-    public GroovyStoryPathsFinder(String jiraBaseUrl, String projectKey) {
-        this.jiraBaseUrl = jiraBaseUrl;
-        this.projectKey = projectKey;
-        Validate.notEmpty(projectKey);
+        this.postUrl = jiraBaseUrl + "/rest/jbehave-for-jira/1.0/find/story-paths/" + projectKey + "?os_username=" + username + "&os_password=" + password;
     }
 
     public List<String> findPaths() {
@@ -39,9 +31,7 @@
 
         URI jiraSearchUrl = null;
         try {
-            String fullPath = jiraBaseUrl + "/rest/story-res/1.0/find/story-paths/" + projectKey;
-            fullPath += "?os_username=admin&os_password=admin";
-            jiraSearchUrl = new URI(fullPath);
+            jiraSearchUrl = new URI(postUrl);
         } catch (URISyntaxException e) {
             throw new RuntimeException(e);
         }
@@ -49,9 +39,7 @@
         Client client = Client.create();
         WebResource res = client.resource(jiraSearchUrl);
         res.type(MediaType.APPLICATION_JSON);
-//        res.type(MediaType.TEXT_PLAIN);
         ClientResponse response = res.get(ClientResponse.class);
-        log.info("response - " + response);
         if (response.getStatus() == 200) {
 
             int length = response.getLength();
@@ -88,6 +76,5 @@
     }
 
 }
-
 
 
Index: jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStoryLoader.groovy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStoryLoader.groovy	(date 1408996119000)
+++ jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStoryLoader.groovy	(revision )
@@ -1,5 +1,4 @@
 package org.bitbucket.jbehaveforjira.groovyclient
-
 import com.sun.jersey.api.client.Client
 import com.sun.jersey.api.client.ClientResponse
 import com.sun.jersey.api.client.WebResource
@@ -10,40 +9,28 @@
 import javax.ws.rs.core.Response
 import java.util.regex.Matcher
 import java.util.regex.Pattern
-
 /**
- * @author Maryna Stasyuk
+ * @author Maryna Pristrom
  */
 public class GroovyStoryLoader implements StoryLoader {
 
-    private final String projectKey;
+    private String downloadedStoriesDir = "src/test/resources/jira_stories";
 
-    private final String downloadedStoriesDir;
+    private String basePostUrl;
 
-    private final String dowloadStoryPath;
+    private String loginParams;
 
-    private final String jiraUsername;
-
-    private final String jiraPassword;
-
     private final boolean outputStoriesToFile;
 
-    public GroovyStoryLoader(String jiraBaseUrl, String projectKey, String jiraUsername, String jiraPassword) {
-        this(jiraBaseUrl, projectKey, jiraUsername, jiraPassword, false, null);
-    }
-
     public GroovyStoryLoader(String jiraBaseUrl, String projectKey, String jiraUsername, String jiraPassword,
                              boolean outputStoriesToFile) {
         this(jiraBaseUrl, projectKey, jiraUsername, jiraPassword, outputStoriesToFile, "target/jira_stories/");
     }
 
-    public GroovyStoryLoader(String jiraBaseUrl, String projectKey, String jiraUsername, String jiraPassword,
+    public GroovyStoryLoader(String jiraBaseUrl, String projectKey, String username, String password,
                              boolean outputStoriesToFile, String outputStoriesDir) {
-        this.outputStoriesDir = outputStoriesDir
-        this.projectKey = projectKey;
-        this.jiraPassword = jiraPassword
-        this.jiraUsername = jiraUsername
-        this.dowloadStoryPath = jiraBaseUrl + "/rest/story-res/1.0/find/for-path/";
+        basePostUrl = jiraBaseUrl + "/rest/jbehave-for-jira/1.0/find/for-path/";
+        loginParams = "?os_username=" + username + "&os_password=" + password;
         this.outputStoriesToFile outputStoriesToFile;
         this.downloadedStoriesDir = outputStoriesDir;
     }
@@ -53,11 +40,7 @@
 
         URI jiraSearchUrl = null;
         try {
-            String fullPath = dowloadStoryPath + storyPath;
-            fullPath += "?os_username=" + jiraUsername
-            "&os_password=" + jiraPassword;
-            fullPath += "&versionInPath=true";
-            fullPath += "&asString=true";
+            String fullPath = basePostUrl + storyPath + loginParams + "&versionInPath=true&asString=true";
             jiraSearchUrl = new URI(fullPath);
         } catch (URISyntaxException e) {
             throw new RuntimeException(e);
@@ -76,8 +59,8 @@
         } else {
             int status = response.getStatus();
             Response.StatusType statusInfo = response.getStatusInfo();
-            throw new RuntimeException("Error occurred while trying to load Jira story for path - " + storyPath +
-                    ". Response status was - " + status + ", status info - " + statusInfo);
+            throw new RuntimeException("Error occurred while trying to find Jira story paths. " +
+                    "Response status was - " + status + ", status info - " + statusInfo);
         }
 
     }
Index: jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStepDocReporter.groovy
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStepDocReporter.groovy	(date 1408996119000)
+++ jbehave-for-jira/jbehave-for-jira-groovy-client/src/main/groovy/org/bitbucket/jbehaveforjira/groovyclient/GroovyStepDocReporter.groovy	(revision )
@@ -37,9 +37,9 @@
     }
 
     public GroovyStepDocReporter(String jiraBaseUrl, String jiraProject, String jiraUserName, String jiraPassword, StepPatternParser stepPatternParser) {
-        this.reportStepDocUrl = jiraBaseUrl + "/rest/story-res/1.0/step-doc/add/" + jiraProject
+        this.reportStepDocUrl = (jiraBaseUrl + "/rest/jbehave-for-jira/1.0/step-doc/add/" + jiraProject
                 + "?os_username=" + jiraUserName
-                + "&os_password=" + jiraPassword;
+        + "&os_password=" + jiraPassword);
         this.patternParser = stepPatternParser;
     }
 
@@ -90,7 +90,7 @@
                             if (actualTypeArgument instanceof Class<?>) {
                                 Class<?> classType = (Class<?>) actualTypeArgument;
                                 populateParameterInfo(parameterInfo, classType);
-                                parameterInfo.isListType = true;
+                                parameterInfo.listType = true;
                             }
                         } else {
                             // if there are more type arguments, we ignore such cases
@@ -207,7 +207,7 @@
             List<TabularFieldInfo> tabularFieldInfos = new ArrayList<TabularFieldInfo>();
 
             // parameter can be represented as a table
-            parameterInfo.isListType = true;
+            parameterInfo.listType = true;
             Field[] declaredFields = classType.getDeclaredFields();
 
             for (Field declaredField : declaredFields) {
@@ -344,7 +344,7 @@
 
         public String simpleParameterType;
 
-        public boolean isListType;
+        public boolean listType;
 
         public List<String> allowedValues;
 
